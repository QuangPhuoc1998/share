
cli_template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f6  00800100  00002682  00002716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000238  008002f6  008002f6  0000290c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000488  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040b1  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018df  00000000  00000000  00006ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002532  00000000  00000000  000087c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c58  00000000  00000000  0000acf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001050  00000000  00000000  0000b94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000316c  00000000  00000000  0000c99c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0000fb08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e8       	ldi	r30, 0x82	; 130
      7c:	f6 e2       	ldi	r31, 0x26	; 38
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3f       	cpi	r26, 0xF6	; 246
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a6 ef       	ldi	r26, 0xF6	; 246
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 32       	cpi	r26, 0x2E	; 46
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 3f 13 	jmp	0x267e	; 0x267e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:


int main(void)
{	
	/*--- Board support package init ---*/
	bsp_timer_1_init();
      a6:	0e 94 50 05 	call	0xaa0	; 0xaa0 <bsp_timer_1_init>
	bsp_timer_1_set_interrupt_handle(timer_handler);
      aa:	83 ec       	ldi	r24, 0xC3	; 195
      ac:	9c e0       	ldi	r25, 0x0C	; 12
      ae:	0e 94 63 05 	call	0xac6	; 0xac6 <bsp_timer_1_set_interrupt_handle>
	bsp_uart_init(9600);
      b2:	60 e8       	ldi	r22, 0x80	; 128
      b4:	75 e2       	ldi	r23, 0x25	; 37
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	0e 94 97 05 	call	0xb2e	; 0xb2e <bsp_uart_init>
	bsp_i2c_init();
      be:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <bsp_i2c_init>
	bsp_adc_init();
      c2:	0e 94 9e 04 	call	0x93c	; 0x93c <bsp_adc_init>
	sei();
      c6:	78 94       	sei
	/*--- User library init ---*/
	CLI_Init();
      c8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <CLI_Init>
	Lcd_Init();
      cc:	0e 94 ed 08 	call	0x11da	; 0x11da <Lcd_Init>
	/*--- Peripheral init --*/
	per_uart_init();
      d0:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <per_uart_init>
	/*--- Feature init ---*/
	ftr_cli_init();
      d4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ftr_cli_init>
	ftr_sensor_init();
      d8:	0e 94 91 06 	call	0xd22	; 0xd22 <ftr_sensor_init>
	/*--- App init ---*/
	app_display_init();
      dc:	0e 94 bd 03 	call	0x77a	; 0x77a <app_display_init>
	app_cli_init();
      e0:	0e 94 ac 03 	call	0x758	; 0x758 <app_cli_init>
	/*--- Start loop ---*/
    while (1) 
    {
		task_loop();
      e4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <task_loop>
      e8:	fd cf       	rjmp	.-6      	; 0xe4 <main+0x3e>

000000ea <app_cli_slip_time_data>:
	}
	return 0;
}

static uint8_t app_cli_slip_time_data(uint8_t * data_in, rtc_t * rtc)
{
      ea:	bf 92       	push	r11
      ec:	cf 92       	push	r12
      ee:	df 92       	push	r13
      f0:	ef 92       	push	r14
      f2:	ff 92       	push	r15
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	7c 01       	movw	r14, r24
      fe:	6b 01       	movw	r12, r22
	uint8_t i;
	char ** p_data;
	char* p_token;
	/*--- memory allocation ---*/
	p_data = (char **)malloc(MAX_DATA_ROW * sizeof(char *));
     100:	86 e0       	ldi	r24, 0x06	; 6
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <malloc>
     108:	8c 01       	movw	r16, r24
	for (i = 0; i < MAX_DATA_ROW; i++)
     10a:	b1 2c       	mov	r11, r1
     10c:	0d c0       	rjmp	.+26     	; 0x128 <app_cli_slip_time_data+0x3e>
	{
		p_data[i] = (char *)malloc(MAX_DATA_COL * sizeof(char));
     10e:	cb 2d       	mov	r28, r11
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	cc 0f       	add	r28, r28
     114:	dd 1f       	adc	r29, r29
     116:	c0 0f       	add	r28, r16
     118:	d1 1f       	adc	r29, r17
     11a:	83 e0       	ldi	r24, 0x03	; 3
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <malloc>
     122:	99 83       	std	Y+1, r25	; 0x01
     124:	88 83       	st	Y, r24
	uint8_t i;
	char ** p_data;
	char* p_token;
	/*--- memory allocation ---*/
	p_data = (char **)malloc(MAX_DATA_ROW * sizeof(char *));
	for (i = 0; i < MAX_DATA_ROW; i++)
     126:	b3 94       	inc	r11
     128:	82 e0       	ldi	r24, 0x02	; 2
     12a:	8b 15       	cp	r24, r11
     12c:	80 f7       	brcc	.-32     	; 0x10e <app_cli_slip_time_data+0x24>
	{
		p_data[i] = (char *)malloc(MAX_DATA_COL * sizeof(char));
	}
	/*--------Splip data--------*/
	i = 0;
	p_token = strtok(strstr((char *)data_in, "="), ",");
     12e:	6d e3       	ldi	r22, 0x3D	; 61
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	c7 01       	movw	r24, r14
     134:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <strchr>
     138:	66 e3       	ldi	r22, 0x36	; 54
     13a:	71 e0       	ldi	r23, 0x01	; 1
     13c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <strtok>
	p_token++;
     140:	01 96       	adiw	r24, 0x01	; 1
	for (i = 0; i < MAX_DATA_ROW; i++)
	{
		p_data[i] = (char *)malloc(MAX_DATA_COL * sizeof(char));
	}
	/*--------Splip data--------*/
	i = 0;
     142:	c0 e0       	ldi	r28, 0x00	; 0
	p_token = strtok(strstr((char *)data_in, "="), ",");
	p_token++;
	while (i < MAX_DATA_ROW && p_token != NULL)
     144:	12 c0       	rjmp	.+36     	; 0x16a <app_cli_slip_time_data+0x80>
	{
		strcpy(p_data[i], p_token);
     146:	ec 2f       	mov	r30, r28
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	ee 0f       	add	r30, r30
     14c:	ff 1f       	adc	r31, r31
     14e:	e0 0f       	add	r30, r16
     150:	f1 1f       	adc	r31, r17
     152:	bc 01       	movw	r22, r24
     154:	80 81       	ld	r24, Z
     156:	91 81       	ldd	r25, Z+1	; 0x01
     158:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <strcpy>
		p_token = strtok(NULL, ",");
     15c:	66 e3       	ldi	r22, 0x36	; 54
     15e:	71 e0       	ldi	r23, 0x01	; 1
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <strtok>
		i++;
     168:	cf 5f       	subi	r28, 0xFF	; 255
	}
	/*--------Splip data--------*/
	i = 0;
	p_token = strtok(strstr((char *)data_in, "="), ",");
	p_token++;
	while (i < MAX_DATA_ROW && p_token != NULL)
     16a:	c3 30       	cpi	r28, 0x03	; 3
     16c:	10 f4       	brcc	.+4      	; 0x172 <app_cli_slip_time_data+0x88>
     16e:	00 97       	sbiw	r24, 0x00	; 0
     170:	51 f7       	brne	.-44     	; 0x146 <app_cli_slip_time_data+0x5c>
		strcpy(p_data[i], p_token);
		p_token = strtok(NULL, ",");
		i++;
	}
	/*--- Printf ---*/
	if(i != MAX_DATA_ROW)
     172:	c3 30       	cpi	r28, 0x03	; 3
     174:	69 f4       	brne	.+26     	; 0x190 <app_cli_slip_time_data+0xa6>
     176:	14 c0       	rjmp	.+40     	; 0x1a0 <app_cli_slip_time_data+0xb6>
	{
		for (i = 0; i < MAX_DATA_ROW; i++)
		{
			free(p_data[i]);
     178:	ec 2f       	mov	r30, r28
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	ee 0f       	add	r30, r30
     17e:	ff 1f       	adc	r31, r31
     180:	e0 0f       	add	r30, r16
     182:	f1 1f       	adc	r31, r17
     184:	80 81       	ld	r24, Z
     186:	91 81       	ldd	r25, Z+1	; 0x01
     188:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <free>
		i++;
	}
	/*--- Printf ---*/
	if(i != MAX_DATA_ROW)
	{
		for (i = 0; i < MAX_DATA_ROW; i++)
     18c:	cf 5f       	subi	r28, 0xFF	; 255
     18e:	01 c0       	rjmp	.+2      	; 0x192 <app_cli_slip_time_data+0xa8>
     190:	c0 e0       	ldi	r28, 0x00	; 0
     192:	c3 30       	cpi	r28, 0x03	; 3
     194:	88 f3       	brcs	.-30     	; 0x178 <app_cli_slip_time_data+0x8e>
		{
			free(p_data[i]);
		}
		free(p_data);
     196:	c8 01       	movw	r24, r16
     198:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <free>
		return 1;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	28 c0       	rjmp	.+80     	; 0x1f0 <app_cli_slip_time_data+0x106>
	}
	/*--- Assign value ---*/
	rtc->hour = atoi(p_data[0]);
     1a0:	f8 01       	movw	r30, r16
     1a2:	80 81       	ld	r24, Z
     1a4:	91 81       	ldd	r25, Z+1	; 0x01
     1a6:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <atoi>
     1aa:	f6 01       	movw	r30, r12
     1ac:	82 83       	std	Z+2, r24	; 0x02
	rtc->min = atoi(p_data[1]);
     1ae:	f8 01       	movw	r30, r16
     1b0:	82 81       	ldd	r24, Z+2	; 0x02
     1b2:	93 81       	ldd	r25, Z+3	; 0x03
     1b4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <atoi>
     1b8:	f6 01       	movw	r30, r12
     1ba:	81 83       	std	Z+1, r24	; 0x01
	rtc->sec = atoi(p_data[2]);
     1bc:	f8 01       	movw	r30, r16
     1be:	84 81       	ldd	r24, Z+4	; 0x04
     1c0:	95 81       	ldd	r25, Z+5	; 0x05
     1c2:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <atoi>
     1c6:	f6 01       	movw	r30, r12
     1c8:	80 83       	st	Z, r24
	/*--- Free memory ---*/
	for (i = 0; i < MAX_DATA_ROW; i++)
     1ca:	c0 e0       	ldi	r28, 0x00	; 0
     1cc:	0b c0       	rjmp	.+22     	; 0x1e4 <app_cli_slip_time_data+0xfa>
	{
		free(p_data[i]);
     1ce:	ec 2f       	mov	r30, r28
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	ee 0f       	add	r30, r30
     1d4:	ff 1f       	adc	r31, r31
     1d6:	e0 0f       	add	r30, r16
     1d8:	f1 1f       	adc	r31, r17
     1da:	80 81       	ld	r24, Z
     1dc:	91 81       	ldd	r25, Z+1	; 0x01
     1de:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <free>
	/*--- Assign value ---*/
	rtc->hour = atoi(p_data[0]);
	rtc->min = atoi(p_data[1]);
	rtc->sec = atoi(p_data[2]);
	/*--- Free memory ---*/
	for (i = 0; i < MAX_DATA_ROW; i++)
     1e2:	cf 5f       	subi	r28, 0xFF	; 255
     1e4:	c3 30       	cpi	r28, 0x03	; 3
     1e6:	98 f3       	brcs	.-26     	; 0x1ce <app_cli_slip_time_data+0xe4>
	{
		free(p_data[i]);
	}
	free(p_data);
     1e8:	c8 01       	movw	r24, r16
     1ea:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <free>
	return 0;
     1ee:	80 e0       	ldi	r24, 0x00	; 0
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	bf 90       	pop	r11
     202:	08 95       	ret

00000204 <app_cli_set_time>:
	ftr_cli_add_command(&sensor_definition);
	ftr_cli_add_command(&led_definition);
}

static uint8_t app_cli_set_time(uint8_t argc, const char *argv[], char *out_buffer, uint16_t out_max)
{
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	eb 01       	movw	r28, r22
     20e:	04 2f       	mov	r16, r20
     210:	15 2f       	mov	r17, r21
	switch (argv[0][time_definition.CLI_Command_Length])
     212:	e8 81       	ld	r30, Y
     214:	f9 81       	ldd	r31, Y+1	; 0x01
     216:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <time_definition+0x4>
     21a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <time_definition+0x5>
     21e:	df 01       	movw	r26, r30
     220:	a8 0f       	add	r26, r24
     222:	b9 1f       	adc	r27, r25
     224:	2c 91       	ld	r18, X
     226:	2d 33       	cpi	r18, 0x3D	; 61
     228:	79 f0       	breq	.+30     	; 0x248 <app_cli_set_time+0x44>
     22a:	2f 33       	cpi	r18, 0x3F	; 63
     22c:	a9 f1       	breq	.+106    	; 0x298 <app_cli_set_time+0x94>
     22e:	2a 30       	cpi	r18, 0x0A	; 10
     230:	09 f0       	breq	.+2      	; 0x234 <app_cli_set_time+0x30>
     232:	52 c0       	rjmp	.+164    	; 0x2d8 <app_cli_set_time+0xd4>
	{
		case 0x0A:
			sprintf(out_buffer, "=> Nothing to execution\n");
     234:	89 e1       	ldi	r24, 0x19	; 25
     236:	e8 e3       	ldi	r30, 0x38	; 56
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	a4 2f       	mov	r26, r20
     23c:	b5 2f       	mov	r27, r21
     23e:	01 90       	ld	r0, Z+
     240:	0d 92       	st	X+, r0
     242:	8a 95       	dec	r24
     244:	e1 f7       	brne	.-8      	; 0x23e <app_cli_set_time+0x3a>
			break;
     246:	51 c0       	rjmp	.+162    	; 0x2ea <app_cli_set_time+0xe6>
		case '=':
			if(argv[0][time_definition.CLI_Command_Length+1] == '?')
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	e8 0f       	add	r30, r24
     24c:	f9 1f       	adc	r31, r25
     24e:	80 81       	ld	r24, Z
     250:	8f 33       	cpi	r24, 0x3F	; 63
     252:	51 f4       	brne	.+20     	; 0x268 <app_cli_set_time+0x64>
			{
				sprintf(out_buffer, "=> AT+TIME=hour,minute,second\n");
     254:	8f e1       	ldi	r24, 0x1F	; 31
     256:	e1 e5       	ldi	r30, 0x51	; 81
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	a4 2f       	mov	r26, r20
     25c:	b5 2f       	mov	r27, r21
     25e:	01 90       	ld	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	8a 95       	dec	r24
     264:	e1 f7       	brne	.-8      	; 0x25e <app_cli_set_time+0x5a>
     266:	41 c0       	rjmp	.+130    	; 0x2ea <app_cli_set_time+0xe6>
			}
			else
			{	
				ds1307_get_time(&my_rtc);
     268:	8b ed       	ldi	r24, 0xDB	; 219
     26a:	93 e0       	ldi	r25, 0x03	; 3
     26c:	0e 94 3c 08 	call	0x1078	; 0x1078 <ds1307_get_time>
				app_cli_slip_time_data((uint8_t * )argv[0], &my_rtc);
     270:	6b ed       	ldi	r22, 0xDB	; 219
     272:	73 e0       	ldi	r23, 0x03	; 3
     274:	88 81       	ld	r24, Y
     276:	99 81       	ldd	r25, Y+1	; 0x01
     278:	0e 94 75 00 	call	0xea	; 0xea <app_cli_slip_time_data>
				ds1307_set_time(&my_rtc);
     27c:	8b ed       	ldi	r24, 0xDB	; 219
     27e:	93 e0       	ldi	r25, 0x03	; 3
     280:	0e 94 00 08 	call	0x1000	; 0x1000 <ds1307_set_time>
				sprintf(out_buffer, "=> OK\n");
     284:	87 e0       	ldi	r24, 0x07	; 7
     286:	e0 e7       	ldi	r30, 0x70	; 112
     288:	f1 e0       	ldi	r31, 0x01	; 1
     28a:	a0 2f       	mov	r26, r16
     28c:	b1 2f       	mov	r27, r17
     28e:	01 90       	ld	r0, Z+
     290:	0d 92       	st	X+, r0
     292:	8a 95       	dec	r24
     294:	e1 f7       	brne	.-8      	; 0x28e <app_cli_set_time+0x8a>
     296:	29 c0       	rjmp	.+82     	; 0x2ea <app_cli_set_time+0xe6>
			}
			break;
		case '?':
			ds1307_get_time(&my_rtc);
     298:	8b ed       	ldi	r24, 0xDB	; 219
     29a:	93 e0       	ldi	r25, 0x03	; 3
     29c:	0e 94 3c 08 	call	0x1078	; 0x1078 <ds1307_get_time>
			sprintf(out_buffer,"=> %d:%d:%d\n", my_rtc.hour,my_rtc.min,my_rtc.sec);
     2a0:	eb ed       	ldi	r30, 0xDB	; 219
     2a2:	f3 e0       	ldi	r31, 0x03	; 3
     2a4:	20 81       	ld	r18, Z
     2a6:	91 81       	ldd	r25, Z+1	; 0x01
     2a8:	82 81       	ldd	r24, Z+2	; 0x02
     2aa:	1f 92       	push	r1
     2ac:	2f 93       	push	r18
     2ae:	1f 92       	push	r1
     2b0:	9f 93       	push	r25
     2b2:	1f 92       	push	r1
     2b4:	8f 93       	push	r24
     2b6:	87 e7       	ldi	r24, 0x77	; 119
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	9f 93       	push	r25
     2bc:	8f 93       	push	r24
     2be:	1f 93       	push	r17
     2c0:	0f 93       	push	r16
     2c2:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
			break;
     2c6:	8d b7       	in	r24, 0x3d	; 61
     2c8:	9e b7       	in	r25, 0x3e	; 62
     2ca:	0a 96       	adiw	r24, 0x0a	; 10
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	9e bf       	out	0x3e, r25	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	8d bf       	out	0x3d, r24	; 61
     2d6:	09 c0       	rjmp	.+18     	; 0x2ea <app_cli_set_time+0xe6>
		default:
			sprintf(out_buffer, "=> Error format\n");
     2d8:	81 e1       	ldi	r24, 0x11	; 17
     2da:	e4 e8       	ldi	r30, 0x84	; 132
     2dc:	f1 e0       	ldi	r31, 0x01	; 1
     2de:	a4 2f       	mov	r26, r20
     2e0:	b5 2f       	mov	r27, r21
     2e2:	01 90       	ld	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	8a 95       	dec	r24
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <app_cli_set_time+0xde>
			break;
	}
	return 0;
}
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <app_cli_slip_date_data>:
	free(p_data);
	return 0;
}

static uint8_t app_cli_slip_date_data(uint8_t * data_in, rtc_t * rtc)
{
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	7c 01       	movw	r14, r24
     30a:	6b 01       	movw	r12, r22
	uint8_t i;
	char ** p_data;
	char* p_token;
	/*--- memory allocation ---*/
	p_data = (char **)malloc(MAX_DATA_ROW * sizeof(char *));
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <malloc>
     314:	8c 01       	movw	r16, r24
	for (i = 0; i < MAX_DATA_ROW; i++)
     316:	b1 2c       	mov	r11, r1
     318:	0d c0       	rjmp	.+26     	; 0x334 <app_cli_slip_date_data+0x3e>
	{
		p_data[i] = (char *)malloc(MAX_DATA_COL * sizeof(char));
     31a:	cb 2d       	mov	r28, r11
     31c:	d0 e0       	ldi	r29, 0x00	; 0
     31e:	cc 0f       	add	r28, r28
     320:	dd 1f       	adc	r29, r29
     322:	c0 0f       	add	r28, r16
     324:	d1 1f       	adc	r29, r17
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <malloc>
     32e:	99 83       	std	Y+1, r25	; 0x01
     330:	88 83       	st	Y, r24
	uint8_t i;
	char ** p_data;
	char* p_token;
	/*--- memory allocation ---*/
	p_data = (char **)malloc(MAX_DATA_ROW * sizeof(char *));
	for (i = 0; i < MAX_DATA_ROW; i++)
     332:	b3 94       	inc	r11
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	8b 15       	cp	r24, r11
     338:	80 f7       	brcc	.-32     	; 0x31a <app_cli_slip_date_data+0x24>
	{
		p_data[i] = (char *)malloc(MAX_DATA_COL * sizeof(char));
	}
	/*--------Splip data--------*/
	i = 0;
	p_token = strtok(strstr((char *)data_in, "="), ",");
     33a:	6d e3       	ldi	r22, 0x3D	; 61
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	c7 01       	movw	r24, r14
     340:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <strchr>
     344:	66 e3       	ldi	r22, 0x36	; 54
     346:	71 e0       	ldi	r23, 0x01	; 1
     348:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <strtok>
	p_token++;
     34c:	01 96       	adiw	r24, 0x01	; 1
	for (i = 0; i < MAX_DATA_ROW; i++)
	{
		p_data[i] = (char *)malloc(MAX_DATA_COL * sizeof(char));
	}
	/*--------Splip data--------*/
	i = 0;
     34e:	c0 e0       	ldi	r28, 0x00	; 0
	p_token = strtok(strstr((char *)data_in, "="), ",");
	p_token++;
	while (i < MAX_DATA_ROW && p_token != NULL)
     350:	12 c0       	rjmp	.+36     	; 0x376 <app_cli_slip_date_data+0x80>
	{
		strcpy(p_data[i], p_token);
     352:	ec 2f       	mov	r30, r28
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	e0 0f       	add	r30, r16
     35c:	f1 1f       	adc	r31, r17
     35e:	bc 01       	movw	r22, r24
     360:	80 81       	ld	r24, Z
     362:	91 81       	ldd	r25, Z+1	; 0x01
     364:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <strcpy>
		p_token = strtok(NULL, ",");
     368:	66 e3       	ldi	r22, 0x36	; 54
     36a:	71 e0       	ldi	r23, 0x01	; 1
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <strtok>
		i++;
     374:	cf 5f       	subi	r28, 0xFF	; 255
	}
	/*--------Splip data--------*/
	i = 0;
	p_token = strtok(strstr((char *)data_in, "="), ",");
	p_token++;
	while (i < MAX_DATA_ROW && p_token != NULL)
     376:	c3 30       	cpi	r28, 0x03	; 3
     378:	10 f4       	brcc	.+4      	; 0x37e <app_cli_slip_date_data+0x88>
     37a:	00 97       	sbiw	r24, 0x00	; 0
     37c:	51 f7       	brne	.-44     	; 0x352 <app_cli_slip_date_data+0x5c>
		strcpy(p_data[i], p_token);
		p_token = strtok(NULL, ",");
		i++;
	}
	/*--- Printf ---*/
	if(i != MAX_DATA_ROW)
     37e:	c3 30       	cpi	r28, 0x03	; 3
     380:	69 f4       	brne	.+26     	; 0x39c <app_cli_slip_date_data+0xa6>
     382:	14 c0       	rjmp	.+40     	; 0x3ac <app_cli_slip_date_data+0xb6>
	{
		for (i = 0; i < MAX_DATA_ROW; i++)
		{
			free(p_data[i]);
     384:	ec 2f       	mov	r30, r28
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	e0 0f       	add	r30, r16
     38e:	f1 1f       	adc	r31, r17
     390:	80 81       	ld	r24, Z
     392:	91 81       	ldd	r25, Z+1	; 0x01
     394:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <free>
		i++;
	}
	/*--- Printf ---*/
	if(i != MAX_DATA_ROW)
	{
		for (i = 0; i < MAX_DATA_ROW; i++)
     398:	cf 5f       	subi	r28, 0xFF	; 255
     39a:	01 c0       	rjmp	.+2      	; 0x39e <app_cli_slip_date_data+0xa8>
     39c:	c0 e0       	ldi	r28, 0x00	; 0
     39e:	c3 30       	cpi	r28, 0x03	; 3
     3a0:	88 f3       	brcs	.-30     	; 0x384 <app_cli_slip_date_data+0x8e>
		{
			free(p_data[i]);
		}
		free(p_data);
     3a2:	c8 01       	movw	r24, r16
     3a4:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <free>
		return 1;
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	28 c0       	rjmp	.+80     	; 0x3fc <app_cli_slip_date_data+0x106>
	}
	/*--- Assign value ---*/
	rtc->date = atoi(p_data[0]);
     3ac:	f8 01       	movw	r30, r16
     3ae:	80 81       	ld	r24, Z
     3b0:	91 81       	ldd	r25, Z+1	; 0x01
     3b2:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <atoi>
     3b6:	f6 01       	movw	r30, r12
     3b8:	84 83       	std	Z+4, r24	; 0x04
	rtc->month = atoi(p_data[1]);
     3ba:	f8 01       	movw	r30, r16
     3bc:	82 81       	ldd	r24, Z+2	; 0x02
     3be:	93 81       	ldd	r25, Z+3	; 0x03
     3c0:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <atoi>
     3c4:	f6 01       	movw	r30, r12
     3c6:	85 83       	std	Z+5, r24	; 0x05
	rtc->year = atoi(p_data[2]);
     3c8:	f8 01       	movw	r30, r16
     3ca:	84 81       	ldd	r24, Z+4	; 0x04
     3cc:	95 81       	ldd	r25, Z+5	; 0x05
     3ce:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <atoi>
     3d2:	f6 01       	movw	r30, r12
     3d4:	86 83       	std	Z+6, r24	; 0x06
	/*--- Free memory ---*/
	for (i = 0; i < MAX_DATA_ROW; i++)
     3d6:	c0 e0       	ldi	r28, 0x00	; 0
     3d8:	0b c0       	rjmp	.+22     	; 0x3f0 <app_cli_slip_date_data+0xfa>
	{
		free(p_data[i]);
     3da:	ec 2f       	mov	r30, r28
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	e0 0f       	add	r30, r16
     3e4:	f1 1f       	adc	r31, r17
     3e6:	80 81       	ld	r24, Z
     3e8:	91 81       	ldd	r25, Z+1	; 0x01
     3ea:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <free>
	/*--- Assign value ---*/
	rtc->date = atoi(p_data[0]);
	rtc->month = atoi(p_data[1]);
	rtc->year = atoi(p_data[2]);
	/*--- Free memory ---*/
	for (i = 0; i < MAX_DATA_ROW; i++)
     3ee:	cf 5f       	subi	r28, 0xFF	; 255
     3f0:	c3 30       	cpi	r28, 0x03	; 3
     3f2:	98 f3       	brcs	.-26     	; 0x3da <app_cli_slip_date_data+0xe4>
	{
		free(p_data[i]);
	}
	free(p_data);
     3f4:	c8 01       	movw	r24, r16
     3f6:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <free>
	return 0;
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	bf 90       	pop	r11
     40e:	08 95       	ret

00000410 <app_cli_set_date>:
			break;
	}
	return 0;
}
static uint8_t app_cli_set_date(uint8_t argc, const char *argv[], char *out_buffer, uint16_t out_max)
{
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	eb 01       	movw	r28, r22
     41a:	04 2f       	mov	r16, r20
     41c:	15 2f       	mov	r17, r21
	switch (argv[0][date_definition.CLI_Command_Length])
     41e:	28 81       	ld	r18, Y
     420:	39 81       	ldd	r19, Y+1	; 0x01
     422:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <date_definition+0x4>
     426:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <date_definition+0x5>
     42a:	e2 0f       	add	r30, r18
     42c:	f3 1f       	adc	r31, r19
     42e:	80 81       	ld	r24, Z
     430:	8d 33       	cpi	r24, 0x3D	; 61
     432:	79 f0       	breq	.+30     	; 0x452 <app_cli_set_date+0x42>
     434:	8f 33       	cpi	r24, 0x3F	; 63
     436:	d1 f1       	breq	.+116    	; 0x4ac <app_cli_set_date+0x9c>
     438:	8a 30       	cpi	r24, 0x0A	; 10
     43a:	09 f0       	breq	.+2      	; 0x43e <app_cli_set_date+0x2e>
     43c:	57 c0       	rjmp	.+174    	; 0x4ec <app_cli_set_date+0xdc>
	{
		case 0x0A:
		sprintf(out_buffer, "=> Nothing to execution\n");
     43e:	89 e1       	ldi	r24, 0x19	; 25
     440:	e8 e3       	ldi	r30, 0x38	; 56
     442:	f1 e0       	ldi	r31, 0x01	; 1
     444:	a4 2f       	mov	r26, r20
     446:	b5 2f       	mov	r27, r21
     448:	01 90       	ld	r0, Z+
     44a:	0d 92       	st	X+, r0
     44c:	8a 95       	dec	r24
     44e:	e1 f7       	brne	.-8      	; 0x448 <app_cli_set_date+0x38>
		break;
     450:	56 c0       	rjmp	.+172    	; 0x4fe <app_cli_set_date+0xee>
		case '=':
		if(argv[0][time_definition.CLI_Command_Length+1] == '?')
     452:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <time_definition+0x4>
     456:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <time_definition+0x5>
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	f9 01       	movw	r30, r18
     45e:	e8 0f       	add	r30, r24
     460:	f9 1f       	adc	r31, r25
     462:	80 81       	ld	r24, Z
     464:	8f 33       	cpi	r24, 0x3F	; 63
     466:	51 f4       	brne	.+20     	; 0x47c <app_cli_set_date+0x6c>
		{
			sprintf(out_buffer, "=> AT+DATE=date,month,year\n");
     468:	8c e1       	ldi	r24, 0x1C	; 28
     46a:	e5 e9       	ldi	r30, 0x95	; 149
     46c:	f1 e0       	ldi	r31, 0x01	; 1
     46e:	a4 2f       	mov	r26, r20
     470:	b5 2f       	mov	r27, r21
     472:	01 90       	ld	r0, Z+
     474:	0d 92       	st	X+, r0
     476:	8a 95       	dec	r24
     478:	e1 f7       	brne	.-8      	; 0x472 <app_cli_set_date+0x62>
     47a:	41 c0       	rjmp	.+130    	; 0x4fe <app_cli_set_date+0xee>
		}
		else
		{
			ds1307_get_time(&my_rtc);
     47c:	8b ed       	ldi	r24, 0xDB	; 219
     47e:	93 e0       	ldi	r25, 0x03	; 3
     480:	0e 94 3c 08 	call	0x1078	; 0x1078 <ds1307_get_time>
			app_cli_slip_date_data((uint8_t * )argv[0], &my_rtc);
     484:	6b ed       	ldi	r22, 0xDB	; 219
     486:	73 e0       	ldi	r23, 0x03	; 3
     488:	88 81       	ld	r24, Y
     48a:	99 81       	ldd	r25, Y+1	; 0x01
     48c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <app_cli_slip_date_data>
			ds1307_set_time(&my_rtc);
     490:	8b ed       	ldi	r24, 0xDB	; 219
     492:	93 e0       	ldi	r25, 0x03	; 3
     494:	0e 94 00 08 	call	0x1000	; 0x1000 <ds1307_set_time>
			sprintf(out_buffer, "=> OK\n");
     498:	87 e0       	ldi	r24, 0x07	; 7
     49a:	e0 e7       	ldi	r30, 0x70	; 112
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	a0 2f       	mov	r26, r16
     4a0:	b1 2f       	mov	r27, r17
     4a2:	01 90       	ld	r0, Z+
     4a4:	0d 92       	st	X+, r0
     4a6:	8a 95       	dec	r24
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <app_cli_set_date+0x92>
     4aa:	29 c0       	rjmp	.+82     	; 0x4fe <app_cli_set_date+0xee>
		}
		break;
		case '?':
		ds1307_get_time(&my_rtc);
     4ac:	8b ed       	ldi	r24, 0xDB	; 219
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	0e 94 3c 08 	call	0x1078	; 0x1078 <ds1307_get_time>
		sprintf(out_buffer,"=> %d/%d/%d\n", my_rtc.date,my_rtc.month,my_rtc.year);
     4b4:	eb ed       	ldi	r30, 0xDB	; 219
     4b6:	f3 e0       	ldi	r31, 0x03	; 3
     4b8:	26 81       	ldd	r18, Z+6	; 0x06
     4ba:	95 81       	ldd	r25, Z+5	; 0x05
     4bc:	84 81       	ldd	r24, Z+4	; 0x04
     4be:	1f 92       	push	r1
     4c0:	2f 93       	push	r18
     4c2:	1f 92       	push	r1
     4c4:	9f 93       	push	r25
     4c6:	1f 92       	push	r1
     4c8:	8f 93       	push	r24
     4ca:	81 eb       	ldi	r24, 0xB1	; 177
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	9f 93       	push	r25
     4d0:	8f 93       	push	r24
     4d2:	1f 93       	push	r17
     4d4:	0f 93       	push	r16
     4d6:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
		break;
     4da:	8d b7       	in	r24, 0x3d	; 61
     4dc:	9e b7       	in	r25, 0x3e	; 62
     4de:	0a 96       	adiw	r24, 0x0a	; 10
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	9e bf       	out	0x3e, r25	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	8d bf       	out	0x3d, r24	; 61
     4ea:	09 c0       	rjmp	.+18     	; 0x4fe <app_cli_set_date+0xee>
		default:
		sprintf(out_buffer,"=> Error format\n");
     4ec:	81 e1       	ldi	r24, 0x11	; 17
     4ee:	e4 e8       	ldi	r30, 0x84	; 132
     4f0:	f1 e0       	ldi	r31, 0x01	; 1
     4f2:	a4 2f       	mov	r26, r20
     4f4:	b5 2f       	mov	r27, r21
     4f6:	01 90       	ld	r0, Z+
     4f8:	0d 92       	st	X+, r0
     4fa:	8a 95       	dec	r24
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <app_cli_set_date+0xe6>
		break;
	}
	return 0;
}
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	08 95       	ret

0000050a <app_cli_led>:
	}
	return 0;
}

static uint8_t app_cli_led(uint8_t argc, const char *argv[], char *out_buffer, uint16_t out_max)
{
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
	switch (argv[0][led_definition.CLI_Command_Length])
     516:	fb 01       	movw	r30, r22
     518:	c0 81       	ld	r28, Z
     51a:	d1 81       	ldd	r29, Z+1	; 0x01
     51c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <led_definition+0x4>
     520:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <led_definition+0x5>
     524:	fe 01       	movw	r30, r28
     526:	e8 0f       	add	r30, r24
     528:	f9 1f       	adc	r31, r25
     52a:	20 81       	ld	r18, Z
     52c:	2d 33       	cpi	r18, 0x3D	; 61
     52e:	79 f0       	breq	.+30     	; 0x54e <app_cli_led+0x44>
     530:	2f 33       	cpi	r18, 0x3F	; 63
     532:	09 f4       	brne	.+2      	; 0x536 <app_cli_led+0x2c>
     534:	86 c0       	rjmp	.+268    	; 0x642 <app_cli_led+0x138>
     536:	2a 30       	cpi	r18, 0x0A	; 10
     538:	09 f0       	breq	.+2      	; 0x53c <app_cli_led+0x32>
     53a:	8c c0       	rjmp	.+280    	; 0x654 <app_cli_led+0x14a>
	{
		case 0x0A:
		sprintf(out_buffer, "=> Nothing to execution\n");
     53c:	89 e1       	ldi	r24, 0x19	; 25
     53e:	e8 e3       	ldi	r30, 0x38	; 56
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	da 01       	movw	r26, r20
     544:	01 90       	ld	r0, Z+
     546:	0d 92       	st	X+, r0
     548:	8a 95       	dec	r24
     54a:	e1 f7       	brne	.-8      	; 0x544 <app_cli_led+0x3a>
		break;
     54c:	8b c0       	rjmp	.+278    	; 0x664 <app_cli_led+0x15a>
		case '=':
		if(argv[0][led_definition.CLI_Command_Length+1] == '?')
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	fe 01       	movw	r30, r28
     552:	e8 0f       	add	r30, r24
     554:	f9 1f       	adc	r31, r25
     556:	80 81       	ld	r24, Z
     558:	8f 33       	cpi	r24, 0x3F	; 63
     55a:	49 f4       	brne	.+18     	; 0x56e <app_cli_led+0x64>
		{
			sprintf(out_buffer, "=> AT+LED=led name,status\n");
     55c:	8b e1       	ldi	r24, 0x1B	; 27
     55e:	ee eb       	ldi	r30, 0xBE	; 190
     560:	f1 e0       	ldi	r31, 0x01	; 1
     562:	da 01       	movw	r26, r20
     564:	01 90       	ld	r0, Z+
     566:	0d 92       	st	X+, r0
     568:	8a 95       	dec	r24
     56a:	e1 f7       	brne	.-8      	; 0x564 <app_cli_led+0x5a>
     56c:	7b c0       	rjmp	.+246    	; 0x664 <app_cli_led+0x15a>
     56e:	7a 01       	movw	r14, r20
		}
		else
		{
			if(strstr(argv[0], "led1") && strstr(argv[0], "on"))
     570:	69 ed       	ldi	r22, 0xD9	; 217
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	ce 01       	movw	r24, r28
     576:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <strstr>
     57a:	8c 01       	movw	r16, r24
     57c:	89 2b       	or	r24, r25
     57e:	99 f0       	breq	.+38     	; 0x5a6 <app_cli_led+0x9c>
     580:	6e ed       	ldi	r22, 0xDE	; 222
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	ce 01       	movw	r24, r28
     586:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <strstr>
     58a:	89 2b       	or	r24, r25
     58c:	61 f0       	breq	.+24     	; 0x5a6 <app_cli_led+0x9c>
			{
				cbi(PORTB, 0);
     58e:	85 b1       	in	r24, 0x05	; 5
     590:	8e 7f       	andi	r24, 0xFE	; 254
     592:	85 b9       	out	0x05, r24	; 5
				sprintf(out_buffer, "=> OK\n");
     594:	87 e0       	ldi	r24, 0x07	; 7
     596:	e0 e7       	ldi	r30, 0x70	; 112
     598:	f1 e0       	ldi	r31, 0x01	; 1
     59a:	d7 01       	movw	r26, r14
     59c:	01 90       	ld	r0, Z+
     59e:	0d 92       	st	X+, r0
     5a0:	8a 95       	dec	r24
     5a2:	e1 f7       	brne	.-8      	; 0x59c <app_cli_led+0x92>
     5a4:	5f c0       	rjmp	.+190    	; 0x664 <app_cli_led+0x15a>
			}
			else if(strstr(argv[0], "led1") && strstr(argv[0], "off"))
     5a6:	01 2b       	or	r16, r17
     5a8:	99 f0       	breq	.+38     	; 0x5d0 <app_cli_led+0xc6>
     5aa:	61 ee       	ldi	r22, 0xE1	; 225
     5ac:	71 e0       	ldi	r23, 0x01	; 1
     5ae:	ce 01       	movw	r24, r28
     5b0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <strstr>
     5b4:	89 2b       	or	r24, r25
     5b6:	61 f0       	breq	.+24     	; 0x5d0 <app_cli_led+0xc6>
			{
				sbi(PORTB, 0);
     5b8:	85 b1       	in	r24, 0x05	; 5
     5ba:	81 60       	ori	r24, 0x01	; 1
     5bc:	85 b9       	out	0x05, r24	; 5
				sprintf(out_buffer, "=> OK\n");
     5be:	87 e0       	ldi	r24, 0x07	; 7
     5c0:	e0 e7       	ldi	r30, 0x70	; 112
     5c2:	f1 e0       	ldi	r31, 0x01	; 1
     5c4:	d7 01       	movw	r26, r14
     5c6:	01 90       	ld	r0, Z+
     5c8:	0d 92       	st	X+, r0
     5ca:	8a 95       	dec	r24
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <app_cli_led+0xbc>
     5ce:	4a c0       	rjmp	.+148    	; 0x664 <app_cli_led+0x15a>
			}
			else if(strstr(argv[0], "led2") && strstr(argv[0], "on"))
     5d0:	65 ee       	ldi	r22, 0xE5	; 229
     5d2:	71 e0       	ldi	r23, 0x01	; 1
     5d4:	ce 01       	movw	r24, r28
     5d6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <strstr>
     5da:	8c 01       	movw	r16, r24
     5dc:	89 2b       	or	r24, r25
     5de:	99 f0       	breq	.+38     	; 0x606 <app_cli_led+0xfc>
     5e0:	6e ed       	ldi	r22, 0xDE	; 222
     5e2:	71 e0       	ldi	r23, 0x01	; 1
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <strstr>
     5ea:	89 2b       	or	r24, r25
     5ec:	61 f0       	breq	.+24     	; 0x606 <app_cli_led+0xfc>
			{
				cbi(PORTB, 1);
     5ee:	85 b1       	in	r24, 0x05	; 5
     5f0:	8d 7f       	andi	r24, 0xFD	; 253
     5f2:	85 b9       	out	0x05, r24	; 5
				sprintf(out_buffer, "=> OK\n");
     5f4:	87 e0       	ldi	r24, 0x07	; 7
     5f6:	e0 e7       	ldi	r30, 0x70	; 112
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	d7 01       	movw	r26, r14
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	8a 95       	dec	r24
     602:	e1 f7       	brne	.-8      	; 0x5fc <app_cli_led+0xf2>
     604:	2f c0       	rjmp	.+94     	; 0x664 <app_cli_led+0x15a>
			}
			else if(strstr(argv[0], "led2") && strstr(argv[0], "off"))
     606:	01 2b       	or	r16, r17
     608:	99 f0       	breq	.+38     	; 0x630 <app_cli_led+0x126>
     60a:	61 ee       	ldi	r22, 0xE1	; 225
     60c:	71 e0       	ldi	r23, 0x01	; 1
     60e:	ce 01       	movw	r24, r28
     610:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <strstr>
     614:	89 2b       	or	r24, r25
     616:	61 f0       	breq	.+24     	; 0x630 <app_cli_led+0x126>
			{
				sbi(PORTB, 1);
     618:	85 b1       	in	r24, 0x05	; 5
     61a:	82 60       	ori	r24, 0x02	; 2
     61c:	85 b9       	out	0x05, r24	; 5
				sprintf(out_buffer, "=> OK\n");
     61e:	87 e0       	ldi	r24, 0x07	; 7
     620:	e0 e7       	ldi	r30, 0x70	; 112
     622:	f1 e0       	ldi	r31, 0x01	; 1
     624:	d7 01       	movw	r26, r14
     626:	01 90       	ld	r0, Z+
     628:	0d 92       	st	X+, r0
     62a:	8a 95       	dec	r24
     62c:	e1 f7       	brne	.-8      	; 0x626 <app_cli_led+0x11c>
     62e:	1a c0       	rjmp	.+52     	; 0x664 <app_cli_led+0x15a>
			}
			else
			{
				sprintf(out_buffer, "=> Wrong parameter\n");
     630:	84 e1       	ldi	r24, 0x14	; 20
     632:	ea ee       	ldi	r30, 0xEA	; 234
     634:	f1 e0       	ldi	r31, 0x01	; 1
     636:	d7 01       	movw	r26, r14
     638:	01 90       	ld	r0, Z+
     63a:	0d 92       	st	X+, r0
     63c:	8a 95       	dec	r24
     63e:	e1 f7       	brne	.-8      	; 0x638 <app_cli_led+0x12e>
     640:	11 c0       	rjmp	.+34     	; 0x664 <app_cli_led+0x15a>
			}
		}
		break;
		case '?':
			sprintf(out_buffer, "=> AT+LED=led name,status\n");
     642:	8b e1       	ldi	r24, 0x1B	; 27
     644:	ee eb       	ldi	r30, 0xBE	; 190
     646:	f1 e0       	ldi	r31, 0x01	; 1
     648:	da 01       	movw	r26, r20
     64a:	01 90       	ld	r0, Z+
     64c:	0d 92       	st	X+, r0
     64e:	8a 95       	dec	r24
     650:	e1 f7       	brne	.-8      	; 0x64a <app_cli_led+0x140>
			break;
     652:	08 c0       	rjmp	.+16     	; 0x664 <app_cli_led+0x15a>
		default:
			sprintf(out_buffer,"=> Error format\n");
     654:	81 e1       	ldi	r24, 0x11	; 17
     656:	e4 e8       	ldi	r30, 0x84	; 132
     658:	f1 e0       	ldi	r31, 0x01	; 1
     65a:	da 01       	movw	r26, r20
     65c:	01 90       	ld	r0, Z+
     65e:	0d 92       	st	X+, r0
     660:	8a 95       	dec	r24
     662:	e1 f7       	brne	.-8      	; 0x65c <app_cli_led+0x152>
		break;
	}
	return 0;
}
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	08 95       	ret

00000674 <app_cli_sensor>:
	}
	return 0;
}

static uint8_t app_cli_sensor(uint8_t argc, const char *argv[], char *out_buffer, uint16_t out_max)
{
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
	switch (argv[0][sensor_definition.CLI_Command_Length])
     67c:	fb 01       	movw	r30, r22
     67e:	c0 81       	ld	r28, Z
     680:	d1 81       	ldd	r29, Z+1	; 0x01
     682:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <sensor_definition+0x4>
     686:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <sensor_definition+0x5>
     68a:	fe 01       	movw	r30, r28
     68c:	e2 0f       	add	r30, r18
     68e:	f3 1f       	adc	r31, r19
     690:	90 81       	ld	r25, Z
     692:	9d 33       	cpi	r25, 0x3D	; 61
     694:	81 f0       	breq	.+32     	; 0x6b6 <app_cli_sensor+0x42>
     696:	9f 33       	cpi	r25, 0x3F	; 63
     698:	09 f4       	brne	.+2      	; 0x69c <app_cli_sensor+0x28>
     69a:	45 c0       	rjmp	.+138    	; 0x726 <app_cli_sensor+0xb2>
     69c:	9a 30       	cpi	r25, 0x0A	; 10
     69e:	09 f0       	breq	.+2      	; 0x6a2 <app_cli_sensor+0x2e>
     6a0:	4c c0       	rjmp	.+152    	; 0x73a <app_cli_sensor+0xc6>
	{
		case 0x0A:
			sprintf(out_buffer, "=> Nothing to execution\n");
     6a2:	89 e1       	ldi	r24, 0x19	; 25
     6a4:	e8 e3       	ldi	r30, 0x38	; 56
     6a6:	f1 e0       	ldi	r31, 0x01	; 1
     6a8:	a4 2f       	mov	r26, r20
     6aa:	b5 2f       	mov	r27, r21
     6ac:	01 90       	ld	r0, Z+
     6ae:	0d 92       	st	X+, r0
     6b0:	8a 95       	dec	r24
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <app_cli_sensor+0x38>
			break;
     6b4:	4b c0       	rjmp	.+150    	; 0x74c <app_cli_sensor+0xd8>
		case '=':
			if(argv[0][sensor_definition.CLI_Command_Length+1] == '?')
     6b6:	2f 5f       	subi	r18, 0xFF	; 255
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	fe 01       	movw	r30, r28
     6bc:	e2 0f       	add	r30, r18
     6be:	f3 1f       	adc	r31, r19
     6c0:	80 81       	ld	r24, Z
     6c2:	8f 33       	cpi	r24, 0x3F	; 63
     6c4:	51 f4       	brne	.+20     	; 0x6da <app_cli_sensor+0x66>
			{
				sprintf(out_buffer, "=> AT+SENSOR=sensor name\n");
     6c6:	8a e1       	ldi	r24, 0x1A	; 26
     6c8:	ee ef       	ldi	r30, 0xFE	; 254
     6ca:	f1 e0       	ldi	r31, 0x01	; 1
     6cc:	a4 2f       	mov	r26, r20
     6ce:	b5 2f       	mov	r27, r21
     6d0:	01 90       	ld	r0, Z+
     6d2:	0d 92       	st	X+, r0
     6d4:	8a 95       	dec	r24
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <app_cli_sensor+0x5c>
     6d8:	39 c0       	rjmp	.+114    	; 0x74c <app_cli_sensor+0xd8>
     6da:	15 2f       	mov	r17, r21
     6dc:	04 2f       	mov	r16, r20
			}
			else
			{
				if(strstr(argv[0], "temp"))
     6de:	68 e1       	ldi	r22, 0x18	; 24
     6e0:	72 e0       	ldi	r23, 0x02	; 2
     6e2:	ce 01       	movw	r24, r28
     6e4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <strstr>
     6e8:	89 2b       	or	r24, r25
     6ea:	99 f0       	breq	.+38     	; 0x712 <app_cli_sensor+0x9e>
				{
					sprintf(out_buffer, "=> temp = %d oC\n", ftr_sensor_get_temperature());
     6ec:	0e 94 99 06 	call	0xd32	; 0xd32 <ftr_sensor_get_temperature>
     6f0:	1f 92       	push	r1
     6f2:	8f 93       	push	r24
     6f4:	8d e1       	ldi	r24, 0x1D	; 29
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	9f 93       	push	r25
     6fa:	8f 93       	push	r24
     6fc:	1f 93       	push	r17
     6fe:	0f 93       	push	r16
     700:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	1d c0       	rjmp	.+58     	; 0x74c <app_cli_sensor+0xd8>
				}
				else
				{
					sprintf(out_buffer, "=> Wrong parameter\n");
     712:	84 e1       	ldi	r24, 0x14	; 20
     714:	ea ee       	ldi	r30, 0xEA	; 234
     716:	f1 e0       	ldi	r31, 0x01	; 1
     718:	a0 2f       	mov	r26, r16
     71a:	b1 2f       	mov	r27, r17
     71c:	01 90       	ld	r0, Z+
     71e:	0d 92       	st	X+, r0
     720:	8a 95       	dec	r24
     722:	e1 f7       	brne	.-8      	; 0x71c <app_cli_sensor+0xa8>
     724:	13 c0       	rjmp	.+38     	; 0x74c <app_cli_sensor+0xd8>
				}
			}
			break;
		case '?':
			sprintf(out_buffer, "=> AT+SENSOR=sensor_name\n");
     726:	8a e1       	ldi	r24, 0x1A	; 26
     728:	ee e2       	ldi	r30, 0x2E	; 46
     72a:	f2 e0       	ldi	r31, 0x02	; 2
     72c:	a4 2f       	mov	r26, r20
     72e:	b5 2f       	mov	r27, r21
     730:	01 90       	ld	r0, Z+
     732:	0d 92       	st	X+, r0
     734:	8a 95       	dec	r24
     736:	e1 f7       	brne	.-8      	; 0x730 <app_cli_sensor+0xbc>
			break;
     738:	09 c0       	rjmp	.+18     	; 0x74c <app_cli_sensor+0xd8>
		default:
			sprintf(out_buffer,"=> Error format\n");
     73a:	81 e1       	ldi	r24, 0x11	; 17
     73c:	e4 e8       	ldi	r30, 0x84	; 132
     73e:	f1 e0       	ldi	r31, 0x01	; 1
     740:	a4 2f       	mov	r26, r20
     742:	b5 2f       	mov	r27, r21
     744:	01 90       	ld	r0, Z+
     746:	0d 92       	st	X+, r0
     748:	8a 95       	dec	r24
     74a:	e1 f7       	brne	.-8      	; 0x744 <app_cli_sensor+0xd0>
			break;
	}
	return 0;
}
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	08 95       	ret

00000758 <app_cli_init>:
	.CLI_Callback = app_cli_led,
};

void app_cli_init(void)
{
	ftr_cli_add_command(&time_definition);
     758:	8e e1       	ldi	r24, 0x1E	; 30
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <ftr_cli_add_command>
	ftr_cli_add_command(&date_definition);
     760:	86 e1       	ldi	r24, 0x16	; 22
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <ftr_cli_add_command>
	ftr_cli_add_command(&sensor_definition);
     768:	8e e0       	ldi	r24, 0x0E	; 14
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <ftr_cli_add_command>
	ftr_cli_add_command(&led_definition);
     770:	86 e0       	ldi	r24, 0x06	; 6
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <ftr_cli_add_command>
     778:	08 95       	ret

0000077a <app_display_init>:
void app_display_task(void * pv_param);
void app_display_lcd(rtc_t *rtc);

void app_display_init(void)
{
	task_add(TASK_REPEATED, TIMEOUT_APP_DISPLAY, app_display_task);
     77a:	45 e9       	ldi	r20, 0x95	; 149
     77c:	54 e0       	ldi	r21, 0x04	; 4
     77e:	68 ee       	ldi	r22, 0xE8	; 232
     780:	73 e0       	ldi	r23, 0x03	; 3
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 03 0b 	call	0x1606	; 0x1606 <task_add>
     788:	08 95       	ret

0000078a <app_display_lcd>:
{
	ds1307_get_time(&my_rtc);
	app_display_lcd(&my_rtc);
}
void app_display_lcd(rtc_t *rtc)
{
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	8c 01       	movw	r16, r24
	Lcd_Set_Cursor(1,4);
     792:	64 e0       	ldi	r22, 0x04	; 4
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	0e 94 31 09 	call	0x1262	; 0x1262 <Lcd_Set_Cursor>
	Lcd_Write_Char(rtc->hour/10+48);
     79a:	f8 01       	movw	r30, r16
     79c:	82 81       	ldd	r24, Z+2	; 0x02
     79e:	cd ec       	ldi	r28, 0xCD	; 205
     7a0:	8c 9f       	mul	r24, r28
     7a2:	81 2d       	mov	r24, r1
     7a4:	11 24       	eor	r1, r1
     7a6:	86 95       	lsr	r24
     7a8:	86 95       	lsr	r24
     7aa:	86 95       	lsr	r24
     7ac:	80 5d       	subi	r24, 0xD0	; 208
     7ae:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(rtc->hour%10+48);
     7b2:	f8 01       	movw	r30, r16
     7b4:	82 81       	ldd	r24, Z+2	; 0x02
     7b6:	8c 9f       	mul	r24, r28
     7b8:	91 2d       	mov	r25, r1
     7ba:	11 24       	eor	r1, r1
     7bc:	96 95       	lsr	r25
     7be:	96 95       	lsr	r25
     7c0:	96 95       	lsr	r25
     7c2:	99 0f       	add	r25, r25
     7c4:	29 2f       	mov	r18, r25
     7c6:	22 0f       	add	r18, r18
     7c8:	22 0f       	add	r18, r18
     7ca:	92 0f       	add	r25, r18
     7cc:	89 1b       	sub	r24, r25
     7ce:	80 5d       	subi	r24, 0xD0	; 208
     7d0:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(':');
     7d4:	8a e3       	ldi	r24, 0x3A	; 58
     7d6:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(rtc->min/10+48);
     7da:	f8 01       	movw	r30, r16
     7dc:	81 81       	ldd	r24, Z+1	; 0x01
     7de:	8c 9f       	mul	r24, r28
     7e0:	81 2d       	mov	r24, r1
     7e2:	11 24       	eor	r1, r1
     7e4:	86 95       	lsr	r24
     7e6:	86 95       	lsr	r24
     7e8:	86 95       	lsr	r24
     7ea:	80 5d       	subi	r24, 0xD0	; 208
     7ec:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(rtc->min%10+48);
     7f0:	f8 01       	movw	r30, r16
     7f2:	81 81       	ldd	r24, Z+1	; 0x01
     7f4:	8c 9f       	mul	r24, r28
     7f6:	91 2d       	mov	r25, r1
     7f8:	11 24       	eor	r1, r1
     7fa:	96 95       	lsr	r25
     7fc:	96 95       	lsr	r25
     7fe:	96 95       	lsr	r25
     800:	99 0f       	add	r25, r25
     802:	29 2f       	mov	r18, r25
     804:	22 0f       	add	r18, r18
     806:	22 0f       	add	r18, r18
     808:	92 0f       	add	r25, r18
     80a:	89 1b       	sub	r24, r25
     80c:	80 5d       	subi	r24, 0xD0	; 208
     80e:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(':');
     812:	8a e3       	ldi	r24, 0x3A	; 58
     814:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(rtc->sec/10+48);
     818:	f8 01       	movw	r30, r16
     81a:	80 81       	ld	r24, Z
     81c:	8c 9f       	mul	r24, r28
     81e:	81 2d       	mov	r24, r1
     820:	11 24       	eor	r1, r1
     822:	86 95       	lsr	r24
     824:	86 95       	lsr	r24
     826:	86 95       	lsr	r24
     828:	80 5d       	subi	r24, 0xD0	; 208
     82a:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(rtc->sec%10+48);
     82e:	f8 01       	movw	r30, r16
     830:	80 81       	ld	r24, Z
     832:	8c 9f       	mul	r24, r28
     834:	91 2d       	mov	r25, r1
     836:	11 24       	eor	r1, r1
     838:	96 95       	lsr	r25
     83a:	96 95       	lsr	r25
     83c:	96 95       	lsr	r25
     83e:	99 0f       	add	r25, r25
     840:	29 2f       	mov	r18, r25
     842:	22 0f       	add	r18, r18
     844:	22 0f       	add	r18, r18
     846:	92 0f       	add	r25, r18
     848:	89 1b       	sub	r24, r25
     84a:	80 5d       	subi	r24, 0xD0	; 208
     84c:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
		
	Lcd_Set_Cursor(2,3);
     850:	63 e0       	ldi	r22, 0x03	; 3
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	0e 94 31 09 	call	0x1262	; 0x1262 <Lcd_Set_Cursor>
	Lcd_Write_Char(rtc->date/10+48);
     858:	f8 01       	movw	r30, r16
     85a:	84 81       	ldd	r24, Z+4	; 0x04
     85c:	8c 9f       	mul	r24, r28
     85e:	81 2d       	mov	r24, r1
     860:	11 24       	eor	r1, r1
     862:	86 95       	lsr	r24
     864:	86 95       	lsr	r24
     866:	86 95       	lsr	r24
     868:	80 5d       	subi	r24, 0xD0	; 208
     86a:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(rtc->date%10+48);
     86e:	f8 01       	movw	r30, r16
     870:	84 81       	ldd	r24, Z+4	; 0x04
     872:	8c 9f       	mul	r24, r28
     874:	91 2d       	mov	r25, r1
     876:	11 24       	eor	r1, r1
     878:	96 95       	lsr	r25
     87a:	96 95       	lsr	r25
     87c:	96 95       	lsr	r25
     87e:	99 0f       	add	r25, r25
     880:	29 2f       	mov	r18, r25
     882:	22 0f       	add	r18, r18
     884:	22 0f       	add	r18, r18
     886:	92 0f       	add	r25, r18
     888:	89 1b       	sub	r24, r25
     88a:	80 5d       	subi	r24, 0xD0	; 208
     88c:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(':');
     890:	8a e3       	ldi	r24, 0x3A	; 58
     892:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(rtc->month/10+48);
     896:	f8 01       	movw	r30, r16
     898:	85 81       	ldd	r24, Z+5	; 0x05
     89a:	8c 9f       	mul	r24, r28
     89c:	81 2d       	mov	r24, r1
     89e:	11 24       	eor	r1, r1
     8a0:	86 95       	lsr	r24
     8a2:	86 95       	lsr	r24
     8a4:	86 95       	lsr	r24
     8a6:	80 5d       	subi	r24, 0xD0	; 208
     8a8:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(rtc->month%10+48);
     8ac:	f8 01       	movw	r30, r16
     8ae:	85 81       	ldd	r24, Z+5	; 0x05
     8b0:	8c 9f       	mul	r24, r28
     8b2:	91 2d       	mov	r25, r1
     8b4:	11 24       	eor	r1, r1
     8b6:	96 95       	lsr	r25
     8b8:	96 95       	lsr	r25
     8ba:	96 95       	lsr	r25
     8bc:	99 0f       	add	r25, r25
     8be:	29 2f       	mov	r18, r25
     8c0:	22 0f       	add	r18, r18
     8c2:	22 0f       	add	r18, r18
     8c4:	92 0f       	add	r25, r18
     8c6:	89 1b       	sub	r24, r25
     8c8:	80 5d       	subi	r24, 0xD0	; 208
     8ca:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(':');
     8ce:	8a e3       	ldi	r24, 0x3A	; 58
     8d0:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_String("20");
     8d4:	82 e9       	ldi	r24, 0x92	; 146
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	0e 94 1b 09 	call	0x1236	; 0x1236 <Lcd_Write_String>
	Lcd_Write_Char(rtc->year/10+48);
     8dc:	f8 01       	movw	r30, r16
     8de:	86 81       	ldd	r24, Z+6	; 0x06
     8e0:	8c 9f       	mul	r24, r28
     8e2:	81 2d       	mov	r24, r1
     8e4:	11 24       	eor	r1, r1
     8e6:	86 95       	lsr	r24
     8e8:	86 95       	lsr	r24
     8ea:	86 95       	lsr	r24
     8ec:	80 5d       	subi	r24, 0xD0	; 208
     8ee:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	Lcd_Write_Char(rtc->year%10+48);
     8f2:	f8 01       	movw	r30, r16
     8f4:	86 81       	ldd	r24, Z+6	; 0x06
     8f6:	8c 9f       	mul	r24, r28
     8f8:	c1 2d       	mov	r28, r1
     8fa:	11 24       	eor	r1, r1
     8fc:	c6 95       	lsr	r28
     8fe:	c6 95       	lsr	r28
     900:	c6 95       	lsr	r28
     902:	cc 0f       	add	r28, r28
     904:	9c 2f       	mov	r25, r28
     906:	99 0f       	add	r25, r25
     908:	99 0f       	add	r25, r25
     90a:	c9 0f       	add	r28, r25
     90c:	8c 1b       	sub	r24, r28
     90e:	80 5d       	subi	r24, 0xD0	; 208
     910:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
		
	Lcd_Set_Cursor(1,0);
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	0e 94 31 09 	call	0x1262	; 0x1262 <Lcd_Set_Cursor>
	Lcd_Write_Char(' ');
     91c:	80 e2       	ldi	r24, 0x20	; 32
     91e:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
}
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <app_display_task>:
	task_add(TASK_REPEATED, TIMEOUT_APP_DISPLAY, app_display_task);
}

void app_display_task(void * pv_param)
{
	ds1307_get_time(&my_rtc);
     92a:	8b ed       	ldi	r24, 0xDB	; 219
     92c:	93 e0       	ldi	r25, 0x03	; 3
     92e:	0e 94 3c 08 	call	0x1078	; 0x1078 <ds1307_get_time>
	app_display_lcd(&my_rtc);
     932:	8b ed       	ldi	r24, 0xDB	; 219
     934:	93 e0       	ldi	r25, 0x03	; 3
     936:	0e 94 c5 03 	call	0x78a	; 0x78a <app_display_lcd>
     93a:	08 95       	ret

0000093c <bsp_adc_init>:

#include "bsp_adc.h"

void bsp_adc_init(void)
{
	sbi(DDRB, 0);
     93c:	84 b1       	in	r24, 0x04	; 4
     93e:	81 60       	ori	r24, 0x01	; 1
     940:	84 b9       	out	0x04, r24	; 4
	sbi(DDRB, 1);
     942:	84 b1       	in	r24, 0x04	; 4
     944:	82 60       	ori	r24, 0x02	; 2
     946:	84 b9       	out	0x04, r24	; 4
	sbi(PORTB, 0);
     948:	85 b1       	in	r24, 0x05	; 5
     94a:	81 60       	ori	r24, 0x01	; 1
     94c:	85 b9       	out	0x05, r24	; 5
	sbi(PORTB, 1);
     94e:	85 b1       	in	r24, 0x05	; 5
     950:	82 60       	ori	r24, 0x02	; 2
     952:	85 b9       	out	0x05, r24	; 5
	// thanh ghi ADMUX
	ADMUX |= (1<<REFS0); // dien ap: AVCC, ADCL chua 8 bit thap
     954:	ec e7       	ldi	r30, 0x7C	; 124
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	80 64       	ori	r24, 0x40	; 64
     95c:	80 83       	st	Z, r24
	// thanh ghi ADCSRA
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(ADPS0); // cho phep ADC, chia 128
     95e:	ea e7       	ldi	r30, 0x7A	; 122
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	86 68       	ori	r24, 0x86	; 134
     966:	80 83       	st	Z, r24
     968:	08 95       	ret

0000096a <bsp_adc_read>:
}
uint16_t bsp_adc_read(uint8_t channel)
{
	ADMUX &= 0xE0;
     96a:	ec e7       	ldi	r30, 0x7C	; 124
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	90 81       	ld	r25, Z
     970:	90 7e       	andi	r25, 0xE0	; 224
     972:	90 83       	st	Z, r25
	ADMUX |= channel;
     974:	90 81       	ld	r25, Z
     976:	89 2b       	or	r24, r25
     978:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     97a:	8f e3       	ldi	r24, 0x3F	; 63
     97c:	9f e1       	ldi	r25, 0x1F	; 31
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	f1 f7       	brne	.-4      	; 0x97e <bsp_adc_read+0x14>
     982:	00 c0       	rjmp	.+0      	; 0x984 <bsp_adc_read+0x1a>
     984:	00 00       	nop
	_delay_ms(2);
	ADCSRA |= (1<<ADSC); // cho phep bat dau chuyen doi
     986:	ea e7       	ldi	r30, 0x7A	; 122
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	80 64       	ori	r24, 0x40	; 64
     98e:	80 83       	st	Z, r24
	while(ADIF==0);
	ADCSRA |= (1<<ADIF);
     990:	80 81       	ld	r24, Z
     992:	80 61       	ori	r24, 0x10	; 16
     994:	80 83       	st	Z, r24
	return ADCW;
     996:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     99a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
     99e:	08 95       	ret

000009a0 <bsp_i2c_init>:
			bsp_i2c_stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
     9a0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     9a4:	88 e4       	ldi	r24, 0x48	; 72
     9a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     9aa:	08 95       	ret

000009ac <bps_i2c_start>:
     9ac:	94 ea       	ldi	r25, 0xA4	; 164
     9ae:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9b2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9b6:	99 23       	and	r25, r25
     9b8:	e4 f7       	brge	.-8      	; 0x9b2 <bps_i2c_start+0x6>
     9ba:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     9be:	98 7f       	andi	r25, 0xF8	; 248
     9c0:	98 30       	cpi	r25, 0x08	; 8
     9c2:	91 f4       	brne	.+36     	; 0x9e8 <bps_i2c_start+0x3c>
     9c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     9c8:	84 e8       	ldi	r24, 0x84	; 132
     9ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9d2:	88 23       	and	r24, r24
     9d4:	e4 f7       	brge	.-8      	; 0x9ce <bps_i2c_start+0x22>
     9d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     9da:	88 7f       	andi	r24, 0xF8	; 248
     9dc:	88 31       	cpi	r24, 0x18	; 24
     9de:	31 f0       	breq	.+12     	; 0x9ec <bps_i2c_start+0x40>
     9e0:	80 32       	cpi	r24, 0x20	; 32
     9e2:	31 f4       	brne	.+12     	; 0x9f0 <bps_i2c_start+0x44>
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	08 95       	ret
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	08 95       	ret
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	08 95       	ret
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	08 95       	ret

000009f4 <bsp_i2c_repeated_start>:
     9f4:	94 ea       	ldi	r25, 0xA4	; 164
     9f6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9fa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9fe:	99 23       	and	r25, r25
     a00:	e4 f7       	brge	.-8      	; 0x9fa <bsp_i2c_repeated_start+0x6>
     a02:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     a06:	98 7f       	andi	r25, 0xF8	; 248
     a08:	90 31       	cpi	r25, 0x10	; 16
     a0a:	91 f4       	brne	.+36     	; 0xa30 <bsp_i2c_repeated_start+0x3c>
     a0c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     a10:	84 e8       	ldi	r24, 0x84	; 132
     a12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a16:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a1a:	88 23       	and	r24, r24
     a1c:	e4 f7       	brge	.-8      	; 0xa16 <bsp_i2c_repeated_start+0x22>
     a1e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     a22:	88 7f       	andi	r24, 0xF8	; 248
     a24:	80 34       	cpi	r24, 0x40	; 64
     a26:	31 f0       	breq	.+12     	; 0xa34 <bsp_i2c_repeated_start+0x40>
     a28:	80 32       	cpi	r24, 0x20	; 32
     a2a:	31 f4       	brne	.+12     	; 0xa38 <bsp_i2c_repeated_start+0x44>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	08 95       	ret
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	08 95       	ret
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	08 95       	ret
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	08 95       	ret

00000a3c <bsp_i2c_stop>:
     a3c:	84 e9       	ldi	r24, 0x94	; 148
     a3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a42:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a46:	84 fd       	sbrc	r24, 4
     a48:	fc cf       	rjmp	.-8      	; 0xa42 <bsp_i2c_stop+0x6>
     a4a:	08 95       	ret

00000a4c <bsp_i2c_write>:

uint8_t bsp_i2c_write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     a4c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     a50:	84 e8       	ldi	r24, 0x84	; 132
     a52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     a56:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a5a:	88 23       	and	r24, r24
     a5c:	e4 f7       	brge	.-8      	; 0xa56 <bsp_i2c_write+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     a5e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     a62:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     a64:	88 32       	cpi	r24, 0x28	; 40
     a66:	21 f0       	breq	.+8      	; 0xa70 <bsp_i2c_write+0x24>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     a68:	80 33       	cpi	r24, 0x30	; 48
     a6a:	21 f4       	brne	.+8      	; 0xa74 <bsp_i2c_write+0x28>
	return 1;												/* If yes then return 1 to indicate nack received */
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     a74:	82 e0       	ldi	r24, 0x02	; 2
}
     a76:	08 95       	ret

00000a78 <bsp_i2c_read_ack>:

char bsp_i2c_read_ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     a78:	84 ec       	ldi	r24, 0xC4	; 196
     a7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     a7e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a82:	88 23       	and	r24, r24
     a84:	e4 f7       	brge	.-8      	; 0xa7e <bsp_i2c_read_ack+0x6>
	return TWDR;											/* Return received data */
     a86:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     a8a:	08 95       	ret

00000a8c <bsp_i2c_read_nack>:

char bsp_i2c_read_nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     a8c:	84 e8       	ldi	r24, 0x84	; 132
     a8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     a92:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a96:	88 23       	and	r24, r24
     a98:	e4 f7       	brge	.-8      	; 0xa92 <bsp_i2c_read_nack+0x6>
	return TWDR;											/* Return received data */
     a9a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     a9e:	08 95       	ret

00000aa0 <bsp_timer_1_init>:

bsp_timer_handle_t bsp_timer_interrupt_callback;

void bsp_timer_1_init(void)
{
	TCNT1 = DEFAULT_TIMER_VALUE;
     aa0:	80 e8       	ldi	r24, 0x80	; 128
     aa2:	91 ec       	ldi	r25, 0xC1	; 193
     aa4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     aa8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0x00;
     aac:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1<<CS10);
     ab0:	e1 e8       	ldi	r30, 0x81	; 129
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1);
     aba:	ef e6       	ldi	r30, 0x6F	; 111
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	81 60       	ori	r24, 0x01	; 1
     ac2:	80 83       	st	Z, r24
     ac4:	08 95       	ret

00000ac6 <bsp_timer_1_set_interrupt_handle>:
}

void bsp_timer_1_set_interrupt_handle(bsp_timer_handle_t pfun)
{
	bsp_timer_interrupt_callback = pfun;
     ac6:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <bsp_timer_interrupt_callback+0x1>
     aca:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <bsp_timer_interrupt_callback>
     ace:	08 95       	ret

00000ad0 <__vector_13>:
}

ISR(TIMER1_OVF_vect)
{
     ad0:	1f 92       	push	r1
     ad2:	0f 92       	push	r0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
	TCNT1 = DEFAULT_TIMER_VALUE;
     af2:	80 e8       	ldi	r24, 0x80	; 128
     af4:	91 ec       	ldi	r25, 0xC1	; 193
     af6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     afa:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	bsp_timer_interrupt_callback(0);
     afe:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <bsp_timer_interrupt_callback>
     b02:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <bsp_timer_interrupt_callback+0x1>
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	09 95       	icall
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <bsp_uart_init>:

void bsp_uart_read_string(char *Output, unsigned int length)
{
	for(int i=0;i<length;i++)
	Output[i] = bsp_uart_read_char();
}
     b2e:	dc 01       	movw	r26, r24
     b30:	cb 01       	movw	r24, r22
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	aa 1f       	adc	r26, r26
     b38:	bb 1f       	adc	r27, r27
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	aa 1f       	adc	r26, r26
     b40:	bb 1f       	adc	r27, r27
     b42:	9c 01       	movw	r18, r24
     b44:	ad 01       	movw	r20, r26
     b46:	22 0f       	add	r18, r18
     b48:	33 1f       	adc	r19, r19
     b4a:	44 1f       	adc	r20, r20
     b4c:	55 1f       	adc	r21, r21
     b4e:	22 0f       	add	r18, r18
     b50:	33 1f       	adc	r19, r19
     b52:	44 1f       	adc	r20, r20
     b54:	55 1f       	adc	r21, r21
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	74 e2       	ldi	r23, 0x24	; 36
     b5a:	84 ef       	ldi	r24, 0xF4	; 244
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__udivmodsi4>
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	82 0f       	add	r24, r18
     b66:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     b6a:	da 01       	movw	r26, r20
     b6c:	c9 01       	movw	r24, r18
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	a1 09       	sbc	r26, r1
     b72:	b1 09       	sbc	r27, r1
     b74:	89 2f       	mov	r24, r25
     b76:	9a 2f       	mov	r25, r26
     b78:	ab 2f       	mov	r26, r27
     b7a:	bb 27       	eor	r27, r27
     b7c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     b80:	e1 ec       	ldi	r30, 0xC1	; 193
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	88 69       	ori	r24, 0x98	; 152
     b88:	80 83       	st	Z, r24
     b8a:	e2 ec       	ldi	r30, 0xC2	; 194
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	86 60       	ori	r24, 0x06	; 6
     b92:	80 83       	st	Z, r24
     b94:	08 95       	ret

00000b96 <bsp_uart_read_char>:
     b96:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     b9a:	88 23       	and	r24, r24
     b9c:	e4 f7       	brge	.-8      	; 0xb96 <bsp_uart_read_char>
     b9e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     ba2:	08 95       	ret

00000ba4 <bsp_uart_write_char>:

void bsp_uart_write_char(char ch)
{
	while (! (UCSR0A & (1<<UDRE0)));	/* Wait for empty transmit buffer*/
     ba4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ba8:	95 ff       	sbrs	r25, 5
     baa:	fc cf       	rjmp	.-8      	; 0xba4 <bsp_uart_write_char>
	UDR0 = ch ;
     bac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bb0:	08 95       	ret

00000bb2 <bsp_uart_send_string>:
}

void bsp_uart_send_string(char *str)
{
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	8c 01       	movw	r16, r24
	unsigned char j=0;
     bba:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (str[j]!=0)		/* Send string till null */
     bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <bsp_uart_send_string+0x12>
	{
		bsp_uart_write_char(str[j]);
     bbe:	0e 94 d2 05 	call	0xba4	; 0xba4 <bsp_uart_write_char>
		j++;
     bc2:	cf 5f       	subi	r28, 0xFF	; 255

void bsp_uart_send_string(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
     bc4:	f8 01       	movw	r30, r16
     bc6:	ec 0f       	add	r30, r28
     bc8:	f1 1d       	adc	r31, r1
     bca:	80 81       	ld	r24, Z
     bcc:	81 11       	cpse	r24, r1
     bce:	f7 cf       	rjmp	.-18     	; 0xbbe <bsp_uart_send_string+0xc>
	{
		bsp_uart_write_char(str[j]);
		j++;
	}
}
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	08 95       	ret

00000bd8 <bsp_uart_set_function_handle>:
void bsp_uart_set_function_handle(bsp_uart_function_handle_t pfun)
{
	bsp_uart_callback = pfun;
     bd8:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <bsp_uart_callback+0x1>
     bdc:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <bsp_uart_callback>
     be0:	08 95       	ret

00000be2 <__vector_18>:
}

ISR (USART_RX_vect)
{
     be2:	1f 92       	push	r1
     be4:	0f 92       	push	r0
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	0f 92       	push	r0
     bea:	11 24       	eor	r1, r1
     bec:	2f 93       	push	r18
     bee:	3f 93       	push	r19
     bf0:	4f 93       	push	r20
     bf2:	5f 93       	push	r21
     bf4:	6f 93       	push	r22
     bf6:	7f 93       	push	r23
     bf8:	8f 93       	push	r24
     bfa:	9f 93       	push	r25
     bfc:	af 93       	push	r26
     bfe:	bf 93       	push	r27
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
	(*bsp_uart_callback)((uint8_t)bsp_uart_read_char());
     c08:	c0 91 e4 03 	lds	r28, 0x03E4	; 0x8003e4 <bsp_uart_callback>
     c0c:	d0 91 e5 03 	lds	r29, 0x03E5	; 0x8003e5 <bsp_uart_callback+0x1>
     c10:	0e 94 cb 05 	call	0xb96	; 0xb96 <bsp_uart_read_char>
     c14:	fe 01       	movw	r30, r28
     c16:	09 95       	icall
}
     c18:	ff 91       	pop	r31
     c1a:	ef 91       	pop	r30
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	bf 91       	pop	r27
     c22:	af 91       	pop	r26
     c24:	9f 91       	pop	r25
     c26:	8f 91       	pop	r24
     c28:	7f 91       	pop	r23
     c2a:	6f 91       	pop	r22
     c2c:	5f 91       	pop	r21
     c2e:	4f 91       	pop	r20
     c30:	3f 91       	pop	r19
     c32:	2f 91       	pop	r18
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <ftr_cli_handle>:
	task_add(TASK_REPEATED, TIMEOUT_HANDLE_CLI, ftr_cli_task);
}

void ftr_cli_handle(uint8_t data)
{
	Ring_Buffer_Put_Char(&ftr_ring_buffer, data);
     c3e:	68 2f       	mov	r22, r24
     c40:	86 ee       	ldi	r24, 0xE6	; 230
     c42:	93 e0       	ldi	r25, 0x03	; 3
     c44:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <Ring_Buffer_Put_Char>
     c48:	08 95       	ret

00000c4a <ftr_cli_task>:
void ftr_cli_remove_command(CLI_Command_t *command_def)
{
	CLI_Remove_command(command_def);
}
void ftr_cli_task(void * pv_params)
{
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
	uint8_t * buffer_read_malloc;
	uint8_t * buffer_out_malloc;
	if(Ring_Buffer_Search_Char(&ftr_ring_buffer, 0x0A, &ftr_ring_buffer_position))
     c52:	48 ef       	ldi	r20, 0xF8	; 248
     c54:	52 e0       	ldi	r21, 0x02	; 2
     c56:	6a e0       	ldi	r22, 0x0A	; 10
     c58:	86 ee       	ldi	r24, 0xE6	; 230
     c5a:	93 e0       	ldi	r25, 0x03	; 3
     c5c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <Ring_Buffer_Search_Char>
     c60:	88 23       	and	r24, r24
     c62:	49 f1       	breq	.+82     	; 0xcb6 <ftr_cli_task+0x6c>
	{
		
		buffer_read_malloc = (uint8_t*)malloc(MAX_CLI_BUFFER * sizeof(uint8_t));
     c64:	80 e4       	ldi	r24, 0x40	; 64
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <malloc>
     c6c:	8c 01       	movw	r16, r24
		buffer_out_malloc = (uint8_t*)malloc(MAX_CLI_BUFFER * sizeof(uint8_t));
     c6e:	80 e4       	ldi	r24, 0x40	; 64
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <malloc>
     c76:	ec 01       	movw	r28, r24
		
		Ring_Buffer_Get(&ftr_ring_buffer, buffer_read_malloc, MAX_CLI_BUFFER);
     c78:	40 e4       	ldi	r20, 0x40	; 64
     c7a:	b8 01       	movw	r22, r16
     c7c:	86 ee       	ldi	r24, 0xE6	; 230
     c7e:	93 e0       	ldi	r25, 0x03	; 3
     c80:	0e 94 13 0a 	call	0x1426	; 0x1426 <Ring_Buffer_Get>
		CLI_Process_Command((char *)buffer_read_malloc, (char *)buffer_out_malloc, MAX_CLI_BUFFER);
     c84:	40 e4       	ldi	r20, 0x40	; 64
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	be 01       	movw	r22, r28
     c8a:	c8 01       	movw	r24, r16
     c8c:	0e 94 48 07 	call	0xe90	; 0xe90 <CLI_Process_Command>
		bsp_uart_send_string((char *)buffer_out_malloc);
     c90:	ce 01       	movw	r24, r28
     c92:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <bsp_uart_send_string>
		
		memset(buffer_read_malloc, 0, MAX_CLI_BUFFER);
     c96:	80 e4       	ldi	r24, 0x40	; 64
     c98:	f8 01       	movw	r30, r16
     c9a:	98 2f       	mov	r25, r24
     c9c:	11 92       	st	Z+, r1
     c9e:	9a 95       	dec	r25
     ca0:	e9 f7       	brne	.-6      	; 0xc9c <ftr_cli_task+0x52>
		memset(buffer_out_malloc, 0, MAX_CLI_BUFFER);
     ca2:	fe 01       	movw	r30, r28
     ca4:	11 92       	st	Z+, r1
     ca6:	8a 95       	dec	r24
     ca8:	e9 f7       	brne	.-6      	; 0xca4 <ftr_cli_task+0x5a>
		free(buffer_read_malloc);
     caa:	c8 01       	movw	r24, r16
     cac:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <free>
		free(buffer_out_malloc);	
     cb0:	ce 01       	movw	r24, r28
     cb2:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <free>
	}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <ftr_cli_init>:

void ftr_cli_task(void * pv_params);
void ftr_cli_handle(uint8_t data);

void ftr_cli_init(void)
{
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
	Ring_Buffer_Init(&ftr_ring_buffer, ftr_ring_buffer_rx_data, 1, RINGBUFFER_SIZE);
     cc4:	00 e1       	ldi	r16, 0x10	; 16
     cc6:	10 e0       	ldi	r17, 0x00	; 0
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	6c ef       	ldi	r22, 0xFC	; 252
     cd0:	72 e0       	ldi	r23, 0x02	; 2
     cd2:	86 ee       	ldi	r24, 0xE6	; 230
     cd4:	93 e0       	ldi	r25, 0x03	; 3
     cd6:	0e 94 41 09 	call	0x1282	; 0x1282 <Ring_Buffer_Init>
	per_uart_set_function_handle(ftr_cli_handle);
     cda:	8f e1       	ldi	r24, 0x1F	; 31
     cdc:	96 e0       	ldi	r25, 0x06	; 6
     cde:	0e 94 00 0b 	call	0x1600	; 0x1600 <per_uart_set_function_handle>
	task_add(TASK_REPEATED, TIMEOUT_HANDLE_CLI, ftr_cli_task);
     ce2:	45 e2       	ldi	r20, 0x25	; 37
     ce4:	56 e0       	ldi	r21, 0x06	; 6
     ce6:	64 e6       	ldi	r22, 0x64	; 100
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	0e 94 03 0b 	call	0x1606	; 0x1606 <task_add>
}
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	08 95       	ret

00000cf6 <ftr_cli_add_command>:
{
	Ring_Buffer_Put_Char(&ftr_ring_buffer, data);
}
void ftr_cli_add_command(CLI_Command_t *command_def)
{
	CLI_Add_Command(command_def);
     cf6:	0e 94 f7 06 	call	0xdee	; 0xdee <CLI_Add_Command>
     cfa:	08 95       	ret

00000cfc <ftr_sensor_task>:
{
	return temperature;
}
void ftr_sensor_task(void * pv_params)
{
	temperature = bsp_adc_read(0) * 0.488f;
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	0e 94 b5 04 	call	0x96a	; 0x96a <bsp_adc_read>
     d02:	bc 01       	movw	r22, r24
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__floatunsisf>
     d0c:	23 e2       	ldi	r18, 0x23	; 35
     d0e:	3b ed       	ldi	r19, 0xDB	; 219
     d10:	49 ef       	ldi	r20, 0xF9	; 249
     d12:	5e e3       	ldi	r21, 0x3E	; 62
     d14:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__mulsf3>
     d18:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__fixunssfsi>
     d1c:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <temperature>
     d20:	08 95       	ret

00000d22 <ftr_sensor_init>:

void ftr_sensor_task(void * pv_params);

void ftr_sensor_init(void)
{
	task_add(TASK_REPEATED, TIMEOUT_HANDLE_SENSOR, ftr_sensor_task);
     d22:	4e e7       	ldi	r20, 0x7E	; 126
     d24:	56 e0       	ldi	r21, 0x06	; 6
     d26:	64 e6       	ldi	r22, 0x64	; 100
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	0e 94 03 0b 	call	0x1606	; 0x1606 <task_add>
     d30:	08 95       	ret

00000d32 <ftr_sensor_get_temperature>:
}

uint8_t ftr_sensor_get_temperature(void)
{
	return temperature;
}
     d32:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <temperature>
     d36:	08 95       	ret

00000d38 <Clear_Callback>:
		}
		Command_Count -= 1;
		break;
	}
	return 0;
}
     d38:	ca 01       	movw	r24, r20
     d3a:	40 91 0f 03 	lds	r20, 0x030F	; 0x80030f <count.2039>
     d3e:	50 91 10 03 	lds	r21, 0x0310	; 0x800310 <count.2039+0x1>
     d42:	45 2b       	or	r20, r21
     d44:	69 f4       	brne	.+26     	; 0xd60 <Clear_Callback+0x28>
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	50 93 10 03 	sts	0x0310, r21	; 0x800310 <count.2039+0x1>
     d4e:	40 93 0f 03 	sts	0x030F, r20	; 0x80030f <count.2039>
     d52:	a9 01       	movw	r20, r18
     d54:	65 e9       	ldi	r22, 0x95	; 149
     d56:	72 e0       	ldi	r23, 0x02	; 2
     d58:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <strncpy>
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	08 95       	ret
     d60:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <count.2039+0x1>
     d64:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <count.2039>
     d68:	a9 01       	movw	r20, r18
     d6a:	6a e9       	ldi	r22, 0x9A	; 154
     d6c:	72 e0       	ldi	r23, 0x02	; 2
     d6e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <strncpy>
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	08 95       	ret

00000d76 <Help_Callback>:
     d76:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <count.2031>
     d7a:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <count.2031+0x1>
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ef 5e       	subi	r30, 0xEF	; 239
     d84:	fc 4f       	sbci	r31, 0xFC	; 252
     d86:	01 90       	ld	r0, Z+
     d88:	f0 81       	ld	r31, Z
     d8a:	e0 2d       	mov	r30, r0
     d8c:	83 81       	ldd	r24, Z+3	; 0x03
     d8e:	8f 93       	push	r24
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	8f 93       	push	r24
     d94:	81 81       	ldd	r24, Z+1	; 0x01
     d96:	8f 93       	push	r24
     d98:	80 81       	ld	r24, Z
     d9a:	8f 93       	push	r24
     d9c:	8e e9       	ldi	r24, 0x9E	; 158
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	9f 93       	push	r25
     da2:	8f 93       	push	r24
     da4:	5f 93       	push	r21
     da6:	4f 93       	push	r20
     da8:	0e 94 55 10 	call	0x20aa	; 0x20aa <sprintf>
     dac:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <count.2031>
     db0:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <count.2031+0x1>
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <count.2031+0x1>
     dba:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <count.2031>
     dbe:	20 91 d9 03 	lds	r18, 0x03D9	; 0x8003d9 <Command_Count>
     dc2:	30 91 da 03 	lds	r19, 0x03DA	; 0x8003da <Command_Count+0x1>
     dc6:	4d b7       	in	r20, 0x3d	; 61
     dc8:	5e b7       	in	r21, 0x3e	; 62
     dca:	48 5f       	subi	r20, 0xF8	; 248
     dcc:	5f 4f       	sbci	r21, 0xFF	; 255
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	5e bf       	out	0x3e, r21	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	4d bf       	out	0x3d, r20	; 61
     dd8:	82 17       	cp	r24, r18
     dda:	93 07       	cpc	r25, r19
     ddc:	30 f0       	brcs	.+12     	; 0xdea <Help_Callback+0x74>
     dde:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <count.2031+0x1>
     de2:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <count.2031>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	08 95       	ret
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	08 95       	ret

00000dee <CLI_Add_Command>:
     dee:	20 91 d9 03 	lds	r18, 0x03D9	; 0x8003d9 <Command_Count>
     df2:	30 91 da 03 	lds	r19, 0x03DA	; 0x8003da <Command_Count+0x1>
     df6:	24 36       	cpi	r18, 0x64	; 100
     df8:	31 05       	cpc	r19, r1
     dfa:	f0 f4       	brcc	.+60     	; 0xe38 <CLI_Add_Command+0x4a>
     dfc:	fc 01       	movw	r30, r24
     dfe:	a0 81       	ld	r26, Z
     e00:	b1 81       	ldd	r27, Z+1	; 0x01
     e02:	fd 01       	movw	r30, r26
     e04:	01 90       	ld	r0, Z+
     e06:	00 20       	and	r0, r0
     e08:	e9 f7       	brne	.-6      	; 0xe04 <CLI_Add_Command+0x16>
     e0a:	31 97       	sbiw	r30, 0x01	; 1
     e0c:	ea 1b       	sub	r30, r26
     e0e:	fb 0b       	sbc	r31, r27
     e10:	dc 01       	movw	r26, r24
     e12:	15 96       	adiw	r26, 0x05	; 5
     e14:	fc 93       	st	X, r31
     e16:	ee 93       	st	-X, r30
     e18:	14 97       	sbiw	r26, 0x04	; 4
     e1a:	f9 01       	movw	r30, r18
     e1c:	ee 0f       	add	r30, r30
     e1e:	ff 1f       	adc	r31, r31
     e20:	ef 5e       	subi	r30, 0xEF	; 239
     e22:	fc 4f       	sbci	r31, 0xFC	; 252
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
     e28:	2f 5f       	subi	r18, 0xFF	; 255
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
     e2c:	30 93 da 03 	sts	0x03DA, r19	; 0x8003da <Command_Count+0x1>
     e30:	20 93 d9 03 	sts	0x03D9, r18	; 0x8003d9 <Command_Count>
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	08 95       	ret
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	08 95       	ret

00000e3c <CLI_Init>:
     e3c:	8e e2       	ldi	r24, 0x2E	; 46
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 f7 06 	call	0xdee	; 0xdee <CLI_Add_Command>
     e44:	86 e2       	ldi	r24, 0x26	; 38
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	0e 94 f7 06 	call	0xdee	; 0xdee <CLI_Add_Command>
     e4c:	08 95       	ret

00000e4e <CLI_Parse_Arguments>:
 * @param argv[]:pointers to arguments found in input string
 **/
void CLI_Parse_Arguments(const char *cli_in_buffer,
                         uint8_t *argc,
                         const char *argv[])
{
     e4e:	fc 01       	movw	r30, r24
    uint8_t argc_temp = 0;
    /* arg 0 is input command */
    argv[argc_temp++] = cli_in_buffer;
     e50:	da 01       	movw	r26, r20
     e52:	8d 93       	st	X+, r24
     e54:	9c 93       	st	X, r25
     e56:	91 e0       	ldi	r25, 0x01	; 1

    while (argc_temp < MAX_ARGS_IN_CMD)
     e58:	16 c0       	rjmp	.+44     	; 0xe86 <CLI_Parse_Arguments+0x38>
    {
        while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
        {
            cli_in_buffer++;
     e5a:	31 96       	adiw	r30, 0x01	; 1
    /* arg 0 is input command */
    argv[argc_temp++] = cli_in_buffer;

    while (argc_temp < MAX_ARGS_IN_CMD)
    {
        while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
     e5c:	80 81       	ld	r24, Z
     e5e:	88 23       	and	r24, r24
     e60:	21 f0       	breq	.+8      	; 0xe6a <CLI_Parse_Arguments+0x1c>
     e62:	80 32       	cpi	r24, 0x20	; 32
     e64:	d1 f7       	brne	.-12     	; 0xe5a <CLI_Parse_Arguments+0xc>
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <CLI_Parse_Arguments+0x1c>

        while ((*cli_in_buffer) == ' ')
        {
            /* convert ' ' to NULL */
            //*cli_in_buffer = 0x00;
            cli_in_buffer++;
     e68:	31 96       	adiw	r30, 0x01	; 1
        while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
        {
            cli_in_buffer++;
        }

        while ((*cli_in_buffer) == ' ')
     e6a:	80 81       	ld	r24, Z
     e6c:	80 32       	cpi	r24, 0x20	; 32
     e6e:	e1 f3       	breq	.-8      	; 0xe68 <CLI_Parse_Arguments+0x1a>
            /* convert ' ' to NULL */
            //*cli_in_buffer = 0x00;
            cli_in_buffer++;
        }

        if (*cli_in_buffer != 0x00)
     e70:	88 23       	and	r24, r24
     e72:	59 f0       	breq	.+22     	; 0xe8a <CLI_Parse_Arguments+0x3c>
        {
            argv[argc_temp++] = cli_in_buffer;
     e74:	a9 2f       	mov	r26, r25
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	aa 0f       	add	r26, r26
     e7a:	bb 1f       	adc	r27, r27
     e7c:	a4 0f       	add	r26, r20
     e7e:	b5 1f       	adc	r27, r21
     e80:	ed 93       	st	X+, r30
     e82:	fc 93       	st	X, r31
     e84:	9f 5f       	subi	r25, 0xFF	; 255
{
    uint8_t argc_temp = 0;
    /* arg 0 is input command */
    argv[argc_temp++] = cli_in_buffer;

    while (argc_temp < MAX_ARGS_IN_CMD)
     e86:	9a 30       	cpi	r25, 0x0A	; 10
     e88:	48 f3       	brcs	.-46     	; 0xe5c <CLI_Parse_Arguments+0xe>
        {
            break;
        }
    }

    *argc = argc_temp;
     e8a:	fb 01       	movw	r30, r22
     e8c:	90 83       	st	Z, r25
     e8e:	08 95       	ret

00000e90 <CLI_Process_Command>:
 * @see cli_uart_interface.c
 **/
uint8_t CLI_Process_Command(const char *cli_in_buffer,
                            char *cli_out_buffer,
                            uint16_t cli_out_max)
{
     e90:	8f 92       	push	r8
     e92:	9f 92       	push	r9
     e94:	af 92       	push	r10
     e96:	bf 92       	push	r11
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	65 97       	sbiw	r28, 0x15	; 21
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	7c 01       	movw	r14, r24
     eba:	b6 2e       	mov	r11, r22
     ebc:	a7 2e       	mov	r10, r23
     ebe:	94 2e       	mov	r9, r20
     ec0:	85 2e       	mov	r8, r21
    uint8_t is_command_valid = 0;
    uint8_t xreturn = 0;
    uint8_t argc = 0;
     ec2:	19 82       	std	Y+1, r1	; 0x01
    const char *argv[MAX_ARGS_IN_CMD];
    CLI_Command_t *command_list_ptr = NULL;

    /* Search for the command string in the list of registered commands. */
    for (uint16_t i = 0; i < Command_Count; i++)
     ec4:	00 e0       	ldi	r16, 0x00	; 0
     ec6:	10 e0       	ldi	r17, 0x00	; 0
{
    uint8_t is_command_valid = 0;
    uint8_t xreturn = 0;
    uint8_t argc = 0;
    const char *argv[MAX_ARGS_IN_CMD];
    CLI_Command_t *command_list_ptr = NULL;
     ec8:	c1 2c       	mov	r12, r1
     eca:	d1 2c       	mov	r13, r1

    /* Search for the command string in the list of registered commands. */
    for (uint16_t i = 0; i < Command_Count; i++)
     ecc:	20 c0       	rjmp	.+64     	; 0xf0e <CLI_Process_Command+0x7e>
    {
        command_list_ptr = Command_List[i];
     ece:	f8 01       	movw	r30, r16
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	ef 5e       	subi	r30, 0xEF	; 239
     ed6:	fc 4f       	sbci	r31, 0xFC	; 252
     ed8:	c0 80       	ld	r12, Z
     eda:	d1 80       	ldd	r13, Z+1	; 0x01
        uint16_t cmd_len = command_list_ptr->CLI_Command_Length;
     edc:	d6 01       	movw	r26, r12
     ede:	14 96       	adiw	r26, 0x04	; 4
     ee0:	4d 91       	ld	r20, X+
     ee2:	5c 91       	ld	r21, X
     ee4:	15 97       	sbiw	r26, 0x05	; 5
        /** To ensure the string lengths match exactly, so as not to pick up
            a sub-string of a longer command, check the byte after the expected
            end of the string is either the end of the string or a space before
            a parameter.
        */
        if ((cli_in_buffer[cmd_len] == 0x0A) || (cli_in_buffer[cmd_len] == '=') || (cli_in_buffer[cmd_len] == '?'))
     ee6:	f7 01       	movw	r30, r14
     ee8:	e4 0f       	add	r30, r20
     eea:	f5 1f       	adc	r31, r21
     eec:	80 81       	ld	r24, Z
     eee:	8a 30       	cpi	r24, 0x0A	; 10
     ef0:	21 f0       	breq	.+8      	; 0xefa <CLI_Process_Command+0x6a>
     ef2:	8d 33       	cpi	r24, 0x3D	; 61
     ef4:	11 f0       	breq	.+4      	; 0xefa <CLI_Process_Command+0x6a>
     ef6:	8f 33       	cpi	r24, 0x3F	; 63
     ef8:	41 f4       	brne	.+16     	; 0xf0a <CLI_Process_Command+0x7a>
        {
            if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command, cmd_len) == 0)
     efa:	f6 01       	movw	r30, r12
     efc:	60 81       	ld	r22, Z
     efe:	71 81       	ldd	r23, Z+1	; 0x01
     f00:	c7 01       	movw	r24, r14
     f02:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <strncmp>
     f06:	89 2b       	or	r24, r25
     f08:	59 f0       	breq	.+22     	; 0xf20 <CLI_Process_Command+0x90>
    uint8_t argc = 0;
    const char *argv[MAX_ARGS_IN_CMD];
    CLI_Command_t *command_list_ptr = NULL;

    /* Search for the command string in the list of registered commands. */
    for (uint16_t i = 0; i < Command_Count; i++)
     f0a:	0f 5f       	subi	r16, 0xFF	; 255
     f0c:	1f 4f       	sbci	r17, 0xFF	; 255
     f0e:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <Command_Count>
     f12:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <Command_Count+0x1>
     f16:	08 17       	cp	r16, r24
     f18:	19 07       	cpc	r17, r25
     f1a:	c8 f2       	brcs	.-78     	; 0xece <CLI_Process_Command+0x3e>
 **/
uint8_t CLI_Process_Command(const char *cli_in_buffer,
                            char *cli_out_buffer,
                            uint16_t cli_out_max)
{
    uint8_t is_command_valid = 0;
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	01 c0       	rjmp	.+2      	; 0xf22 <CLI_Process_Command+0x92>
        */
        if ((cli_in_buffer[cmd_len] == 0x0A) || (cli_in_buffer[cmd_len] == '=') || (cli_in_buffer[cmd_len] == '?'))
        {
            if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command, cmd_len) == 0)
            {
                is_command_valid = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
                break;
            }
        }
    }

    if (is_command_valid)
     f22:	88 23       	and	r24, r24
     f24:	f9 f0       	breq	.+62     	; 0xf64 <CLI_Process_Command+0xd4>
    {
        if (command_list_ptr->CLI_Callback != NULL)
     f26:	d6 01       	movw	r26, r12
     f28:	16 96       	adiw	r26, 0x06	; 6
     f2a:	8d 91       	ld	r24, X+
     f2c:	9c 91       	ld	r25, X
     f2e:	17 97       	sbiw	r26, 0x07	; 7
     f30:	89 2b       	or	r24, r25
     f32:	59 f1       	breq	.+86     	; 0xf8a <CLI_Process_Command+0xfa>
        {
            CLI_Parse_Arguments(cli_in_buffer, &argc, argv);
     f34:	ae 01       	movw	r20, r28
     f36:	4e 5f       	subi	r20, 0xFE	; 254
     f38:	5f 4f       	sbci	r21, 0xFF	; 255
     f3a:	be 01       	movw	r22, r28
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	c7 01       	movw	r24, r14
     f42:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLI_Parse_Arguments>

            xreturn = command_list_ptr->CLI_Callback(argc,
     f46:	d6 01       	movw	r26, r12
     f48:	16 96       	adiw	r26, 0x06	; 6
     f4a:	ed 91       	ld	r30, X+
     f4c:	fc 91       	ld	r31, X
     f4e:	17 97       	sbiw	r26, 0x07	; 7
     f50:	29 2d       	mov	r18, r9
     f52:	38 2d       	mov	r19, r8
     f54:	4b 2d       	mov	r20, r11
     f56:	5a 2d       	mov	r21, r10
     f58:	be 01       	movw	r22, r28
     f5a:	6e 5f       	subi	r22, 0xFE	; 254
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	09 95       	icall
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <CLI_Process_Command+0xfc>
                                                     cli_out_max);
        }
    }
    else
    {
        snprintf(cli_out_buffer,
     f64:	ff 92       	push	r15
     f66:	ef 92       	push	r14
     f68:	89 ea       	ldi	r24, 0xA9	; 169
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	9f 93       	push	r25
     f6e:	8f 93       	push	r24
     f70:	8f 92       	push	r8
     f72:	9f 92       	push	r9
     f74:	af 92       	push	r10
     f76:	bf 92       	push	r11
     f78:	0e 94 25 10 	call	0x204a	; 0x204a <snprintf>
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
uint8_t CLI_Process_Command(const char *cli_in_buffer,
                            char *cli_out_buffer,
                            uint16_t cli_out_max)
{
    uint8_t is_command_valid = 0;
    uint8_t xreturn = 0;
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <CLI_Process_Command+0xfc>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
                 "\r\nError->%s cmt not found.\r\n",
                 cli_in_buffer);
    }

    return xreturn;
}
     f8c:	65 96       	adiw	r28, 0x15	; 21
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	df 90       	pop	r13
     fa6:	cf 90       	pop	r12
     fa8:	bf 90       	pop	r11
     faa:	af 90       	pop	r10
     fac:	9f 90       	pop	r9
     fae:	8f 90       	pop	r8
     fb0:	08 95       	ret

00000fb2 <DECIMALtoBCD>:
rtc_t static_value;

int DECIMALtoBCD(int DEC)
{
	int L, H;
	L=DEC%10; //make digit low
     fb2:	6a e0       	ldi	r22, 0x0A	; 10
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__divmodhi4>
	H=DEC/10<<4; //make digit high
     fba:	62 95       	swap	r22
     fbc:	72 95       	swap	r23
     fbe:	70 7f       	andi	r23, 0xF0	; 240
     fc0:	76 27       	eor	r23, r22
     fc2:	60 7f       	andi	r22, 0xF0	; 240
     fc4:	76 27       	eor	r23, r22
	return (H+L);
}
     fc6:	86 0f       	add	r24, r22
     fc8:	97 1f       	adc	r25, r23
     fca:	08 95       	ret

00000fcc <BCDtoDECIMAL>:

int BCDtoDECIMAL(int BCD)
{
	int L, H;
	L=BCD & 0x0F; //ones
     fcc:	ac 01       	movw	r20, r24
     fce:	4f 70       	andi	r20, 0x0F	; 15
     fd0:	55 27       	eor	r21, r21
	H=(BCD>>4) * 10;//tens
     fd2:	9c 01       	movw	r18, r24
     fd4:	35 95       	asr	r19
     fd6:	27 95       	ror	r18
     fd8:	35 95       	asr	r19
     fda:	27 95       	ror	r18
     fdc:	35 95       	asr	r19
     fde:	27 95       	ror	r18
     fe0:	35 95       	asr	r19
     fe2:	27 95       	ror	r18
     fe4:	c9 01       	movw	r24, r18
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	22 0f       	add	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	22 0f       	add	r18, r18
     ff4:	33 1f       	adc	r19, r19
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
	return (H+L);
}
     ffa:	84 0f       	add	r24, r20
     ffc:	95 1f       	adc	r25, r21
     ffe:	08 95       	ret

00001000 <ds1307_set_time>:

void ds1307_set_time(rtc_t *rtc)
{
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
	rtc->hour = DECIMALtoBCD(rtc->hour);
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DECIMALtoBCD>
    100e:	8a 83       	std	Y+2, r24	; 0x02
	rtc->min = DECIMALtoBCD(rtc->min);
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DECIMALtoBCD>
    1018:	89 83       	std	Y+1, r24	; 0x01
	rtc->date = DECIMALtoBCD(rtc->date);
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DECIMALtoBCD>
    1022:	8c 83       	std	Y+4, r24	; 0x04
	rtc->month = DECIMALtoBCD(rtc->month);
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DECIMALtoBCD>
    102c:	8d 83       	std	Y+5, r24	; 0x05
	rtc->year = DECIMALtoBCD(rtc->year);
    102e:	8e 81       	ldd	r24, Y+6	; 0x06
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DECIMALtoBCD>
    1036:	8e 83       	std	Y+6, r24	; 0x06
	/*--------*/
	bps_i2c_start(0xD0);     // connect to DS1307 by sending its ID on I2c Bus
    1038:	80 ed       	ldi	r24, 0xD0	; 208
    103a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <bps_i2c_start>
	bsp_i2c_write(0x00); // Request sec RAM address at 00H
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
	
	bsp_i2c_write(rtc->sec);                    // Write sec from RAM address 00H
    1044:	88 81       	ld	r24, Y
    1046:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
	bsp_i2c_write(rtc->min);                    // Write min from RAM address 01H
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
	bsp_i2c_write(rtc->hour);                    // Write hour from RAM address 02H
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
	bsp_i2c_write(rtc->weekDay);                // Write weekDay on RAM address 03H
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
	bsp_i2c_write(rtc->date);                    // Write date on RAM address 04H
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
	bsp_i2c_write(rtc->month);                    // Write month on RAM address 05H
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
	bsp_i2c_write(rtc->year);                    // Write year on RAM address 06h
    1068:	8e 81       	ldd	r24, Y+6	; 0x06
    106a:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
	
	bsp_i2c_stop();                              // Stop I2C communication after Setting the Date
    106e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <bsp_i2c_stop>
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <ds1307_get_time>:

void ds1307_get_time(rtc_t *rtc)
{
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	ec 01       	movw	r28, r24
	bps_i2c_start(0xD0);
    107e:	80 ed       	ldi	r24, 0xD0	; 208
    1080:	0e 94 d6 04 	call	0x9ac	; 0x9ac <bps_i2c_start>
	bsp_i2c_write(0x00);
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
	bsp_i2c_repeated_start(0xD1);
    108a:	81 ed       	ldi	r24, 0xD1	; 209
    108c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <bsp_i2c_repeated_start>
	rtc->sec = bsp_i2c_read_ack();
    1090:	0e 94 3c 05 	call	0xa78	; 0xa78 <bsp_i2c_read_ack>
    1094:	88 83       	st	Y, r24
	rtc->min = bsp_i2c_read_ack();
    1096:	0e 94 3c 05 	call	0xa78	; 0xa78 <bsp_i2c_read_ack>
    109a:	89 83       	std	Y+1, r24	; 0x01
	rtc->hour= bsp_i2c_read_ack();
    109c:	0e 94 3c 05 	call	0xa78	; 0xa78 <bsp_i2c_read_ack>
    10a0:	8a 83       	std	Y+2, r24	; 0x02
	rtc->weekDay = bsp_i2c_read_ack();
    10a2:	0e 94 3c 05 	call	0xa78	; 0xa78 <bsp_i2c_read_ack>
    10a6:	8b 83       	std	Y+3, r24	; 0x03
	rtc->date = bsp_i2c_read_ack();
    10a8:	0e 94 3c 05 	call	0xa78	; 0xa78 <bsp_i2c_read_ack>
    10ac:	8c 83       	std	Y+4, r24	; 0x04
	rtc->month =bsp_i2c_read_ack();
    10ae:	0e 94 3c 05 	call	0xa78	; 0xa78 <bsp_i2c_read_ack>
    10b2:	8d 83       	std	Y+5, r24	; 0x05
	rtc->year = bsp_i2c_read_nack();
    10b4:	0e 94 46 05 	call	0xa8c	; 0xa8c <bsp_i2c_read_nack>
    10b8:	8e 83       	std	Y+6, r24	; 0x06
	bsp_i2c_stop();
    10ba:	0e 94 1e 05 	call	0xa3c	; 0xa3c <bsp_i2c_stop>
	
	rtc->sec = BCDtoDECIMAL(rtc->sec);
    10be:	88 81       	ld	r24, Y
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <BCDtoDECIMAL>
    10c6:	88 83       	st	Y, r24
	rtc->min = BCDtoDECIMAL(rtc->min);
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 e6 07 	call	0xfcc	; 0xfcc <BCDtoDECIMAL>
    10d0:	89 83       	std	Y+1, r24	; 0x01
	rtc->hour = BCDtoDECIMAL(rtc->hour);
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <BCDtoDECIMAL>
    10da:	8a 83       	std	Y+2, r24	; 0x02
	rtc->weekDay = BCDtoDECIMAL(rtc->weekDay);
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <BCDtoDECIMAL>
    10e4:	8b 83       	std	Y+3, r24	; 0x03
	rtc->date = BCDtoDECIMAL(rtc->date);
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 e6 07 	call	0xfcc	; 0xfcc <BCDtoDECIMAL>
    10ee:	8c 83       	std	Y+4, r24	; 0x04
	rtc->month = BCDtoDECIMAL(rtc->month);
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <BCDtoDECIMAL>
    10f8:	8d 83       	std	Y+5, r24	; 0x05
	rtc->year = BCDtoDECIMAL(rtc->year);
    10fa:	8e 81       	ldd	r24, Y+6	; 0x06
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 e6 07 	call	0xfcc	; 0xfcc <BCDtoDECIMAL>
    1102:	8e 83       	std	Y+6, r24	; 0x06
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <Lcd_Write_Char>:
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	90 e1       	ldi	r25, 0x10	; 16
    1112:	89 9f       	mul	r24, r25
    1114:	80 01       	movw	r16, r0
    1116:	11 24       	eor	r1, r1
    1118:	c8 2f       	mov	r28, r24
    111a:	c0 7f       	andi	r28, 0xF0	; 240
    111c:	80 e4       	ldi	r24, 0x40	; 64
    111e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <bps_i2c_start>
    1122:	8c 2f       	mov	r24, r28
    1124:	8d 60       	ori	r24, 0x0D	; 13
    1126:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
    112a:	8f e1       	ldi	r24, 0x1F	; 31
    112c:	9e e4       	ldi	r25, 0x4E	; 78
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <Lcd_Write_Char+0x24>
    1132:	00 c0       	rjmp	.+0      	; 0x1134 <Lcd_Write_Char+0x2a>
    1134:	00 00       	nop
    1136:	8c 2f       	mov	r24, r28
    1138:	89 60       	ori	r24, 0x09	; 9
    113a:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
    113e:	8f e1       	ldi	r24, 0x1F	; 31
    1140:	9e e4       	ldi	r25, 0x4E	; 78
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <Lcd_Write_Char+0x38>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <Lcd_Write_Char+0x3e>
    1148:	00 00       	nop
    114a:	80 2f       	mov	r24, r16
    114c:	8d 60       	ori	r24, 0x0D	; 13
    114e:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
    1152:	8f e1       	ldi	r24, 0x1F	; 31
    1154:	9e e4       	ldi	r25, 0x4E	; 78
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <Lcd_Write_Char+0x4c>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <Lcd_Write_Char+0x52>
    115c:	00 00       	nop
    115e:	80 2f       	mov	r24, r16
    1160:	89 60       	ori	r24, 0x09	; 9
    1162:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
    1166:	0e 94 1e 05 	call	0xa3c	; 0xa3c <bsp_i2c_stop>
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <lcd_send_cmd>:
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	90 e1       	ldi	r25, 0x10	; 16
    117a:	89 9f       	mul	r24, r25
    117c:	80 01       	movw	r16, r0
    117e:	11 24       	eor	r1, r1
    1180:	c8 2f       	mov	r28, r24
    1182:	c0 7f       	andi	r28, 0xF0	; 240
    1184:	80 e4       	ldi	r24, 0x40	; 64
    1186:	0e 94 d6 04 	call	0x9ac	; 0x9ac <bps_i2c_start>
    118a:	8c 2f       	mov	r24, r28
    118c:	8c 60       	ori	r24, 0x0C	; 12
    118e:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
    1192:	8f e1       	ldi	r24, 0x1F	; 31
    1194:	9e e4       	ldi	r25, 0x4E	; 78
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	f1 f7       	brne	.-4      	; 0x1196 <lcd_send_cmd+0x24>
    119a:	00 c0       	rjmp	.+0      	; 0x119c <lcd_send_cmd+0x2a>
    119c:	00 00       	nop
    119e:	8c 2f       	mov	r24, r28
    11a0:	88 60       	ori	r24, 0x08	; 8
    11a2:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
    11a6:	8f e1       	ldi	r24, 0x1F	; 31
    11a8:	9e e4       	ldi	r25, 0x4E	; 78
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <lcd_send_cmd+0x38>
    11ae:	00 c0       	rjmp	.+0      	; 0x11b0 <lcd_send_cmd+0x3e>
    11b0:	00 00       	nop
    11b2:	80 2f       	mov	r24, r16
    11b4:	8c 60       	ori	r24, 0x0C	; 12
    11b6:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
    11ba:	8f e1       	ldi	r24, 0x1F	; 31
    11bc:	9e e4       	ldi	r25, 0x4E	; 78
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <lcd_send_cmd+0x4c>
    11c2:	00 c0       	rjmp	.+0      	; 0x11c4 <lcd_send_cmd+0x52>
    11c4:	00 00       	nop
    11c6:	80 2f       	mov	r24, r16
    11c8:	88 60       	ori	r24, 0x08	; 8
    11ca:	0e 94 26 05 	call	0xa4c	; 0xa4c <bsp_i2c_write>
    11ce:	0e 94 1e 05 	call	0xa3c	; 0xa3c <bsp_i2c_stop>
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	08 95       	ret

000011da <Lcd_Init>:
	lcd_send_cmd(1);
	_delay_ms(2);
}
void Lcd_Init()
{
	lcd_send_cmd(0x02);
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	0e 94 b9 08 	call	0x1172	; 0x1172 <lcd_send_cmd>
    11e0:	8f e3       	ldi	r24, 0x3F	; 63
    11e2:	9f e1       	ldi	r25, 0x1F	; 31
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <Lcd_Init+0xa>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <Lcd_Init+0x10>
    11ea:	00 00       	nop
	_delay_ms(2);
	lcd_send_cmd(0x28);
    11ec:	88 e2       	ldi	r24, 0x28	; 40
    11ee:	0e 94 b9 08 	call	0x1172	; 0x1172 <lcd_send_cmd>
    11f2:	8f e9       	ldi	r24, 0x9F	; 159
    11f4:	9f e0       	ldi	r25, 0x0F	; 15
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <Lcd_Init+0x1c>
    11fa:	00 c0       	rjmp	.+0      	; 0x11fc <Lcd_Init+0x22>
    11fc:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(0x0c);
    11fe:	8c e0       	ldi	r24, 0x0C	; 12
    1200:	0e 94 b9 08 	call	0x1172	; 0x1172 <lcd_send_cmd>
    1204:	8f e9       	ldi	r24, 0x9F	; 159
    1206:	9f e0       	ldi	r25, 0x0F	; 15
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <Lcd_Init+0x2e>
    120c:	00 c0       	rjmp	.+0      	; 0x120e <Lcd_Init+0x34>
    120e:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(0x80);
    1210:	80 e8       	ldi	r24, 0x80	; 128
    1212:	0e 94 b9 08 	call	0x1172	; 0x1172 <lcd_send_cmd>
    1216:	8f e9       	ldi	r24, 0x9F	; 159
    1218:	9f e0       	ldi	r25, 0x0F	; 15
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <Lcd_Init+0x40>
    121e:	00 c0       	rjmp	.+0      	; 0x1220 <Lcd_Init+0x46>
    1220:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(0x01);
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	0e 94 b9 08 	call	0x1172	; 0x1172 <lcd_send_cmd>
    1228:	8f e3       	ldi	r24, 0x3F	; 63
    122a:	9f e1       	ldi	r25, 0x1F	; 31
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <Lcd_Init+0x52>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <Lcd_Init+0x58>
    1232:	00 00       	nop
    1234:	08 95       	ret

00001236 <Lcd_Write_String>:
	_delay_ms(2);
}
void Lcd_Write_String(char *str)
{
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!='\0';i++)
    1240:	c0 e0       	ldi	r28, 0x00	; 0
    1242:	d0 e0       	ldi	r29, 0x00	; 0
    1244:	03 c0       	rjmp	.+6      	; 0x124c <Lcd_Write_String+0x16>
	Lcd_Write_Char(str[i]);
    1246:	0e 94 85 08 	call	0x110a	; 0x110a <Lcd_Write_Char>
	_delay_ms(2);
}
void Lcd_Write_String(char *str)
{
	int i;
	for(i=0;str[i]!='\0';i++)
    124a:	21 96       	adiw	r28, 0x01	; 1
    124c:	f8 01       	movw	r30, r16
    124e:	ec 0f       	add	r30, r28
    1250:	fd 1f       	adc	r31, r29
    1252:	80 81       	ld	r24, Z
    1254:	81 11       	cpse	r24, r1
    1256:	f7 cf       	rjmp	.-18     	; 0x1246 <Lcd_Write_String+0x10>
	Lcd_Write_Char(str[i]);
}
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	08 95       	ret

00001262 <Lcd_Set_Cursor>:
void Lcd_Set_Cursor(unsigned char row, unsigned char col)
{
	unsigned char cmd;
	cmd = (row==1?0x80:0xC0) + col - 1;
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	11 f4       	brne	.+4      	; 0x126a <Lcd_Set_Cursor+0x8>
    1266:	80 e8       	ldi	r24, 0x80	; 128
    1268:	01 c0       	rjmp	.+2      	; 0x126c <Lcd_Set_Cursor+0xa>
    126a:	80 ec       	ldi	r24, 0xC0	; 192
    126c:	86 0f       	add	r24, r22
	lcd_send_cmd(cmd);
    126e:	81 50       	subi	r24, 0x01	; 1
    1270:	0e 94 b9 08 	call	0x1172	; 0x1172 <lcd_send_cmd>
    1274:	8f e3       	ldi	r24, 0x3F	; 63
    1276:	9f e1       	ldi	r25, 0x1F	; 31
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <Lcd_Set_Cursor+0x16>
    127c:	00 c0       	rjmp	.+0      	; 0x127e <Lcd_Set_Cursor+0x1c>
    127e:	00 00       	nop
    1280:	08 95       	ret

00001282 <Ring_Buffer_Init>:
}

uint8_t Ring_Buffer_Peek_Char(Ring_Buffer_t *handle, uint8_t *data, uint32_t position)
{
    return Ring_Buffer_Peek(handle, data, position);
}
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	fc 01       	movw	r30, r24
    1288:	71 83       	std	Z+1, r23	; 0x01
    128a:	60 83       	st	Z, r22
    128c:	43 83       	std	Z+3, r20	; 0x03
    128e:	04 83       	std	Z+4, r16	; 0x04
    1290:	15 83       	std	Z+5, r17	; 0x05
    1292:	26 83       	std	Z+6, r18	; 0x06
    1294:	37 83       	std	Z+7, r19	; 0x07
    1296:	14 86       	std	Z+12, r1	; 0x0c
    1298:	15 86       	std	Z+13, r1	; 0x0d
    129a:	16 86       	std	Z+14, r1	; 0x0e
    129c:	17 86       	std	Z+15, r1	; 0x0f
    129e:	10 86       	std	Z+8, r1	; 0x08
    12a0:	11 86       	std	Z+9, r1	; 0x09
    12a2:	12 86       	std	Z+10, r1	; 0x0a
    12a4:	13 86       	std	Z+11, r1	; 0x0b
    12a6:	12 82       	std	Z+2, r1	; 0x02
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	08 95       	ret

000012ae <Ring_Buffer_Is_Full>:
    12ae:	fc 01       	movw	r30, r24
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	08 95       	ret

000012b4 <Ring_Buffer_Get_Count>:
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	ec 01       	movw	r28, r24
    12be:	0e 94 57 09 	call	0x12ae	; 0x12ae <Ring_Buffer_Is_Full>
    12c2:	88 23       	and	r24, r24
    12c4:	29 f0       	breq	.+10     	; 0x12d0 <Ring_Buffer_Get_Count+0x1c>
    12c6:	6c 81       	ldd	r22, Y+4	; 0x04
    12c8:	7d 81       	ldd	r23, Y+5	; 0x05
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	24 c0       	rjmp	.+72     	; 0x1318 <Ring_Buffer_Get_Count+0x64>
    12d0:	88 85       	ldd	r24, Y+8	; 0x08
    12d2:	99 85       	ldd	r25, Y+9	; 0x09
    12d4:	aa 85       	ldd	r26, Y+10	; 0x0a
    12d6:	bb 85       	ldd	r27, Y+11	; 0x0b
    12d8:	4c 85       	ldd	r20, Y+12	; 0x0c
    12da:	5d 85       	ldd	r21, Y+13	; 0x0d
    12dc:	6e 85       	ldd	r22, Y+14	; 0x0e
    12de:	7f 85       	ldd	r23, Y+15	; 0x0f
    12e0:	84 17       	cp	r24, r20
    12e2:	95 07       	cpc	r25, r21
    12e4:	a6 07       	cpc	r26, r22
    12e6:	b7 07       	cpc	r27, r23
    12e8:	48 f0       	brcs	.+18     	; 0x12fc <Ring_Buffer_Get_Count+0x48>
    12ea:	8c 01       	movw	r16, r24
    12ec:	9d 01       	movw	r18, r26
    12ee:	04 1b       	sub	r16, r20
    12f0:	15 0b       	sbc	r17, r21
    12f2:	26 0b       	sbc	r18, r22
    12f4:	37 0b       	sbc	r19, r23
    12f6:	c9 01       	movw	r24, r18
    12f8:	b8 01       	movw	r22, r16
    12fa:	0e c0       	rjmp	.+28     	; 0x1318 <Ring_Buffer_Get_Count+0x64>
    12fc:	0c 81       	ldd	r16, Y+4	; 0x04
    12fe:	1d 81       	ldd	r17, Y+5	; 0x05
    1300:	2e 81       	ldd	r18, Y+6	; 0x06
    1302:	3f 81       	ldd	r19, Y+7	; 0x07
    1304:	84 1b       	sub	r24, r20
    1306:	95 0b       	sbc	r25, r21
    1308:	a6 0b       	sbc	r26, r22
    130a:	b7 0b       	sbc	r27, r23
    130c:	bc 01       	movw	r22, r24
    130e:	cd 01       	movw	r24, r26
    1310:	60 0f       	add	r22, r16
    1312:	71 1f       	adc	r23, r17
    1314:	82 1f       	adc	r24, r18
    1316:	93 1f       	adc	r25, r19
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	08 95       	ret

00001322 <Ring_Buffer_Is_Empty>:
    1322:	fc 01       	movw	r30, r24
    1324:	44 85       	ldd	r20, Z+12	; 0x0c
    1326:	55 85       	ldd	r21, Z+13	; 0x0d
    1328:	66 85       	ldd	r22, Z+14	; 0x0e
    132a:	77 85       	ldd	r23, Z+15	; 0x0f
    132c:	80 85       	ldd	r24, Z+8	; 0x08
    132e:	91 85       	ldd	r25, Z+9	; 0x09
    1330:	a2 85       	ldd	r26, Z+10	; 0x0a
    1332:	b3 85       	ldd	r27, Z+11	; 0x0b
    1334:	48 17       	cp	r20, r24
    1336:	59 07       	cpc	r21, r25
    1338:	6a 07       	cpc	r22, r26
    133a:	7b 07       	cpc	r23, r27
    133c:	29 f4       	brne	.+10     	; 0x1348 <Ring_Buffer_Is_Empty+0x26>
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	88 23       	and	r24, r24
    1342:	21 f0       	breq	.+8      	; 0x134c <Ring_Buffer_Is_Empty+0x2a>
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	08 95       	ret
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	08 95       	ret
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	08 95       	ret

00001350 <Ring_Buffer_Put>:
    1350:	8f 92       	push	r8
    1352:	9f 92       	push	r9
    1354:	af 92       	push	r10
    1356:	bf 92       	push	r11
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	ec 01       	movw	r28, r24
    1366:	8b 01       	movw	r16, r22
    1368:	e4 2e       	mov	r14, r20
    136a:	f1 2c       	mov	r15, r1
    136c:	b1 2c       	mov	r11, r1
    136e:	4c c0       	rjmp	.+152    	; 0x1408 <Ring_Buffer_Put+0xb8>
    1370:	ce 01       	movw	r24, r28
    1372:	0e 94 57 09 	call	0x12ae	; 0x12ae <Ring_Buffer_Is_Full>
    1376:	81 11       	cpse	r24, r1
    1378:	4a c0       	rjmp	.+148    	; 0x140e <Ring_Buffer_Put+0xbe>
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	18 c0       	rjmp	.+48     	; 0x13ae <Ring_Buffer_Put+0x5e>
    137e:	48 81       	ld	r20, Y
    1380:	59 81       	ldd	r21, Y+1	; 0x01
    1382:	88 84       	ldd	r8, Y+8	; 0x08
    1384:	99 84       	ldd	r9, Y+9	; 0x09
    1386:	aa 84       	ldd	r10, Y+10	; 0x0a
    1388:	bb 84       	ldd	r11, Y+11	; 0x0b
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	88 9d       	mul	r24, r8
    138e:	f0 01       	movw	r30, r0
    1390:	89 9d       	mul	r24, r9
    1392:	f0 0d       	add	r31, r0
    1394:	98 9d       	mul	r25, r8
    1396:	f0 0d       	add	r31, r0
    1398:	11 24       	eor	r1, r1
    139a:	e2 0f       	add	r30, r18
    139c:	f1 1d       	adc	r31, r1
    139e:	e4 0f       	add	r30, r20
    13a0:	f5 1f       	adc	r31, r21
    13a2:	d8 01       	movw	r26, r16
    13a4:	8c 91       	ld	r24, X
    13a6:	80 83       	st	Z, r24
    13a8:	2f 5f       	subi	r18, 0xFF	; 255
    13aa:	0f 5f       	subi	r16, 0xFF	; 255
    13ac:	1f 4f       	sbci	r17, 0xFF	; 255
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	28 17       	cp	r18, r24
    13b2:	28 f3       	brcs	.-54     	; 0x137e <Ring_Buffer_Put+0x2e>
    13b4:	88 85       	ldd	r24, Y+8	; 0x08
    13b6:	99 85       	ldd	r25, Y+9	; 0x09
    13b8:	aa 85       	ldd	r26, Y+10	; 0x0a
    13ba:	bb 85       	ldd	r27, Y+11	; 0x0b
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	a1 1d       	adc	r26, r1
    13c0:	b1 1d       	adc	r27, r1
    13c2:	88 87       	std	Y+8, r24	; 0x08
    13c4:	99 87       	std	Y+9, r25	; 0x09
    13c6:	aa 87       	std	Y+10, r26	; 0x0a
    13c8:	bb 87       	std	Y+11, r27	; 0x0b
    13ca:	4c 81       	ldd	r20, Y+4	; 0x04
    13cc:	5d 81       	ldd	r21, Y+5	; 0x05
    13ce:	6e 81       	ldd	r22, Y+6	; 0x06
    13d0:	7f 81       	ldd	r23, Y+7	; 0x07
    13d2:	84 17       	cp	r24, r20
    13d4:	95 07       	cpc	r25, r21
    13d6:	a6 07       	cpc	r26, r22
    13d8:	b7 07       	cpc	r27, r23
    13da:	21 f4       	brne	.+8      	; 0x13e4 <Ring_Buffer_Put+0x94>
    13dc:	18 86       	std	Y+8, r1	; 0x08
    13de:	19 86       	std	Y+9, r1	; 0x09
    13e0:	1a 86       	std	Y+10, r1	; 0x0a
    13e2:	1b 86       	std	Y+11, r1	; 0x0b
    13e4:	48 85       	ldd	r20, Y+8	; 0x08
    13e6:	59 85       	ldd	r21, Y+9	; 0x09
    13e8:	6a 85       	ldd	r22, Y+10	; 0x0a
    13ea:	7b 85       	ldd	r23, Y+11	; 0x0b
    13ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    13ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    13f0:	ae 85       	ldd	r26, Y+14	; 0x0e
    13f2:	bf 85       	ldd	r27, Y+15	; 0x0f
    13f4:	48 17       	cp	r20, r24
    13f6:	59 07       	cpc	r21, r25
    13f8:	6a 07       	cpc	r22, r26
    13fa:	7b 07       	cpc	r23, r27
    13fc:	11 f4       	brne	.+4      	; 0x1402 <Ring_Buffer_Put+0xb2>
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	8a 83       	std	Y+2, r24	; 0x02
    1402:	f3 94       	inc	r15
    1404:	bb 24       	eor	r11, r11
    1406:	b3 94       	inc	r11
    1408:	fe 14       	cp	r15, r14
    140a:	08 f4       	brcc	.+2      	; 0x140e <Ring_Buffer_Put+0xbe>
    140c:	b1 cf       	rjmp	.-158    	; 0x1370 <Ring_Buffer_Put+0x20>
    140e:	8b 2d       	mov	r24, r11
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	bf 90       	pop	r11
    141e:	af 90       	pop	r10
    1420:	9f 90       	pop	r9
    1422:	8f 90       	pop	r8
    1424:	08 95       	ret

00001426 <Ring_Buffer_Get>:
    1426:	8f 92       	push	r8
    1428:	9f 92       	push	r9
    142a:	af 92       	push	r10
    142c:	bf 92       	push	r11
    142e:	ef 92       	push	r14
    1430:	ff 92       	push	r15
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	ec 01       	movw	r28, r24
    143c:	8b 01       	movw	r16, r22
    143e:	e4 2e       	mov	r14, r20
    1440:	f1 2c       	mov	r15, r1
    1442:	b1 2c       	mov	r11, r1
    1444:	3e c0       	rjmp	.+124    	; 0x14c2 <Ring_Buffer_Get+0x9c>
    1446:	ce 01       	movw	r24, r28
    1448:	0e 94 91 09 	call	0x1322	; 0x1322 <Ring_Buffer_Is_Empty>
    144c:	81 11       	cpse	r24, r1
    144e:	3c c0       	rjmp	.+120    	; 0x14c8 <Ring_Buffer_Get+0xa2>
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	18 c0       	rjmp	.+48     	; 0x1484 <Ring_Buffer_Get+0x5e>
    1454:	e8 81       	ld	r30, Y
    1456:	f9 81       	ldd	r31, Y+1	; 0x01
    1458:	8c 84       	ldd	r8, Y+12	; 0x0c
    145a:	9d 84       	ldd	r9, Y+13	; 0x0d
    145c:	ae 84       	ldd	r10, Y+14	; 0x0e
    145e:	bf 84       	ldd	r11, Y+15	; 0x0f
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	28 9d       	mul	r18, r8
    1464:	c0 01       	movw	r24, r0
    1466:	29 9d       	mul	r18, r9
    1468:	90 0d       	add	r25, r0
    146a:	38 9d       	mul	r19, r8
    146c:	90 0d       	add	r25, r0
    146e:	11 24       	eor	r1, r1
    1470:	e8 0f       	add	r30, r24
    1472:	f9 1f       	adc	r31, r25
    1474:	e4 0f       	add	r30, r20
    1476:	f1 1d       	adc	r31, r1
    1478:	80 81       	ld	r24, Z
    147a:	f8 01       	movw	r30, r16
    147c:	80 83       	st	Z, r24
    147e:	4f 5f       	subi	r20, 0xFF	; 255
    1480:	0f 5f       	subi	r16, 0xFF	; 255
    1482:	1f 4f       	sbci	r17, 0xFF	; 255
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	42 17       	cp	r20, r18
    1488:	28 f3       	brcs	.-54     	; 0x1454 <Ring_Buffer_Get+0x2e>
    148a:	8c 85       	ldd	r24, Y+12	; 0x0c
    148c:	9d 85       	ldd	r25, Y+13	; 0x0d
    148e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1490:	bf 85       	ldd	r27, Y+15	; 0x0f
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	a1 1d       	adc	r26, r1
    1496:	b1 1d       	adc	r27, r1
    1498:	8c 87       	std	Y+12, r24	; 0x0c
    149a:	9d 87       	std	Y+13, r25	; 0x0d
    149c:	ae 87       	std	Y+14, r26	; 0x0e
    149e:	bf 87       	std	Y+15, r27	; 0x0f
    14a0:	1a 82       	std	Y+2, r1	; 0x02
    14a2:	4c 81       	ldd	r20, Y+4	; 0x04
    14a4:	5d 81       	ldd	r21, Y+5	; 0x05
    14a6:	6e 81       	ldd	r22, Y+6	; 0x06
    14a8:	7f 81       	ldd	r23, Y+7	; 0x07
    14aa:	84 17       	cp	r24, r20
    14ac:	95 07       	cpc	r25, r21
    14ae:	a6 07       	cpc	r26, r22
    14b0:	b7 07       	cpc	r27, r23
    14b2:	21 f4       	brne	.+8      	; 0x14bc <Ring_Buffer_Get+0x96>
    14b4:	1c 86       	std	Y+12, r1	; 0x0c
    14b6:	1d 86       	std	Y+13, r1	; 0x0d
    14b8:	1e 86       	std	Y+14, r1	; 0x0e
    14ba:	1f 86       	std	Y+15, r1	; 0x0f
    14bc:	f3 94       	inc	r15
    14be:	bb 24       	eor	r11, r11
    14c0:	b3 94       	inc	r11
    14c2:	fe 14       	cp	r15, r14
    14c4:	08 f4       	brcc	.+2      	; 0x14c8 <Ring_Buffer_Get+0xa2>
    14c6:	bf cf       	rjmp	.-130    	; 0x1446 <Ring_Buffer_Get+0x20>
    14c8:	8b 2d       	mov	r24, r11
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	bf 90       	pop	r11
    14d8:	af 90       	pop	r10
    14da:	9f 90       	pop	r9
    14dc:	8f 90       	pop	r8
    14de:	08 95       	ret

000014e0 <Ring_Buffer_Search>:
    14e0:	4f 92       	push	r4
    14e2:	5f 92       	push	r5
    14e4:	6f 92       	push	r6
    14e6:	7f 92       	push	r7
    14e8:	8f 92       	push	r8
    14ea:	9f 92       	push	r9
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	ec 01       	movw	r28, r24
    14fe:	8b 01       	movw	r16, r22
    1500:	7a 01       	movw	r14, r20
    1502:	8c 84       	ldd	r8, Y+12	; 0x0c
    1504:	9d 84       	ldd	r9, Y+13	; 0x0d
    1506:	ae 84       	ldd	r10, Y+14	; 0x0e
    1508:	bf 84       	ldd	r11, Y+15	; 0x0f
    150a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <Ring_Buffer_Get_Count>
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	3c c0       	rjmp	.+120    	; 0x158a <Ring_Buffer_Search+0xaa>
    1512:	4a 2f       	mov	r20, r26
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	f8 01       	movw	r30, r16
    1518:	e4 0f       	add	r30, r20
    151a:	f5 1f       	adc	r31, r21
    151c:	b0 81       	ld	r27, Z
    151e:	88 81       	ld	r24, Y
    1520:	99 81       	ldd	r25, Y+1	; 0x01
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	28 9d       	mul	r18, r8
    1526:	b0 01       	movw	r22, r0
    1528:	29 9d       	mul	r18, r9
    152a:	70 0d       	add	r23, r0
    152c:	38 9d       	mul	r19, r8
    152e:	70 0d       	add	r23, r0
    1530:	11 24       	eor	r1, r1
    1532:	84 0f       	add	r24, r20
    1534:	95 1f       	adc	r25, r21
    1536:	86 0f       	add	r24, r22
    1538:	97 1f       	adc	r25, r23
    153a:	fc 01       	movw	r30, r24
    153c:	80 81       	ld	r24, Z
    153e:	b8 13       	cpse	r27, r24
    1540:	08 c0       	rjmp	.+16     	; 0x1552 <Ring_Buffer_Search+0x72>
    1542:	af 5f       	subi	r26, 0xFF	; 255
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <Ring_Buffer_Search+0x68>
    1546:	a0 e0       	ldi	r26, 0x00	; 0
    1548:	2b 81       	ldd	r18, Y+3	; 0x03
    154a:	a2 17       	cp	r26, r18
    154c:	10 f3       	brcs	.-60     	; 0x1512 <Ring_Buffer_Search+0x32>
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <Ring_Buffer_Search+0x74>
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	22 23       	and	r18, r18
    1556:	31 f0       	breq	.+12     	; 0x1564 <Ring_Buffer_Search+0x84>
    1558:	f7 01       	movw	r30, r14
    155a:	80 82       	st	Z, r8
    155c:	91 82       	std	Z+1, r9	; 0x01
    155e:	a2 82       	std	Z+2, r10	; 0x02
    1560:	b3 82       	std	Z+3, r11	; 0x03
    1562:	1e c0       	rjmp	.+60     	; 0x15a0 <Ring_Buffer_Search+0xc0>
    1564:	ff ef       	ldi	r31, 0xFF	; 255
    1566:	8f 1a       	sub	r8, r31
    1568:	9f 0a       	sbc	r9, r31
    156a:	af 0a       	sbc	r10, r31
    156c:	bf 0a       	sbc	r11, r31
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	9d 81       	ldd	r25, Y+5	; 0x05
    1572:	ae 81       	ldd	r26, Y+6	; 0x06
    1574:	bf 81       	ldd	r27, Y+7	; 0x07
    1576:	88 16       	cp	r8, r24
    1578:	99 06       	cpc	r9, r25
    157a:	aa 06       	cpc	r10, r26
    157c:	bb 06       	cpc	r11, r27
    157e:	19 f4       	brne	.+6      	; 0x1586 <Ring_Buffer_Search+0xa6>
    1580:	81 2c       	mov	r8, r1
    1582:	91 2c       	mov	r9, r1
    1584:	54 01       	movw	r10, r8
    1586:	c3 01       	movw	r24, r6
    1588:	b2 01       	movw	r22, r4
    158a:	2b 01       	movw	r4, r22
    158c:	3c 01       	movw	r6, r24
    158e:	31 e0       	ldi	r19, 0x01	; 1
    1590:	43 1a       	sub	r4, r19
    1592:	51 08       	sbc	r5, r1
    1594:	61 08       	sbc	r6, r1
    1596:	71 08       	sbc	r7, r1
    1598:	67 2b       	or	r22, r23
    159a:	68 2b       	or	r22, r24
    159c:	69 2b       	or	r22, r25
    159e:	99 f6       	brne	.-90     	; 0x1546 <Ring_Buffer_Search+0x66>
    15a0:	82 2f       	mov	r24, r18
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	bf 90       	pop	r11
    15b0:	af 90       	pop	r10
    15b2:	9f 90       	pop	r9
    15b4:	8f 90       	pop	r8
    15b6:	7f 90       	pop	r7
    15b8:	6f 90       	pop	r6
    15ba:	5f 90       	pop	r5
    15bc:	4f 90       	pop	r4
    15be:	08 95       	ret

000015c0 <Ring_Buffer_Put_Char>:
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	1f 92       	push	r1
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	69 83       	std	Y+1, r22	; 0x01
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	be 01       	movw	r22, r28
    15d0:	6f 5f       	subi	r22, 0xFF	; 255
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	0e 94 a8 09 	call	0x1350	; 0x1350 <Ring_Buffer_Put>
    15d8:	0f 90       	pop	r0
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	08 95       	ret

000015e0 <Ring_Buffer_Search_Char>:

uint8_t Ring_Buffer_Search_Char(Ring_Buffer_t *handle, uint8_t data, uint32_t *position)
{
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	1f 92       	push	r1
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	69 83       	std	Y+1, r22	; 0x01
    return Ring_Buffer_Search(handle, &data, position);
    15ec:	be 01       	movw	r22, r28
    15ee:	6f 5f       	subi	r22, 0xFF	; 255
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <Ring_Buffer_Search>
}
    15f6:	0f 90       	pop	r0
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	08 95       	ret

000015fe <per_uart_init>:
{
	bsp_uart_write_char(ch);
}
void per_uart_send_string(char *str)
{
	bsp_uart_send_string(str);
    15fe:	08 95       	ret

00001600 <per_uart_set_function_handle>:
}
void per_uart_set_function_handle(bsp_uart_function_handle_t pfun)
{
	bsp_uart_set_function_handle(pfun);
    1600:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <bsp_uart_set_function_handle>
    1604:	08 95       	ret

00001606 <task_add>:
  * @brief 
  * @param  None
  * @retval None
  */
task_t *task_add(task_mode_t mode, unsigned int timeout, void *callback)
{
    1606:	8f 92       	push	r8
    1608:	9f 92       	push	r9
    160a:	bf 92       	push	r11
    160c:	cf 92       	push	r12
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
	if (tasks.num_of_task >= MAX_NUM_OF_TASK) { return 0; }
    161c:	c0 91 f6 03 	lds	r28, 0x03F6	; 0x8003f6 <tasks>
    1620:	d0 91 f7 03 	lds	r29, 0x03F7	; 0x8003f7 <tasks+0x1>
    1624:	c9 31       	cpi	r28, 0x19	; 25
    1626:	d1 05       	cpc	r29, r1
    1628:	08 f0       	brcs	.+2      	; 0x162c <task_add+0x26>
    162a:	4a c0       	rjmp	.+148    	; 0x16c0 <task_add+0xba>
    162c:	7a 01       	movw	r14, r20
    162e:	4b 01       	movw	r8, r22
    1630:	b8 2e       	mov	r11, r24

	unsigned short new_task_id = tasks.num_of_task;
	tasks.list_of_task[new_task_id].time.start_at = timer_get();
    1632:	6e 01       	movw	r12, r28
    1634:	cc 0c       	add	r12, r12
    1636:	dd 1c       	adc	r13, r13
    1638:	86 01       	movw	r16, r12
    163a:	0c 0f       	add	r16, r28
    163c:	1d 1f       	adc	r17, r29
    163e:	00 0f       	add	r16, r16
    1640:	11 1f       	adc	r17, r17
    1642:	00 0f       	add	r16, r16
    1644:	11 1f       	adc	r17, r17
    1646:	07 50       	subi	r16, 0x07	; 7
    1648:	1c 4f       	sbci	r17, 0xFC	; 252
    164a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <timer_get>
    164e:	f8 01       	movw	r30, r16
    1650:	20 83       	st	Z, r18
    1652:	31 83       	std	Z+1, r19	; 0x01
    1654:	42 83       	std	Z+2, r20	; 0x02
    1656:	53 83       	std	Z+3, r21	; 0x03
    1658:	64 83       	std	Z+4, r22	; 0x04
    165a:	75 83       	std	Z+5, r23	; 0x05
	tasks.list_of_task[new_task_id].time.timeout = timeout;
    165c:	86 ef       	ldi	r24, 0xF6	; 246
    165e:	93 e0       	ldi	r25, 0x03	; 3
    1660:	d6 01       	movw	r26, r12
    1662:	ac 0f       	add	r26, r28
    1664:	bd 1f       	adc	r27, r29
    1666:	aa 0f       	add	r26, r26
    1668:	bb 1f       	adc	r27, r27
    166a:	aa 0f       	add	r26, r26
    166c:	bb 1f       	adc	r27, r27
    166e:	aa 50       	subi	r26, 0x0A	; 10
    1670:	bc 4f       	sbci	r27, 0xFC	; 252
    1672:	1a 96       	adiw	r26, 0x0a	; 10
    1674:	9c 92       	st	X, r9
    1676:	8e 92       	st	-X, r8
    1678:	19 97       	sbiw	r26, 0x09	; 9
	tasks.list_of_task[new_task_id].callback = callback;
    167a:	9e 01       	movw	r18, r28
    167c:	2f 5f       	subi	r18, 0xFF	; 255
    167e:	3f 4f       	sbci	r19, 0xFF	; 255
    1680:	f9 01       	movw	r30, r18
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	e2 0f       	add	r30, r18
    1688:	f3 1f       	adc	r31, r19
    168a:	ee 0f       	add	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	ea 50       	subi	r30, 0x0A	; 10
    1694:	fc 4f       	sbci	r31, 0xFC	; 252
    1696:	f1 82       	std	Z+1, r15	; 0x01
    1698:	e0 82       	st	Z, r14
	tasks.list_of_task[new_task_id].mode = mode;
    169a:	12 96       	adiw	r26, 0x02	; 2
    169c:	bc 92       	st	X, r11
	tasks.num_of_task += 1;
    169e:	fc 01       	movw	r30, r24
    16a0:	20 81       	ld	r18, Z
    16a2:	31 81       	ldd	r19, Z+1	; 0x01
    16a4:	2f 5f       	subi	r18, 0xFF	; 255
    16a6:	3f 4f       	sbci	r19, 0xFF	; 255
    16a8:	31 83       	std	Z+1, r19	; 0x01
    16aa:	20 83       	st	Z, r18
	return &(tasks.list_of_task[new_task_id]);
    16ac:	c6 01       	movw	r24, r12
    16ae:	8c 0f       	add	r24, r28
    16b0:	9d 1f       	adc	r25, r29
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	88 50       	subi	r24, 0x08	; 8
    16bc:	9c 4f       	sbci	r25, 0xFC	; 252
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <task_add+0xbe>
  * @param  None
  * @retval None
  */
task_t *task_add(task_mode_t mode, unsigned int timeout, void *callback)
{
	if (tasks.num_of_task >= MAX_NUM_OF_TASK) { return 0; }
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
	tasks.list_of_task[new_task_id].time.timeout = timeout;
	tasks.list_of_task[new_task_id].callback = callback;
	tasks.list_of_task[new_task_id].mode = mode;
	tasks.num_of_task += 1;
	return &(tasks.list_of_task[new_task_id]);
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	bf 90       	pop	r11
    16d6:	9f 90       	pop	r9
    16d8:	8f 90       	pop	r8
    16da:	08 95       	ret

000016dc <task_remove>:
  * @param  None
  * @retval None
  */
void task_remove(task_t *task)
{
	for (unsigned short i = 0; i < tasks.num_of_task; i++)
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	39 c0       	rjmp	.+114    	; 0x1754 <task_remove+0x78>
	{
		if (&(tasks.list_of_task[i]) != task)
    16e2:	b9 01       	movw	r22, r18
    16e4:	66 0f       	add	r22, r22
    16e6:	77 1f       	adc	r23, r23
    16e8:	62 0f       	add	r22, r18
    16ea:	73 1f       	adc	r23, r19
    16ec:	66 0f       	add	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	66 0f       	add	r22, r22
    16f2:	77 1f       	adc	r23, r23
    16f4:	68 50       	subi	r22, 0x08	; 8
    16f6:	7c 4f       	sbci	r23, 0xFC	; 252
    16f8:	68 17       	cp	r22, r24
    16fa:	79 07       	cpc	r23, r25
    16fc:	09 f1       	breq	.+66     	; 0x1740 <task_remove+0x64>
  * @param  None
  * @retval None
  */
void task_remove(task_t *task)
{
	for (unsigned short i = 0; i < tasks.num_of_task; i++)
    16fe:	2f 5f       	subi	r18, 0xFF	; 255
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
    1702:	28 c0       	rjmp	.+80     	; 0x1754 <task_remove+0x78>
		{
			continue;
		}
		for (unsigned short j = i; j < tasks.num_of_task - 1; j++)
		{
			tasks.list_of_task[j] = tasks.list_of_task[j + 1];
    1704:	c9 01       	movw	r24, r18
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	d9 01       	movw	r26, r18
    170a:	aa 0f       	add	r26, r26
    170c:	bb 1f       	adc	r27, r27
    170e:	a2 0f       	add	r26, r18
    1710:	b3 1f       	adc	r27, r19
    1712:	aa 0f       	add	r26, r26
    1714:	bb 1f       	adc	r27, r27
    1716:	aa 0f       	add	r26, r26
    1718:	bb 1f       	adc	r27, r27
    171a:	a8 50       	subi	r26, 0x08	; 8
    171c:	bc 4f       	sbci	r27, 0xFC	; 252
    171e:	fc 01       	movw	r30, r24
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	e8 0f       	add	r30, r24
    1726:	f9 1f       	adc	r31, r25
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	e8 50       	subi	r30, 0x08	; 8
    1732:	fc 4f       	sbci	r31, 0xFC	; 252
    1734:	2c e0       	ldi	r18, 0x0C	; 12
    1736:	01 90       	ld	r0, Z+
    1738:	0d 92       	st	X+, r0
    173a:	2a 95       	dec	r18
    173c:	e1 f7       	brne	.-8      	; 0x1736 <task_remove+0x5a>
	{
		if (&(tasks.list_of_task[i]) != task)
		{
			continue;
		}
		for (unsigned short j = i; j < tasks.num_of_task - 1; j++)
    173e:	9c 01       	movw	r18, r24
    1740:	ca 01       	movw	r24, r20
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	28 17       	cp	r18, r24
    1746:	39 07       	cpc	r19, r25
    1748:	e8 f2       	brcs	.-70     	; 0x1704 <task_remove+0x28>
		{
			tasks.list_of_task[j] = tasks.list_of_task[j + 1];
		}
		tasks.num_of_task -= 1;
    174a:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <tasks+0x1>
    174e:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <tasks>
		break;
    1752:	08 95       	ret
  * @param  None
  * @retval None
  */
void task_remove(task_t *task)
{
	for (unsigned short i = 0; i < tasks.num_of_task; i++)
    1754:	40 91 f6 03 	lds	r20, 0x03F6	; 0x8003f6 <tasks>
    1758:	50 91 f7 03 	lds	r21, 0x03F7	; 0x8003f7 <tasks+0x1>
    175c:	24 17       	cp	r18, r20
    175e:	35 07       	cpc	r19, r21
    1760:	08 f4       	brcc	.+2      	; 0x1764 <task_remove+0x88>
    1762:	bf cf       	rjmp	.-130    	; 0x16e2 <task_remove+0x6>
    1764:	08 95       	ret

00001766 <task_loop>:
/******************************************************************************/
/******************************************************************************/
/*                             Module routines                                */
/******************************************************************************/
void task_loop(void)
{
    1766:	cf 92       	push	r12
    1768:	df 92       	push	r13
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
	for (unsigned char i = 0; i < tasks.num_of_task; i++)
    1774:	10 e0       	ldi	r17, 0x00	; 0
    1776:	48 c0       	rjmp	.+144    	; 0x1808 <task_loop+0xa2>
	{
		if (tasks.list_of_task[i].time.timeout > timer_get_diff_milis_from_now(tasks.list_of_task[i].time.start_at)){ continue;	}
    1778:	c1 2f       	mov	r28, r17
    177a:	d0 e0       	ldi	r29, 0x00	; 0
    177c:	fe 01       	movw	r30, r28
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	df 01       	movw	r26, r30
    1784:	ac 0f       	add	r26, r28
    1786:	bd 1f       	adc	r27, r29
    1788:	aa 0f       	add	r26, r26
    178a:	bb 1f       	adc	r27, r27
    178c:	aa 0f       	add	r26, r26
    178e:	bb 1f       	adc	r27, r27
    1790:	aa 50       	subi	r26, 0x0A	; 10
    1792:	bc 4f       	sbci	r27, 0xFC	; 252
    1794:	19 96       	adiw	r26, 0x09	; 9
    1796:	cd 90       	ld	r12, X+
    1798:	dc 90       	ld	r13, X
    179a:	1a 97       	sbiw	r26, 0x0a	; 10
    179c:	e1 2c       	mov	r14, r1
    179e:	f1 2c       	mov	r15, r1
    17a0:	ec 0f       	add	r30, r28
    17a2:	fd 1f       	adc	r31, r29
    17a4:	ee 0f       	add	r30, r30
    17a6:	ff 1f       	adc	r31, r31
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	e7 50       	subi	r30, 0x07	; 7
    17ae:	fc 4f       	sbci	r31, 0xFC	; 252
    17b0:	40 81       	ld	r20, Z
    17b2:	51 81       	ldd	r21, Z+1	; 0x01
    17b4:	62 81       	ldd	r22, Z+2	; 0x02
    17b6:	73 81       	ldd	r23, Z+3	; 0x03
    17b8:	84 81       	ldd	r24, Z+4	; 0x04
    17ba:	95 81       	ldd	r25, Z+5	; 0x05
    17bc:	0e 94 89 0c 	call	0x1912	; 0x1912 <timer_get_diff_milis_from_now>
    17c0:	6c 15       	cp	r22, r12
    17c2:	7d 05       	cpc	r23, r13
    17c4:	8e 05       	cpc	r24, r14
    17c6:	9f 05       	cpc	r25, r15
    17c8:	f4 f0       	brlt	.+60     	; 0x1806 <task_loop+0xa0>
		tasks.list_of_task[i].enabled = true;	
    17ca:	ce 01       	movw	r24, r28
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	fc 01       	movw	r30, r24
    17d2:	ec 0f       	add	r30, r28
    17d4:	fd 1f       	adc	r31, r29
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31
    17de:	ea 50       	subi	r30, 0x0A	; 10
    17e0:	fc 4f       	sbci	r31, 0xFC	; 252
    17e2:	21 e0       	ldi	r18, 0x01	; 1
    17e4:	23 87       	std	Z+11, r18	; 0x0b
		tasks.list_of_task[i].time.start_at = timer_get();
    17e6:	c8 0f       	add	r28, r24
    17e8:	d9 1f       	adc	r29, r25
    17ea:	cc 0f       	add	r28, r28
    17ec:	dd 1f       	adc	r29, r29
    17ee:	cc 0f       	add	r28, r28
    17f0:	dd 1f       	adc	r29, r29
    17f2:	c7 50       	subi	r28, 0x07	; 7
    17f4:	dc 4f       	sbci	r29, 0xFC	; 252
    17f6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <timer_get>
    17fa:	28 83       	st	Y, r18
    17fc:	39 83       	std	Y+1, r19	; 0x01
    17fe:	4a 83       	std	Y+2, r20	; 0x02
    1800:	5b 83       	std	Y+3, r21	; 0x03
    1802:	6c 83       	std	Y+4, r22	; 0x04
    1804:	7d 83       	std	Y+5, r23	; 0x05
/******************************************************************************/
/*                             Module routines                                */
/******************************************************************************/
void task_loop(void)
{
	for (unsigned char i = 0; i < tasks.num_of_task; i++)
    1806:	1f 5f       	subi	r17, 0xFF	; 255
    1808:	81 2f       	mov	r24, r17
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	20 91 f6 03 	lds	r18, 0x03F6	; 0x8003f6 <tasks>
    1810:	30 91 f7 03 	lds	r19, 0x03F7	; 0x8003f7 <tasks+0x1>
    1814:	82 17       	cp	r24, r18
    1816:	93 07       	cpc	r25, r19
    1818:	08 f4       	brcc	.+2      	; 0x181c <task_loop+0xb6>
    181a:	ae cf       	rjmp	.-164    	; 0x1778 <task_loop+0x12>
    181c:	10 e0       	ldi	r17, 0x00	; 0
    181e:	46 c0       	rjmp	.+140    	; 0x18ac <task_loop+0x146>
		tasks.list_of_task[i].time.start_at = timer_get();
	}

	for (unsigned char i = 0; i < tasks.num_of_task; i++)
	{
		if (false == tasks.list_of_task[i].enabled) {	continue;	}
    1820:	c1 2f       	mov	r28, r17
    1822:	d0 e0       	ldi	r29, 0x00	; 0
    1824:	fe 01       	movw	r30, r28
    1826:	ee 0f       	add	r30, r30
    1828:	ff 1f       	adc	r31, r31
    182a:	ec 0f       	add	r30, r28
    182c:	fd 1f       	adc	r31, r29
    182e:	ee 0f       	add	r30, r30
    1830:	ff 1f       	adc	r31, r31
    1832:	ee 0f       	add	r30, r30
    1834:	ff 1f       	adc	r31, r31
    1836:	ea 50       	subi	r30, 0x0A	; 10
    1838:	fc 4f       	sbci	r31, 0xFC	; 252
    183a:	83 85       	ldd	r24, Z+11	; 0x0b
    183c:	88 23       	and	r24, r24
    183e:	a9 f1       	breq	.+106    	; 0x18aa <task_loop+0x144>

		((void (*)(void *))(tasks.list_of_task[i].callback))((void *)&(tasks.list_of_task[i].time.timeout));
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	fc 01       	movw	r30, r24
    1846:	ee 0f       	add	r30, r30
    1848:	ff 1f       	adc	r31, r31
    184a:	e8 0f       	add	r30, r24
    184c:	f9 1f       	adc	r31, r25
    184e:	ee 0f       	add	r30, r30
    1850:	ff 1f       	adc	r31, r31
    1852:	ee 0f       	add	r30, r30
    1854:	ff 1f       	adc	r31, r31
    1856:	ea 50       	subi	r30, 0x0A	; 10
    1858:	fc 4f       	sbci	r31, 0xFC	; 252
    185a:	01 90       	ld	r0, Z+
    185c:	f0 81       	ld	r31, Z
    185e:	e0 2d       	mov	r30, r0
    1860:	7e 01       	movw	r14, r28
    1862:	ee 0c       	add	r14, r14
    1864:	ff 1c       	adc	r15, r15
    1866:	c7 01       	movw	r24, r14
    1868:	8c 0f       	add	r24, r28
    186a:	9d 1f       	adc	r25, r29
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	81 50       	subi	r24, 0x01	; 1
    1876:	9c 4f       	sbci	r25, 0xFC	; 252
    1878:	09 95       	icall
		tasks.list_of_task[i].enabled = false;
    187a:	f7 01       	movw	r30, r14
    187c:	ec 0f       	add	r30, r28
    187e:	fd 1f       	adc	r31, r29
    1880:	ee 0f       	add	r30, r30
    1882:	ff 1f       	adc	r31, r31
    1884:	ee 0f       	add	r30, r30
    1886:	ff 1f       	adc	r31, r31
    1888:	ea 50       	subi	r30, 0x0A	; 10
    188a:	fc 4f       	sbci	r31, 0xFC	; 252
    188c:	13 86       	std	Z+11, r1	; 0x0b
		
		if (TASK_SINGLE == tasks.list_of_task[i].mode)	
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	59 f4       	brne	.+22     	; 0x18aa <task_loop+0x144>
		{
			task_remove(&(tasks.list_of_task[i]));
    1894:	c7 01       	movw	r24, r14
    1896:	8c 0f       	add	r24, r28
    1898:	9d 1f       	adc	r25, r29
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	88 50       	subi	r24, 0x08	; 8
    18a4:	9c 4f       	sbci	r25, 0xFC	; 252
    18a6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <task_remove>
		if (tasks.list_of_task[i].time.timeout > timer_get_diff_milis_from_now(tasks.list_of_task[i].time.start_at)){ continue;	}
		tasks.list_of_task[i].enabled = true;	
		tasks.list_of_task[i].time.start_at = timer_get();
	}

	for (unsigned char i = 0; i < tasks.num_of_task; i++)
    18aa:	1f 5f       	subi	r17, 0xFF	; 255
    18ac:	81 2f       	mov	r24, r17
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	20 91 f6 03 	lds	r18, 0x03F6	; 0x8003f6 <tasks>
    18b4:	30 91 f7 03 	lds	r19, 0x03F7	; 0x8003f7 <tasks+0x1>
    18b8:	82 17       	cp	r24, r18
    18ba:	93 07       	cpc	r25, r19
    18bc:	08 f4       	brcc	.+2      	; 0x18c0 <task_loop+0x15a>
    18be:	b0 cf       	rjmp	.-160    	; 0x1820 <task_loop+0xba>
		if (TASK_SINGLE == tasks.list_of_task[i].mode)	
		{
			task_remove(&(tasks.list_of_task[i]));
		}
	}
}
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	cf 90       	pop	r12
    18ce:	08 95       	ret

000018d0 <timer_get>:
  // check fail condition
  // get time in second
  _diff_sec = timer.sec - timx.sec;
  
  return _diff_sec;
}
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <timer_get+0x6>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <timer_get+0x8>
    18d8:	00 d0       	rcall	.+0      	; 0x18da <timer_get+0xa>
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	86 e0       	ldi	r24, 0x06	; 6
    18e0:	e4 e2       	ldi	r30, 0x24	; 36
    18e2:	f5 e0       	ldi	r31, 0x05	; 5
    18e4:	de 01       	movw	r26, r28
    18e6:	11 96       	adiw	r26, 0x01	; 1
    18e8:	01 90       	ld	r0, Z+
    18ea:	0d 92       	st	X+, r0
    18ec:	8a 95       	dec	r24
    18ee:	e1 f7       	brne	.-8      	; 0x18e8 <timer_get+0x18>
    18f0:	29 81       	ldd	r18, Y+1	; 0x01
    18f2:	3a 81       	ldd	r19, Y+2	; 0x02
    18f4:	4b 81       	ldd	r20, Y+3	; 0x03
    18f6:	5c 81       	ldd	r21, Y+4	; 0x04
    18f8:	6d 81       	ldd	r22, Y+5	; 0x05
    18fa:	7e 81       	ldd	r23, Y+6	; 0x06
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	26 96       	adiw	r28, 0x06	; 6
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <timer_get_diff_milis_from_now>:
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	00 d0       	rcall	.+0      	; 0x1918 <timer_get_diff_milis_from_now+0x6>
    1918:	00 d0       	rcall	.+0      	; 0x191a <timer_get_diff_milis_from_now+0x8>
    191a:	00 d0       	rcall	.+0      	; 0x191c <timer_get_diff_milis_from_now+0xa>
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	49 83       	std	Y+1, r20	; 0x01
    1922:	5a 83       	std	Y+2, r21	; 0x02
    1924:	6b 83       	std	Y+3, r22	; 0x03
    1926:	7c 83       	std	Y+4, r23	; 0x04
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	9e 83       	std	Y+6, r25	; 0x06
    192c:	e4 e2       	ldi	r30, 0x24	; 36
    192e:	f5 e0       	ldi	r31, 0x05	; 5
    1930:	42 81       	ldd	r20, Z+2	; 0x02
    1932:	53 81       	ldd	r21, Z+3	; 0x03
    1934:	64 81       	ldd	r22, Z+4	; 0x04
    1936:	75 81       	ldd	r23, Z+5	; 0x05
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	ad 81       	ldd	r26, Y+5	; 0x05
    193e:	be 81       	ldd	r27, Y+6	; 0x06
    1940:	9a 01       	movw	r18, r20
    1942:	ab 01       	movw	r20, r22
    1944:	28 1b       	sub	r18, r24
    1946:	39 0b       	sbc	r19, r25
    1948:	4a 0b       	sbc	r20, r26
    194a:	5b 0b       	sbc	r21, r27
    194c:	a8 ee       	ldi	r26, 0xE8	; 232
    194e:	b3 e0       	ldi	r27, 0x03	; 3
    1950:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__muluhisi3>
    1954:	20 81       	ld	r18, Z
    1956:	31 81       	ldd	r19, Z+1	; 0x01
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	82 0f       	add	r24, r18
    195e:	93 1f       	adc	r25, r19
    1960:	a1 1d       	adc	r26, r1
    1962:	b1 1d       	adc	r27, r1
    1964:	29 81       	ldd	r18, Y+1	; 0x01
    1966:	3a 81       	ldd	r19, Y+2	; 0x02
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	62 1b       	sub	r22, r18
    196e:	73 0b       	sbc	r23, r19
    1970:	81 09       	sbc	r24, r1
    1972:	91 09       	sbc	r25, r1
    1974:	26 96       	adiw	r28, 0x06	; 6
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

00001986 <timer_handler>:
/*                         Module Interrupt Handle                            */
/******************************************************************************/
void timer_handler(void *pv_context)
{
  // update timer;
  timer.milis += 1;
    1986:	e4 e2       	ldi	r30, 0x24	; 36
    1988:	f5 e0       	ldi	r31, 0x05	; 5
    198a:	80 81       	ld	r24, Z
    198c:	91 81       	ldd	r25, Z+1	; 0x01
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	80 83       	st	Z, r24

  // check milisecond timeout
  if (timer.milis < 1000){ return; }
    1994:	88 3e       	cpi	r24, 0xE8	; 232
    1996:	93 40       	sbci	r25, 0x03	; 3
    1998:	68 f0       	brcs	.+26     	; 0x19b4 <timer_handler+0x2e>

  // update second if milisecond reach its limit
  timer.sec += 1;
    199a:	82 81       	ldd	r24, Z+2	; 0x02
    199c:	93 81       	ldd	r25, Z+3	; 0x03
    199e:	a4 81       	ldd	r26, Z+4	; 0x04
    19a0:	b5 81       	ldd	r27, Z+5	; 0x05
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	a1 1d       	adc	r26, r1
    19a6:	b1 1d       	adc	r27, r1
    19a8:	82 83       	std	Z+2, r24	; 0x02
    19aa:	93 83       	std	Z+3, r25	; 0x03
    19ac:	a4 83       	std	Z+4, r26	; 0x04
    19ae:	b5 83       	std	Z+5, r27	; 0x05
  timer.milis = 0;
    19b0:	11 82       	std	Z+1, r1	; 0x01
    19b2:	10 82       	st	Z, r1
    19b4:	08 95       	ret

000019b6 <__fixunssfsi>:
    19b6:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__fp_splitA>
    19ba:	88 f0       	brcs	.+34     	; 0x19de <__fixunssfsi+0x28>
    19bc:	9f 57       	subi	r25, 0x7F	; 127
    19be:	98 f0       	brcs	.+38     	; 0x19e6 <__fixunssfsi+0x30>
    19c0:	b9 2f       	mov	r27, r25
    19c2:	99 27       	eor	r25, r25
    19c4:	b7 51       	subi	r27, 0x17	; 23
    19c6:	b0 f0       	brcs	.+44     	; 0x19f4 <__fixunssfsi+0x3e>
    19c8:	e1 f0       	breq	.+56     	; 0x1a02 <__fixunssfsi+0x4c>
    19ca:	66 0f       	add	r22, r22
    19cc:	77 1f       	adc	r23, r23
    19ce:	88 1f       	adc	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	1a f0       	brmi	.+6      	; 0x19da <__fixunssfsi+0x24>
    19d4:	ba 95       	dec	r27
    19d6:	c9 f7       	brne	.-14     	; 0x19ca <__fixunssfsi+0x14>
    19d8:	14 c0       	rjmp	.+40     	; 0x1a02 <__fixunssfsi+0x4c>
    19da:	b1 30       	cpi	r27, 0x01	; 1
    19dc:	91 f0       	breq	.+36     	; 0x1a02 <__fixunssfsi+0x4c>
    19de:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__fp_zero>
    19e2:	b1 e0       	ldi	r27, 0x01	; 1
    19e4:	08 95       	ret
    19e6:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_zero>
    19ea:	67 2f       	mov	r22, r23
    19ec:	78 2f       	mov	r23, r24
    19ee:	88 27       	eor	r24, r24
    19f0:	b8 5f       	subi	r27, 0xF8	; 248
    19f2:	39 f0       	breq	.+14     	; 0x1a02 <__fixunssfsi+0x4c>
    19f4:	b9 3f       	cpi	r27, 0xF9	; 249
    19f6:	cc f3       	brlt	.-14     	; 0x19ea <__fixunssfsi+0x34>
    19f8:	86 95       	lsr	r24
    19fa:	77 95       	ror	r23
    19fc:	67 95       	ror	r22
    19fe:	b3 95       	inc	r27
    1a00:	d9 f7       	brne	.-10     	; 0x19f8 <__fixunssfsi+0x42>
    1a02:	3e f4       	brtc	.+14     	; 0x1a12 <__fixunssfsi+0x5c>
    1a04:	90 95       	com	r25
    1a06:	80 95       	com	r24
    1a08:	70 95       	com	r23
    1a0a:	61 95       	neg	r22
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	08 95       	ret

00001a14 <__floatunsisf>:
    1a14:	e8 94       	clt
    1a16:	09 c0       	rjmp	.+18     	; 0x1a2a <__floatsisf+0x12>

00001a18 <__floatsisf>:
    1a18:	97 fb       	bst	r25, 7
    1a1a:	3e f4       	brtc	.+14     	; 0x1a2a <__floatsisf+0x12>
    1a1c:	90 95       	com	r25
    1a1e:	80 95       	com	r24
    1a20:	70 95       	com	r23
    1a22:	61 95       	neg	r22
    1a24:	7f 4f       	sbci	r23, 0xFF	; 255
    1a26:	8f 4f       	sbci	r24, 0xFF	; 255
    1a28:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2a:	99 23       	and	r25, r25
    1a2c:	a9 f0       	breq	.+42     	; 0x1a58 <__floatsisf+0x40>
    1a2e:	f9 2f       	mov	r31, r25
    1a30:	96 e9       	ldi	r25, 0x96	; 150
    1a32:	bb 27       	eor	r27, r27
    1a34:	93 95       	inc	r25
    1a36:	f6 95       	lsr	r31
    1a38:	87 95       	ror	r24
    1a3a:	77 95       	ror	r23
    1a3c:	67 95       	ror	r22
    1a3e:	b7 95       	ror	r27
    1a40:	f1 11       	cpse	r31, r1
    1a42:	f8 cf       	rjmp	.-16     	; 0x1a34 <__floatsisf+0x1c>
    1a44:	fa f4       	brpl	.+62     	; 0x1a84 <__floatsisf+0x6c>
    1a46:	bb 0f       	add	r27, r27
    1a48:	11 f4       	brne	.+4      	; 0x1a4e <__floatsisf+0x36>
    1a4a:	60 ff       	sbrs	r22, 0
    1a4c:	1b c0       	rjmp	.+54     	; 0x1a84 <__floatsisf+0x6c>
    1a4e:	6f 5f       	subi	r22, 0xFF	; 255
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	8f 4f       	sbci	r24, 0xFF	; 255
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	16 c0       	rjmp	.+44     	; 0x1a84 <__floatsisf+0x6c>
    1a58:	88 23       	and	r24, r24
    1a5a:	11 f0       	breq	.+4      	; 0x1a60 <__floatsisf+0x48>
    1a5c:	96 e9       	ldi	r25, 0x96	; 150
    1a5e:	11 c0       	rjmp	.+34     	; 0x1a82 <__floatsisf+0x6a>
    1a60:	77 23       	and	r23, r23
    1a62:	21 f0       	breq	.+8      	; 0x1a6c <__floatsisf+0x54>
    1a64:	9e e8       	ldi	r25, 0x8E	; 142
    1a66:	87 2f       	mov	r24, r23
    1a68:	76 2f       	mov	r23, r22
    1a6a:	05 c0       	rjmp	.+10     	; 0x1a76 <__floatsisf+0x5e>
    1a6c:	66 23       	and	r22, r22
    1a6e:	71 f0       	breq	.+28     	; 0x1a8c <__floatsisf+0x74>
    1a70:	96 e8       	ldi	r25, 0x86	; 134
    1a72:	86 2f       	mov	r24, r22
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	2a f0       	brmi	.+10     	; 0x1a84 <__floatsisf+0x6c>
    1a7a:	9a 95       	dec	r25
    1a7c:	66 0f       	add	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	88 1f       	adc	r24, r24
    1a82:	da f7       	brpl	.-10     	; 0x1a7a <__floatsisf+0x62>
    1a84:	88 0f       	add	r24, r24
    1a86:	96 95       	lsr	r25
    1a88:	87 95       	ror	r24
    1a8a:	97 f9       	bld	r25, 7
    1a8c:	08 95       	ret

00001a8e <__fp_split3>:
    1a8e:	57 fd       	sbrc	r21, 7
    1a90:	90 58       	subi	r25, 0x80	; 128
    1a92:	44 0f       	add	r20, r20
    1a94:	55 1f       	adc	r21, r21
    1a96:	59 f0       	breq	.+22     	; 0x1aae <__fp_splitA+0x10>
    1a98:	5f 3f       	cpi	r21, 0xFF	; 255
    1a9a:	71 f0       	breq	.+28     	; 0x1ab8 <__fp_splitA+0x1a>
    1a9c:	47 95       	ror	r20

00001a9e <__fp_splitA>:
    1a9e:	88 0f       	add	r24, r24
    1aa0:	97 fb       	bst	r25, 7
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	61 f0       	breq	.+24     	; 0x1abe <__fp_splitA+0x20>
    1aa6:	9f 3f       	cpi	r25, 0xFF	; 255
    1aa8:	79 f0       	breq	.+30     	; 0x1ac8 <__fp_splitA+0x2a>
    1aaa:	87 95       	ror	r24
    1aac:	08 95       	ret
    1aae:	12 16       	cp	r1, r18
    1ab0:	13 06       	cpc	r1, r19
    1ab2:	14 06       	cpc	r1, r20
    1ab4:	55 1f       	adc	r21, r21
    1ab6:	f2 cf       	rjmp	.-28     	; 0x1a9c <__fp_split3+0xe>
    1ab8:	46 95       	lsr	r20
    1aba:	f1 df       	rcall	.-30     	; 0x1a9e <__fp_splitA>
    1abc:	08 c0       	rjmp	.+16     	; 0x1ace <__fp_splitA+0x30>
    1abe:	16 16       	cp	r1, r22
    1ac0:	17 06       	cpc	r1, r23
    1ac2:	18 06       	cpc	r1, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	f1 cf       	rjmp	.-30     	; 0x1aaa <__fp_splitA+0xc>
    1ac8:	86 95       	lsr	r24
    1aca:	71 05       	cpc	r23, r1
    1acc:	61 05       	cpc	r22, r1
    1ace:	08 94       	sec
    1ad0:	08 95       	ret

00001ad2 <__fp_zero>:
    1ad2:	e8 94       	clt

00001ad4 <__fp_szero>:
    1ad4:	bb 27       	eor	r27, r27
    1ad6:	66 27       	eor	r22, r22
    1ad8:	77 27       	eor	r23, r23
    1ada:	cb 01       	movw	r24, r22
    1adc:	97 f9       	bld	r25, 7
    1ade:	08 95       	ret

00001ae0 <__mulsf3>:
    1ae0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__mulsf3x>
    1ae4:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <__fp_round>
    1ae8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fp_pscA>
    1aec:	38 f0       	brcs	.+14     	; 0x1afc <__mulsf3+0x1c>
    1aee:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fp_pscB>
    1af2:	20 f0       	brcs	.+8      	; 0x1afc <__mulsf3+0x1c>
    1af4:	95 23       	and	r25, r21
    1af6:	11 f0       	breq	.+4      	; 0x1afc <__mulsf3+0x1c>
    1af8:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_inf>
    1afc:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__fp_nan>
    1b00:	11 24       	eor	r1, r1
    1b02:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__fp_szero>

00001b06 <__mulsf3x>:
    1b06:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__fp_split3>
    1b0a:	70 f3       	brcs	.-36     	; 0x1ae8 <__mulsf3+0x8>

00001b0c <__mulsf3_pse>:
    1b0c:	95 9f       	mul	r25, r21
    1b0e:	c1 f3       	breq	.-16     	; 0x1b00 <__mulsf3+0x20>
    1b10:	95 0f       	add	r25, r21
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	55 1f       	adc	r21, r21
    1b16:	62 9f       	mul	r22, r18
    1b18:	f0 01       	movw	r30, r0
    1b1a:	72 9f       	mul	r23, r18
    1b1c:	bb 27       	eor	r27, r27
    1b1e:	f0 0d       	add	r31, r0
    1b20:	b1 1d       	adc	r27, r1
    1b22:	63 9f       	mul	r22, r19
    1b24:	aa 27       	eor	r26, r26
    1b26:	f0 0d       	add	r31, r0
    1b28:	b1 1d       	adc	r27, r1
    1b2a:	aa 1f       	adc	r26, r26
    1b2c:	64 9f       	mul	r22, r20
    1b2e:	66 27       	eor	r22, r22
    1b30:	b0 0d       	add	r27, r0
    1b32:	a1 1d       	adc	r26, r1
    1b34:	66 1f       	adc	r22, r22
    1b36:	82 9f       	mul	r24, r18
    1b38:	22 27       	eor	r18, r18
    1b3a:	b0 0d       	add	r27, r0
    1b3c:	a1 1d       	adc	r26, r1
    1b3e:	62 1f       	adc	r22, r18
    1b40:	73 9f       	mul	r23, r19
    1b42:	b0 0d       	add	r27, r0
    1b44:	a1 1d       	adc	r26, r1
    1b46:	62 1f       	adc	r22, r18
    1b48:	83 9f       	mul	r24, r19
    1b4a:	a0 0d       	add	r26, r0
    1b4c:	61 1d       	adc	r22, r1
    1b4e:	22 1f       	adc	r18, r18
    1b50:	74 9f       	mul	r23, r20
    1b52:	33 27       	eor	r19, r19
    1b54:	a0 0d       	add	r26, r0
    1b56:	61 1d       	adc	r22, r1
    1b58:	23 1f       	adc	r18, r19
    1b5a:	84 9f       	mul	r24, r20
    1b5c:	60 0d       	add	r22, r0
    1b5e:	21 1d       	adc	r18, r1
    1b60:	82 2f       	mov	r24, r18
    1b62:	76 2f       	mov	r23, r22
    1b64:	6a 2f       	mov	r22, r26
    1b66:	11 24       	eor	r1, r1
    1b68:	9f 57       	subi	r25, 0x7F	; 127
    1b6a:	50 40       	sbci	r21, 0x00	; 0
    1b6c:	9a f0       	brmi	.+38     	; 0x1b94 <__mulsf3_pse+0x88>
    1b6e:	f1 f0       	breq	.+60     	; 0x1bac <__mulsf3_pse+0xa0>
    1b70:	88 23       	and	r24, r24
    1b72:	4a f0       	brmi	.+18     	; 0x1b86 <__mulsf3_pse+0x7a>
    1b74:	ee 0f       	add	r30, r30
    1b76:	ff 1f       	adc	r31, r31
    1b78:	bb 1f       	adc	r27, r27
    1b7a:	66 1f       	adc	r22, r22
    1b7c:	77 1f       	adc	r23, r23
    1b7e:	88 1f       	adc	r24, r24
    1b80:	91 50       	subi	r25, 0x01	; 1
    1b82:	50 40       	sbci	r21, 0x00	; 0
    1b84:	a9 f7       	brne	.-22     	; 0x1b70 <__mulsf3_pse+0x64>
    1b86:	9e 3f       	cpi	r25, 0xFE	; 254
    1b88:	51 05       	cpc	r21, r1
    1b8a:	80 f0       	brcs	.+32     	; 0x1bac <__mulsf3_pse+0xa0>
    1b8c:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__fp_inf>
    1b90:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__fp_szero>
    1b94:	5f 3f       	cpi	r21, 0xFF	; 255
    1b96:	e4 f3       	brlt	.-8      	; 0x1b90 <__mulsf3_pse+0x84>
    1b98:	98 3e       	cpi	r25, 0xE8	; 232
    1b9a:	d4 f3       	brlt	.-12     	; 0x1b90 <__mulsf3_pse+0x84>
    1b9c:	86 95       	lsr	r24
    1b9e:	77 95       	ror	r23
    1ba0:	67 95       	ror	r22
    1ba2:	b7 95       	ror	r27
    1ba4:	f7 95       	ror	r31
    1ba6:	e7 95       	ror	r30
    1ba8:	9f 5f       	subi	r25, 0xFF	; 255
    1baa:	c1 f7       	brne	.-16     	; 0x1b9c <__mulsf3_pse+0x90>
    1bac:	fe 2b       	or	r31, r30
    1bae:	88 0f       	add	r24, r24
    1bb0:	91 1d       	adc	r25, r1
    1bb2:	96 95       	lsr	r25
    1bb4:	87 95       	ror	r24
    1bb6:	97 f9       	bld	r25, 7
    1bb8:	08 95       	ret

00001bba <__fp_inf>:
    1bba:	97 f9       	bld	r25, 7
    1bbc:	9f 67       	ori	r25, 0x7F	; 127
    1bbe:	80 e8       	ldi	r24, 0x80	; 128
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	08 95       	ret

00001bc6 <__fp_nan>:
    1bc6:	9f ef       	ldi	r25, 0xFF	; 255
    1bc8:	80 ec       	ldi	r24, 0xC0	; 192
    1bca:	08 95       	ret

00001bcc <__fp_pscA>:
    1bcc:	00 24       	eor	r0, r0
    1bce:	0a 94       	dec	r0
    1bd0:	16 16       	cp	r1, r22
    1bd2:	17 06       	cpc	r1, r23
    1bd4:	18 06       	cpc	r1, r24
    1bd6:	09 06       	cpc	r0, r25
    1bd8:	08 95       	ret

00001bda <__fp_pscB>:
    1bda:	00 24       	eor	r0, r0
    1bdc:	0a 94       	dec	r0
    1bde:	12 16       	cp	r1, r18
    1be0:	13 06       	cpc	r1, r19
    1be2:	14 06       	cpc	r1, r20
    1be4:	05 06       	cpc	r0, r21
    1be6:	08 95       	ret

00001be8 <__fp_round>:
    1be8:	09 2e       	mov	r0, r25
    1bea:	03 94       	inc	r0
    1bec:	00 0c       	add	r0, r0
    1bee:	11 f4       	brne	.+4      	; 0x1bf4 <__fp_round+0xc>
    1bf0:	88 23       	and	r24, r24
    1bf2:	52 f0       	brmi	.+20     	; 0x1c08 <__fp_round+0x20>
    1bf4:	bb 0f       	add	r27, r27
    1bf6:	40 f4       	brcc	.+16     	; 0x1c08 <__fp_round+0x20>
    1bf8:	bf 2b       	or	r27, r31
    1bfa:	11 f4       	brne	.+4      	; 0x1c00 <__fp_round+0x18>
    1bfc:	60 ff       	sbrs	r22, 0
    1bfe:	04 c0       	rjmp	.+8      	; 0x1c08 <__fp_round+0x20>
    1c00:	6f 5f       	subi	r22, 0xFF	; 255
    1c02:	7f 4f       	sbci	r23, 0xFF	; 255
    1c04:	8f 4f       	sbci	r24, 0xFF	; 255
    1c06:	9f 4f       	sbci	r25, 0xFF	; 255
    1c08:	08 95       	ret

00001c0a <__divmodhi4>:
    1c0a:	97 fb       	bst	r25, 7
    1c0c:	07 2e       	mov	r0, r23
    1c0e:	16 f4       	brtc	.+4      	; 0x1c14 <__divmodhi4+0xa>
    1c10:	00 94       	com	r0
    1c12:	07 d0       	rcall	.+14     	; 0x1c22 <__divmodhi4_neg1>
    1c14:	77 fd       	sbrc	r23, 7
    1c16:	09 d0       	rcall	.+18     	; 0x1c2a <__divmodhi4_neg2>
    1c18:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__udivmodhi4>
    1c1c:	07 fc       	sbrc	r0, 7
    1c1e:	05 d0       	rcall	.+10     	; 0x1c2a <__divmodhi4_neg2>
    1c20:	3e f4       	brtc	.+14     	; 0x1c30 <__divmodhi4_exit>

00001c22 <__divmodhi4_neg1>:
    1c22:	90 95       	com	r25
    1c24:	81 95       	neg	r24
    1c26:	9f 4f       	sbci	r25, 0xFF	; 255
    1c28:	08 95       	ret

00001c2a <__divmodhi4_neg2>:
    1c2a:	70 95       	com	r23
    1c2c:	61 95       	neg	r22
    1c2e:	7f 4f       	sbci	r23, 0xFF	; 255

00001c30 <__divmodhi4_exit>:
    1c30:	08 95       	ret

00001c32 <__udivmodsi4>:
    1c32:	a1 e2       	ldi	r26, 0x21	; 33
    1c34:	1a 2e       	mov	r1, r26
    1c36:	aa 1b       	sub	r26, r26
    1c38:	bb 1b       	sub	r27, r27
    1c3a:	fd 01       	movw	r30, r26
    1c3c:	0d c0       	rjmp	.+26     	; 0x1c58 <__udivmodsi4_ep>

00001c3e <__udivmodsi4_loop>:
    1c3e:	aa 1f       	adc	r26, r26
    1c40:	bb 1f       	adc	r27, r27
    1c42:	ee 1f       	adc	r30, r30
    1c44:	ff 1f       	adc	r31, r31
    1c46:	a2 17       	cp	r26, r18
    1c48:	b3 07       	cpc	r27, r19
    1c4a:	e4 07       	cpc	r30, r20
    1c4c:	f5 07       	cpc	r31, r21
    1c4e:	20 f0       	brcs	.+8      	; 0x1c58 <__udivmodsi4_ep>
    1c50:	a2 1b       	sub	r26, r18
    1c52:	b3 0b       	sbc	r27, r19
    1c54:	e4 0b       	sbc	r30, r20
    1c56:	f5 0b       	sbc	r31, r21

00001c58 <__udivmodsi4_ep>:
    1c58:	66 1f       	adc	r22, r22
    1c5a:	77 1f       	adc	r23, r23
    1c5c:	88 1f       	adc	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	1a 94       	dec	r1
    1c62:	69 f7       	brne	.-38     	; 0x1c3e <__udivmodsi4_loop>
    1c64:	60 95       	com	r22
    1c66:	70 95       	com	r23
    1c68:	80 95       	com	r24
    1c6a:	90 95       	com	r25
    1c6c:	9b 01       	movw	r18, r22
    1c6e:	ac 01       	movw	r20, r24
    1c70:	bd 01       	movw	r22, r26
    1c72:	cf 01       	movw	r24, r30
    1c74:	08 95       	ret

00001c76 <__umulhisi3>:
    1c76:	a2 9f       	mul	r26, r18
    1c78:	b0 01       	movw	r22, r0
    1c7a:	b3 9f       	mul	r27, r19
    1c7c:	c0 01       	movw	r24, r0
    1c7e:	a3 9f       	mul	r26, r19
    1c80:	70 0d       	add	r23, r0
    1c82:	81 1d       	adc	r24, r1
    1c84:	11 24       	eor	r1, r1
    1c86:	91 1d       	adc	r25, r1
    1c88:	b2 9f       	mul	r27, r18
    1c8a:	70 0d       	add	r23, r0
    1c8c:	81 1d       	adc	r24, r1
    1c8e:	11 24       	eor	r1, r1
    1c90:	91 1d       	adc	r25, r1
    1c92:	08 95       	ret

00001c94 <__muluhisi3>:
    1c94:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__umulhisi3>
    1c98:	a5 9f       	mul	r26, r21
    1c9a:	90 0d       	add	r25, r0
    1c9c:	b4 9f       	mul	r27, r20
    1c9e:	90 0d       	add	r25, r0
    1ca0:	a4 9f       	mul	r26, r20
    1ca2:	80 0d       	add	r24, r0
    1ca4:	91 1d       	adc	r25, r1
    1ca6:	11 24       	eor	r1, r1
    1ca8:	08 95       	ret

00001caa <__udivmodhi4>:
    1caa:	aa 1b       	sub	r26, r26
    1cac:	bb 1b       	sub	r27, r27
    1cae:	51 e1       	ldi	r21, 0x11	; 17
    1cb0:	07 c0       	rjmp	.+14     	; 0x1cc0 <__udivmodhi4_ep>

00001cb2 <__udivmodhi4_loop>:
    1cb2:	aa 1f       	adc	r26, r26
    1cb4:	bb 1f       	adc	r27, r27
    1cb6:	a6 17       	cp	r26, r22
    1cb8:	b7 07       	cpc	r27, r23
    1cba:	10 f0       	brcs	.+4      	; 0x1cc0 <__udivmodhi4_ep>
    1cbc:	a6 1b       	sub	r26, r22
    1cbe:	b7 0b       	sbc	r27, r23

00001cc0 <__udivmodhi4_ep>:
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	5a 95       	dec	r21
    1cc6:	a9 f7       	brne	.-22     	; 0x1cb2 <__udivmodhi4_loop>
    1cc8:	80 95       	com	r24
    1cca:	90 95       	com	r25
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	08 95       	ret

00001cd2 <malloc>:
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	82 30       	cpi	r24, 0x02	; 2
    1cdc:	91 05       	cpc	r25, r1
    1cde:	10 f4       	brcc	.+4      	; 0x1ce4 <malloc+0x12>
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	e0 91 2c 05 	lds	r30, 0x052C	; 0x80052c <__flp>
    1ce8:	f0 91 2d 05 	lds	r31, 0x052D	; 0x80052d <__flp+0x1>
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	a0 e0       	ldi	r26, 0x00	; 0
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	30 97       	sbiw	r30, 0x00	; 0
    1cf6:	19 f1       	breq	.+70     	; 0x1d3e <malloc+0x6c>
    1cf8:	40 81       	ld	r20, Z
    1cfa:	51 81       	ldd	r21, Z+1	; 0x01
    1cfc:	02 81       	ldd	r16, Z+2	; 0x02
    1cfe:	13 81       	ldd	r17, Z+3	; 0x03
    1d00:	48 17       	cp	r20, r24
    1d02:	59 07       	cpc	r21, r25
    1d04:	c8 f0       	brcs	.+50     	; 0x1d38 <malloc+0x66>
    1d06:	84 17       	cp	r24, r20
    1d08:	95 07       	cpc	r25, r21
    1d0a:	69 f4       	brne	.+26     	; 0x1d26 <malloc+0x54>
    1d0c:	10 97       	sbiw	r26, 0x00	; 0
    1d0e:	31 f0       	breq	.+12     	; 0x1d1c <malloc+0x4a>
    1d10:	12 96       	adiw	r26, 0x02	; 2
    1d12:	0c 93       	st	X, r16
    1d14:	12 97       	sbiw	r26, 0x02	; 2
    1d16:	13 96       	adiw	r26, 0x03	; 3
    1d18:	1c 93       	st	X, r17
    1d1a:	27 c0       	rjmp	.+78     	; 0x1d6a <malloc+0x98>
    1d1c:	00 93 2c 05 	sts	0x052C, r16	; 0x80052c <__flp>
    1d20:	10 93 2d 05 	sts	0x052D, r17	; 0x80052d <__flp+0x1>
    1d24:	22 c0       	rjmp	.+68     	; 0x1d6a <malloc+0x98>
    1d26:	21 15       	cp	r18, r1
    1d28:	31 05       	cpc	r19, r1
    1d2a:	19 f0       	breq	.+6      	; 0x1d32 <malloc+0x60>
    1d2c:	42 17       	cp	r20, r18
    1d2e:	53 07       	cpc	r21, r19
    1d30:	18 f4       	brcc	.+6      	; 0x1d38 <malloc+0x66>
    1d32:	9a 01       	movw	r18, r20
    1d34:	bd 01       	movw	r22, r26
    1d36:	ef 01       	movw	r28, r30
    1d38:	df 01       	movw	r26, r30
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	db cf       	rjmp	.-74     	; 0x1cf4 <malloc+0x22>
    1d3e:	21 15       	cp	r18, r1
    1d40:	31 05       	cpc	r19, r1
    1d42:	f9 f0       	breq	.+62     	; 0x1d82 <malloc+0xb0>
    1d44:	28 1b       	sub	r18, r24
    1d46:	39 0b       	sbc	r19, r25
    1d48:	24 30       	cpi	r18, 0x04	; 4
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	80 f4       	brcc	.+32     	; 0x1d6e <malloc+0x9c>
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	9b 81       	ldd	r25, Y+3	; 0x03
    1d52:	61 15       	cp	r22, r1
    1d54:	71 05       	cpc	r23, r1
    1d56:	21 f0       	breq	.+8      	; 0x1d60 <malloc+0x8e>
    1d58:	fb 01       	movw	r30, r22
    1d5a:	93 83       	std	Z+3, r25	; 0x03
    1d5c:	82 83       	std	Z+2, r24	; 0x02
    1d5e:	04 c0       	rjmp	.+8      	; 0x1d68 <malloc+0x96>
    1d60:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <__flp+0x1>
    1d64:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <__flp>
    1d68:	fe 01       	movw	r30, r28
    1d6a:	32 96       	adiw	r30, 0x02	; 2
    1d6c:	44 c0       	rjmp	.+136    	; 0x1df6 <malloc+0x124>
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e2 0f       	add	r30, r18
    1d72:	f3 1f       	adc	r31, r19
    1d74:	81 93       	st	Z+, r24
    1d76:	91 93       	st	Z+, r25
    1d78:	22 50       	subi	r18, 0x02	; 2
    1d7a:	31 09       	sbc	r19, r1
    1d7c:	39 83       	std	Y+1, r19	; 0x01
    1d7e:	28 83       	st	Y, r18
    1d80:	3a c0       	rjmp	.+116    	; 0x1df6 <malloc+0x124>
    1d82:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <__brkval>
    1d86:	30 91 2b 05 	lds	r19, 0x052B	; 0x80052b <__brkval+0x1>
    1d8a:	23 2b       	or	r18, r19
    1d8c:	41 f4       	brne	.+16     	; 0x1d9e <malloc+0xcc>
    1d8e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1d92:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1d96:	30 93 2b 05 	sts	0x052B, r19	; 0x80052b <__brkval+0x1>
    1d9a:	20 93 2a 05 	sts	0x052A, r18	; 0x80052a <__brkval>
    1d9e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1da2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1da6:	21 15       	cp	r18, r1
    1da8:	31 05       	cpc	r19, r1
    1daa:	41 f4       	brne	.+16     	; 0x1dbc <malloc+0xea>
    1dac:	2d b7       	in	r18, 0x3d	; 61
    1dae:	3e b7       	in	r19, 0x3e	; 62
    1db0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1db4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1db8:	24 1b       	sub	r18, r20
    1dba:	35 0b       	sbc	r19, r21
    1dbc:	e0 91 2a 05 	lds	r30, 0x052A	; 0x80052a <__brkval>
    1dc0:	f0 91 2b 05 	lds	r31, 0x052B	; 0x80052b <__brkval+0x1>
    1dc4:	e2 17       	cp	r30, r18
    1dc6:	f3 07       	cpc	r31, r19
    1dc8:	a0 f4       	brcc	.+40     	; 0x1df2 <malloc+0x120>
    1dca:	2e 1b       	sub	r18, r30
    1dcc:	3f 0b       	sbc	r19, r31
    1dce:	28 17       	cp	r18, r24
    1dd0:	39 07       	cpc	r19, r25
    1dd2:	78 f0       	brcs	.+30     	; 0x1df2 <malloc+0x120>
    1dd4:	ac 01       	movw	r20, r24
    1dd6:	4e 5f       	subi	r20, 0xFE	; 254
    1dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dda:	24 17       	cp	r18, r20
    1ddc:	35 07       	cpc	r19, r21
    1dde:	48 f0       	brcs	.+18     	; 0x1df2 <malloc+0x120>
    1de0:	4e 0f       	add	r20, r30
    1de2:	5f 1f       	adc	r21, r31
    1de4:	50 93 2b 05 	sts	0x052B, r21	; 0x80052b <__brkval+0x1>
    1de8:	40 93 2a 05 	sts	0x052A, r20	; 0x80052a <__brkval>
    1dec:	81 93       	st	Z+, r24
    1dee:	91 93       	st	Z+, r25
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <malloc+0x124>
    1df2:	e0 e0       	ldi	r30, 0x00	; 0
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	cf 01       	movw	r24, r30
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	08 95       	ret

00001e02 <free>:
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <free+0xa>
    1e0a:	81 c0       	rjmp	.+258    	; 0x1f0e <free+0x10c>
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	32 97       	sbiw	r30, 0x02	; 2
    1e10:	13 82       	std	Z+3, r1	; 0x03
    1e12:	12 82       	std	Z+2, r1	; 0x02
    1e14:	a0 91 2c 05 	lds	r26, 0x052C	; 0x80052c <__flp>
    1e18:	b0 91 2d 05 	lds	r27, 0x052D	; 0x80052d <__flp+0x1>
    1e1c:	10 97       	sbiw	r26, 0x00	; 0
    1e1e:	81 f4       	brne	.+32     	; 0x1e40 <free+0x3e>
    1e20:	20 81       	ld	r18, Z
    1e22:	31 81       	ldd	r19, Z+1	; 0x01
    1e24:	82 0f       	add	r24, r18
    1e26:	93 1f       	adc	r25, r19
    1e28:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <__brkval>
    1e2c:	30 91 2b 05 	lds	r19, 0x052B	; 0x80052b <__brkval+0x1>
    1e30:	28 17       	cp	r18, r24
    1e32:	39 07       	cpc	r19, r25
    1e34:	51 f5       	brne	.+84     	; 0x1e8a <free+0x88>
    1e36:	f0 93 2b 05 	sts	0x052B, r31	; 0x80052b <__brkval+0x1>
    1e3a:	e0 93 2a 05 	sts	0x052A, r30	; 0x80052a <__brkval>
    1e3e:	67 c0       	rjmp	.+206    	; 0x1f0e <free+0x10c>
    1e40:	ed 01       	movw	r28, r26
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	ce 17       	cp	r28, r30
    1e48:	df 07       	cpc	r29, r31
    1e4a:	40 f4       	brcc	.+16     	; 0x1e5c <free+0x5a>
    1e4c:	4a 81       	ldd	r20, Y+2	; 0x02
    1e4e:	5b 81       	ldd	r21, Y+3	; 0x03
    1e50:	9e 01       	movw	r18, r28
    1e52:	41 15       	cp	r20, r1
    1e54:	51 05       	cpc	r21, r1
    1e56:	f1 f0       	breq	.+60     	; 0x1e94 <free+0x92>
    1e58:	ea 01       	movw	r28, r20
    1e5a:	f5 cf       	rjmp	.-22     	; 0x1e46 <free+0x44>
    1e5c:	d3 83       	std	Z+3, r29	; 0x03
    1e5e:	c2 83       	std	Z+2, r28	; 0x02
    1e60:	40 81       	ld	r20, Z
    1e62:	51 81       	ldd	r21, Z+1	; 0x01
    1e64:	84 0f       	add	r24, r20
    1e66:	95 1f       	adc	r25, r21
    1e68:	c8 17       	cp	r28, r24
    1e6a:	d9 07       	cpc	r29, r25
    1e6c:	59 f4       	brne	.+22     	; 0x1e84 <free+0x82>
    1e6e:	88 81       	ld	r24, Y
    1e70:	99 81       	ldd	r25, Y+1	; 0x01
    1e72:	84 0f       	add	r24, r20
    1e74:	95 1f       	adc	r25, r21
    1e76:	02 96       	adiw	r24, 0x02	; 2
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e80:	93 83       	std	Z+3, r25	; 0x03
    1e82:	82 83       	std	Z+2, r24	; 0x02
    1e84:	21 15       	cp	r18, r1
    1e86:	31 05       	cpc	r19, r1
    1e88:	29 f4       	brne	.+10     	; 0x1e94 <free+0x92>
    1e8a:	f0 93 2d 05 	sts	0x052D, r31	; 0x80052d <__flp+0x1>
    1e8e:	e0 93 2c 05 	sts	0x052C, r30	; 0x80052c <__flp>
    1e92:	3d c0       	rjmp	.+122    	; 0x1f0e <free+0x10c>
    1e94:	e9 01       	movw	r28, r18
    1e96:	fb 83       	std	Y+3, r31	; 0x03
    1e98:	ea 83       	std	Y+2, r30	; 0x02
    1e9a:	49 91       	ld	r20, Y+
    1e9c:	59 91       	ld	r21, Y+
    1e9e:	c4 0f       	add	r28, r20
    1ea0:	d5 1f       	adc	r29, r21
    1ea2:	ec 17       	cp	r30, r28
    1ea4:	fd 07       	cpc	r31, r29
    1ea6:	61 f4       	brne	.+24     	; 0x1ec0 <free+0xbe>
    1ea8:	80 81       	ld	r24, Z
    1eaa:	91 81       	ldd	r25, Z+1	; 0x01
    1eac:	84 0f       	add	r24, r20
    1eae:	95 1f       	adc	r25, r21
    1eb0:	02 96       	adiw	r24, 0x02	; 2
    1eb2:	e9 01       	movw	r28, r18
    1eb4:	99 83       	std	Y+1, r25	; 0x01
    1eb6:	88 83       	st	Y, r24
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	93 81       	ldd	r25, Z+3	; 0x03
    1ebc:	9b 83       	std	Y+3, r25	; 0x03
    1ebe:	8a 83       	std	Y+2, r24	; 0x02
    1ec0:	e0 e0       	ldi	r30, 0x00	; 0
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	12 96       	adiw	r26, 0x02	; 2
    1ec6:	8d 91       	ld	r24, X+
    1ec8:	9c 91       	ld	r25, X
    1eca:	13 97       	sbiw	r26, 0x03	; 3
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	19 f0       	breq	.+6      	; 0x1ed6 <free+0xd4>
    1ed0:	fd 01       	movw	r30, r26
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	f7 cf       	rjmp	.-18     	; 0x1ec4 <free+0xc2>
    1ed6:	8d 91       	ld	r24, X+
    1ed8:	9c 91       	ld	r25, X
    1eda:	11 97       	sbiw	r26, 0x01	; 1
    1edc:	9d 01       	movw	r18, r26
    1ede:	2e 5f       	subi	r18, 0xFE	; 254
    1ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee2:	82 0f       	add	r24, r18
    1ee4:	93 1f       	adc	r25, r19
    1ee6:	20 91 2a 05 	lds	r18, 0x052A	; 0x80052a <__brkval>
    1eea:	30 91 2b 05 	lds	r19, 0x052B	; 0x80052b <__brkval+0x1>
    1eee:	28 17       	cp	r18, r24
    1ef0:	39 07       	cpc	r19, r25
    1ef2:	69 f4       	brne	.+26     	; 0x1f0e <free+0x10c>
    1ef4:	30 97       	sbiw	r30, 0x00	; 0
    1ef6:	29 f4       	brne	.+10     	; 0x1f02 <free+0x100>
    1ef8:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <__flp+0x1>
    1efc:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <__flp>
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <free+0x104>
    1f02:	13 82       	std	Z+3, r1	; 0x03
    1f04:	12 82       	std	Z+2, r1	; 0x02
    1f06:	b0 93 2b 05 	sts	0x052B, r27	; 0x80052b <__brkval+0x1>
    1f0a:	a0 93 2a 05 	sts	0x052A, r26	; 0x80052a <__brkval>
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	08 95       	ret

00001f14 <atoi>:
    1f14:	fc 01       	movw	r30, r24
    1f16:	88 27       	eor	r24, r24
    1f18:	99 27       	eor	r25, r25
    1f1a:	e8 94       	clt
    1f1c:	21 91       	ld	r18, Z+
    1f1e:	20 32       	cpi	r18, 0x20	; 32
    1f20:	e9 f3       	breq	.-6      	; 0x1f1c <atoi+0x8>
    1f22:	29 30       	cpi	r18, 0x09	; 9
    1f24:	10 f0       	brcs	.+4      	; 0x1f2a <atoi+0x16>
    1f26:	2e 30       	cpi	r18, 0x0E	; 14
    1f28:	c8 f3       	brcs	.-14     	; 0x1f1c <atoi+0x8>
    1f2a:	2b 32       	cpi	r18, 0x2B	; 43
    1f2c:	41 f0       	breq	.+16     	; 0x1f3e <atoi+0x2a>
    1f2e:	2d 32       	cpi	r18, 0x2D	; 45
    1f30:	39 f4       	brne	.+14     	; 0x1f40 <atoi+0x2c>
    1f32:	68 94       	set
    1f34:	04 c0       	rjmp	.+8      	; 0x1f3e <atoi+0x2a>
    1f36:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulhi_const_10>
    1f3a:	82 0f       	add	r24, r18
    1f3c:	91 1d       	adc	r25, r1
    1f3e:	21 91       	ld	r18, Z+
    1f40:	20 53       	subi	r18, 0x30	; 48
    1f42:	2a 30       	cpi	r18, 0x0A	; 10
    1f44:	c0 f3       	brcs	.-16     	; 0x1f36 <atoi+0x22>
    1f46:	1e f4       	brtc	.+6      	; 0x1f4e <atoi+0x3a>
    1f48:	90 95       	com	r25
    1f4a:	81 95       	neg	r24
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	08 95       	ret

00001f50 <strtok>:
    1f50:	46 ef       	ldi	r20, 0xF6	; 246
    1f52:	52 e0       	ldi	r21, 0x02	; 2
    1f54:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <strtok_r>
    1f58:	08 95       	ret

00001f5a <strchr>:
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	81 91       	ld	r24, Z+
    1f5e:	86 17       	cp	r24, r22
    1f60:	21 f0       	breq	.+8      	; 0x1f6a <strchr+0x10>
    1f62:	88 23       	and	r24, r24
    1f64:	d9 f7       	brne	.-10     	; 0x1f5c <strchr+0x2>
    1f66:	99 27       	eor	r25, r25
    1f68:	08 95       	ret
    1f6a:	31 97       	sbiw	r30, 0x01	; 1
    1f6c:	cf 01       	movw	r24, r30
    1f6e:	08 95       	ret

00001f70 <strcpy>:
    1f70:	fb 01       	movw	r30, r22
    1f72:	dc 01       	movw	r26, r24
    1f74:	01 90       	ld	r0, Z+
    1f76:	0d 92       	st	X+, r0
    1f78:	00 20       	and	r0, r0
    1f7a:	e1 f7       	brne	.-8      	; 0x1f74 <strcpy+0x4>
    1f7c:	08 95       	ret

00001f7e <strncmp>:
    1f7e:	fb 01       	movw	r30, r22
    1f80:	dc 01       	movw	r26, r24
    1f82:	41 50       	subi	r20, 0x01	; 1
    1f84:	50 40       	sbci	r21, 0x00	; 0
    1f86:	30 f0       	brcs	.+12     	; 0x1f94 <strncmp+0x16>
    1f88:	8d 91       	ld	r24, X+
    1f8a:	01 90       	ld	r0, Z+
    1f8c:	80 19       	sub	r24, r0
    1f8e:	19 f4       	brne	.+6      	; 0x1f96 <strncmp+0x18>
    1f90:	00 20       	and	r0, r0
    1f92:	b9 f7       	brne	.-18     	; 0x1f82 <strncmp+0x4>
    1f94:	88 1b       	sub	r24, r24
    1f96:	99 0b       	sbc	r25, r25
    1f98:	08 95       	ret

00001f9a <strncpy>:
    1f9a:	fb 01       	movw	r30, r22
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	41 50       	subi	r20, 0x01	; 1
    1fa0:	50 40       	sbci	r21, 0x00	; 0
    1fa2:	48 f0       	brcs	.+18     	; 0x1fb6 <strncpy+0x1c>
    1fa4:	01 90       	ld	r0, Z+
    1fa6:	0d 92       	st	X+, r0
    1fa8:	00 20       	and	r0, r0
    1faa:	c9 f7       	brne	.-14     	; 0x1f9e <strncpy+0x4>
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <strncpy+0x16>
    1fae:	1d 92       	st	X+, r1
    1fb0:	41 50       	subi	r20, 0x01	; 1
    1fb2:	50 40       	sbci	r21, 0x00	; 0
    1fb4:	e0 f7       	brcc	.-8      	; 0x1fae <strncpy+0x14>
    1fb6:	08 95       	ret

00001fb8 <strstr>:
    1fb8:	fb 01       	movw	r30, r22
    1fba:	51 91       	ld	r21, Z+
    1fbc:	55 23       	and	r21, r21
    1fbe:	a9 f0       	breq	.+42     	; 0x1fea <strstr+0x32>
    1fc0:	bf 01       	movw	r22, r30
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	4d 91       	ld	r20, X+
    1fc6:	45 17       	cp	r20, r21
    1fc8:	41 11       	cpse	r20, r1
    1fca:	e1 f7       	brne	.-8      	; 0x1fc4 <strstr+0xc>
    1fcc:	59 f4       	brne	.+22     	; 0x1fe4 <strstr+0x2c>
    1fce:	cd 01       	movw	r24, r26
    1fd0:	01 90       	ld	r0, Z+
    1fd2:	00 20       	and	r0, r0
    1fd4:	49 f0       	breq	.+18     	; 0x1fe8 <strstr+0x30>
    1fd6:	4d 91       	ld	r20, X+
    1fd8:	40 15       	cp	r20, r0
    1fda:	41 11       	cpse	r20, r1
    1fdc:	c9 f3       	breq	.-14     	; 0x1fd0 <strstr+0x18>
    1fde:	fb 01       	movw	r30, r22
    1fe0:	41 11       	cpse	r20, r1
    1fe2:	ef cf       	rjmp	.-34     	; 0x1fc2 <strstr+0xa>
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	08 95       	ret

00001fec <strtok_r>:
    1fec:	fa 01       	movw	r30, r20
    1fee:	a1 91       	ld	r26, Z+
    1ff0:	b0 81       	ld	r27, Z
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	19 f4       	brne	.+6      	; 0x1ffc <strtok_r+0x10>
    1ff6:	10 97       	sbiw	r26, 0x00	; 0
    1ff8:	e1 f0       	breq	.+56     	; 0x2032 <strtok_r+0x46>
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0d 90       	ld	r0, X+
    2002:	00 20       	and	r0, r0
    2004:	11 f4       	brne	.+4      	; 0x200a <strtok_r+0x1e>
    2006:	c0 01       	movw	r24, r0
    2008:	13 c0       	rjmp	.+38     	; 0x2030 <strtok_r+0x44>
    200a:	fb 01       	movw	r30, r22
    200c:	21 91       	ld	r18, Z+
    200e:	22 23       	and	r18, r18
    2010:	19 f0       	breq	.+6      	; 0x2018 <strtok_r+0x2c>
    2012:	20 15       	cp	r18, r0
    2014:	d9 f7       	brne	.-10     	; 0x200c <strtok_r+0x20>
    2016:	f3 cf       	rjmp	.-26     	; 0x1ffe <strtok_r+0x12>
    2018:	fb 01       	movw	r30, r22
    201a:	21 91       	ld	r18, Z+
    201c:	20 15       	cp	r18, r0
    201e:	19 f4       	brne	.+6      	; 0x2026 <strtok_r+0x3a>
    2020:	1e 92       	st	-X, r1
    2022:	11 96       	adiw	r26, 0x01	; 1
    2024:	06 c0       	rjmp	.+12     	; 0x2032 <strtok_r+0x46>
    2026:	22 23       	and	r18, r18
    2028:	c1 f7       	brne	.-16     	; 0x201a <strtok_r+0x2e>
    202a:	0d 90       	ld	r0, X+
    202c:	00 20       	and	r0, r0
    202e:	a1 f7       	brne	.-24     	; 0x2018 <strtok_r+0x2c>
    2030:	d0 01       	movw	r26, r0
    2032:	fa 01       	movw	r30, r20
    2034:	a1 93       	st	Z+, r26
    2036:	b0 83       	st	Z, r27
    2038:	08 95       	ret

0000203a <__mulhi_const_10>:
    203a:	7a e0       	ldi	r23, 0x0A	; 10
    203c:	97 9f       	mul	r25, r23
    203e:	90 2d       	mov	r25, r0
    2040:	87 9f       	mul	r24, r23
    2042:	80 2d       	mov	r24, r0
    2044:	91 0d       	add	r25, r1
    2046:	11 24       	eor	r1, r1
    2048:	08 95       	ret

0000204a <snprintf>:
    204a:	ae e0       	ldi	r26, 0x0E	; 14
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	eb e2       	ldi	r30, 0x2B	; 43
    2050:	f0 e1       	ldi	r31, 0x10	; 16
    2052:	0c 94 16 13 	jmp	0x262c	; 0x262c <__prologue_saves__+0x1c>
    2056:	0d 89       	ldd	r16, Y+21	; 0x15
    2058:	1e 89       	ldd	r17, Y+22	; 0x16
    205a:	8f 89       	ldd	r24, Y+23	; 0x17
    205c:	98 8d       	ldd	r25, Y+24	; 0x18
    205e:	26 e0       	ldi	r18, 0x06	; 6
    2060:	2c 83       	std	Y+4, r18	; 0x04
    2062:	1a 83       	std	Y+2, r17	; 0x02
    2064:	09 83       	std	Y+1, r16	; 0x01
    2066:	97 ff       	sbrs	r25, 7
    2068:	02 c0       	rjmp	.+4      	; 0x206e <snprintf+0x24>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e8       	ldi	r25, 0x80	; 128
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	ae 01       	movw	r20, r28
    2076:	45 5e       	subi	r20, 0xE5	; 229
    2078:	5f 4f       	sbci	r21, 0xFF	; 255
    207a:	69 8d       	ldd	r22, Y+25	; 0x19
    207c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    207e:	ce 01       	movw	r24, r28
    2080:	01 96       	adiw	r24, 0x01	; 1
    2082:	0e 94 77 10 	call	0x20ee	; 0x20ee <vfprintf>
    2086:	4d 81       	ldd	r20, Y+5	; 0x05
    2088:	5e 81       	ldd	r21, Y+6	; 0x06
    208a:	57 fd       	sbrc	r21, 7
    208c:	0a c0       	rjmp	.+20     	; 0x20a2 <snprintf+0x58>
    208e:	2f 81       	ldd	r18, Y+7	; 0x07
    2090:	38 85       	ldd	r19, Y+8	; 0x08
    2092:	42 17       	cp	r20, r18
    2094:	53 07       	cpc	r21, r19
    2096:	0c f4       	brge	.+2      	; 0x209a <snprintf+0x50>
    2098:	9a 01       	movw	r18, r20
    209a:	f8 01       	movw	r30, r16
    209c:	e2 0f       	add	r30, r18
    209e:	f3 1f       	adc	r31, r19
    20a0:	10 82       	st	Z, r1
    20a2:	2e 96       	adiw	r28, 0x0e	; 14
    20a4:	e4 e0       	ldi	r30, 0x04	; 4
    20a6:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__epilogue_restores__+0x1c>

000020aa <sprintf>:
    20aa:	ae e0       	ldi	r26, 0x0E	; 14
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	eb e5       	ldi	r30, 0x5B	; 91
    20b0:	f0 e1       	ldi	r31, 0x10	; 16
    20b2:	0c 94 16 13 	jmp	0x262c	; 0x262c <__prologue_saves__+0x1c>
    20b6:	0d 89       	ldd	r16, Y+21	; 0x15
    20b8:	1e 89       	ldd	r17, Y+22	; 0x16
    20ba:	86 e0       	ldi	r24, 0x06	; 6
    20bc:	8c 83       	std	Y+4, r24	; 0x04
    20be:	1a 83       	std	Y+2, r17	; 0x02
    20c0:	09 83       	std	Y+1, r16	; 0x01
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	9f e7       	ldi	r25, 0x7F	; 127
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
    20ca:	ae 01       	movw	r20, r28
    20cc:	47 5e       	subi	r20, 0xE7	; 231
    20ce:	5f 4f       	sbci	r21, 0xFF	; 255
    20d0:	6f 89       	ldd	r22, Y+23	; 0x17
    20d2:	78 8d       	ldd	r23, Y+24	; 0x18
    20d4:	ce 01       	movw	r24, r28
    20d6:	01 96       	adiw	r24, 0x01	; 1
    20d8:	0e 94 77 10 	call	0x20ee	; 0x20ee <vfprintf>
    20dc:	ef 81       	ldd	r30, Y+7	; 0x07
    20de:	f8 85       	ldd	r31, Y+8	; 0x08
    20e0:	e0 0f       	add	r30, r16
    20e2:	f1 1f       	adc	r31, r17
    20e4:	10 82       	st	Z, r1
    20e6:	2e 96       	adiw	r28, 0x0e	; 14
    20e8:	e4 e0       	ldi	r30, 0x04	; 4
    20ea:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__epilogue_restores__+0x1c>

000020ee <vfprintf>:
    20ee:	ab e0       	ldi	r26, 0x0B	; 11
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	ed e7       	ldi	r30, 0x7D	; 125
    20f4:	f0 e1       	ldi	r31, 0x10	; 16
    20f6:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__>
    20fa:	6c 01       	movw	r12, r24
    20fc:	7b 01       	movw	r14, r22
    20fe:	8a 01       	movw	r16, r20
    2100:	fc 01       	movw	r30, r24
    2102:	17 82       	std	Z+7, r1	; 0x07
    2104:	16 82       	std	Z+6, r1	; 0x06
    2106:	83 81       	ldd	r24, Z+3	; 0x03
    2108:	81 ff       	sbrs	r24, 1
    210a:	cc c1       	rjmp	.+920    	; 0x24a4 <vfprintf+0x3b6>
    210c:	ce 01       	movw	r24, r28
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	3c 01       	movw	r6, r24
    2112:	f6 01       	movw	r30, r12
    2114:	93 81       	ldd	r25, Z+3	; 0x03
    2116:	f7 01       	movw	r30, r14
    2118:	93 fd       	sbrc	r25, 3
    211a:	85 91       	lpm	r24, Z+
    211c:	93 ff       	sbrs	r25, 3
    211e:	81 91       	ld	r24, Z+
    2120:	7f 01       	movw	r14, r30
    2122:	88 23       	and	r24, r24
    2124:	09 f4       	brne	.+2      	; 0x2128 <vfprintf+0x3a>
    2126:	ba c1       	rjmp	.+884    	; 0x249c <vfprintf+0x3ae>
    2128:	85 32       	cpi	r24, 0x25	; 37
    212a:	39 f4       	brne	.+14     	; 0x213a <vfprintf+0x4c>
    212c:	93 fd       	sbrc	r25, 3
    212e:	85 91       	lpm	r24, Z+
    2130:	93 ff       	sbrs	r25, 3
    2132:	81 91       	ld	r24, Z+
    2134:	7f 01       	movw	r14, r30
    2136:	85 32       	cpi	r24, 0x25	; 37
    2138:	29 f4       	brne	.+10     	; 0x2144 <vfprintf+0x56>
    213a:	b6 01       	movw	r22, r12
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <fputc>
    2142:	e7 cf       	rjmp	.-50     	; 0x2112 <vfprintf+0x24>
    2144:	91 2c       	mov	r9, r1
    2146:	21 2c       	mov	r2, r1
    2148:	31 2c       	mov	r3, r1
    214a:	ff e1       	ldi	r31, 0x1F	; 31
    214c:	f3 15       	cp	r31, r3
    214e:	d8 f0       	brcs	.+54     	; 0x2186 <vfprintf+0x98>
    2150:	8b 32       	cpi	r24, 0x2B	; 43
    2152:	79 f0       	breq	.+30     	; 0x2172 <vfprintf+0x84>
    2154:	38 f4       	brcc	.+14     	; 0x2164 <vfprintf+0x76>
    2156:	80 32       	cpi	r24, 0x20	; 32
    2158:	79 f0       	breq	.+30     	; 0x2178 <vfprintf+0x8a>
    215a:	83 32       	cpi	r24, 0x23	; 35
    215c:	a1 f4       	brne	.+40     	; 0x2186 <vfprintf+0x98>
    215e:	23 2d       	mov	r18, r3
    2160:	20 61       	ori	r18, 0x10	; 16
    2162:	1d c0       	rjmp	.+58     	; 0x219e <vfprintf+0xb0>
    2164:	8d 32       	cpi	r24, 0x2D	; 45
    2166:	61 f0       	breq	.+24     	; 0x2180 <vfprintf+0x92>
    2168:	80 33       	cpi	r24, 0x30	; 48
    216a:	69 f4       	brne	.+26     	; 0x2186 <vfprintf+0x98>
    216c:	23 2d       	mov	r18, r3
    216e:	21 60       	ori	r18, 0x01	; 1
    2170:	16 c0       	rjmp	.+44     	; 0x219e <vfprintf+0xb0>
    2172:	83 2d       	mov	r24, r3
    2174:	82 60       	ori	r24, 0x02	; 2
    2176:	38 2e       	mov	r3, r24
    2178:	e3 2d       	mov	r30, r3
    217a:	e4 60       	ori	r30, 0x04	; 4
    217c:	3e 2e       	mov	r3, r30
    217e:	2a c0       	rjmp	.+84     	; 0x21d4 <vfprintf+0xe6>
    2180:	f3 2d       	mov	r31, r3
    2182:	f8 60       	ori	r31, 0x08	; 8
    2184:	1d c0       	rjmp	.+58     	; 0x21c0 <vfprintf+0xd2>
    2186:	37 fc       	sbrc	r3, 7
    2188:	2d c0       	rjmp	.+90     	; 0x21e4 <vfprintf+0xf6>
    218a:	20 ed       	ldi	r18, 0xD0	; 208
    218c:	28 0f       	add	r18, r24
    218e:	2a 30       	cpi	r18, 0x0A	; 10
    2190:	40 f0       	brcs	.+16     	; 0x21a2 <vfprintf+0xb4>
    2192:	8e 32       	cpi	r24, 0x2E	; 46
    2194:	b9 f4       	brne	.+46     	; 0x21c4 <vfprintf+0xd6>
    2196:	36 fc       	sbrc	r3, 6
    2198:	81 c1       	rjmp	.+770    	; 0x249c <vfprintf+0x3ae>
    219a:	23 2d       	mov	r18, r3
    219c:	20 64       	ori	r18, 0x40	; 64
    219e:	32 2e       	mov	r3, r18
    21a0:	19 c0       	rjmp	.+50     	; 0x21d4 <vfprintf+0xe6>
    21a2:	36 fe       	sbrs	r3, 6
    21a4:	06 c0       	rjmp	.+12     	; 0x21b2 <vfprintf+0xc4>
    21a6:	8a e0       	ldi	r24, 0x0A	; 10
    21a8:	98 9e       	mul	r9, r24
    21aa:	20 0d       	add	r18, r0
    21ac:	11 24       	eor	r1, r1
    21ae:	92 2e       	mov	r9, r18
    21b0:	11 c0       	rjmp	.+34     	; 0x21d4 <vfprintf+0xe6>
    21b2:	ea e0       	ldi	r30, 0x0A	; 10
    21b4:	2e 9e       	mul	r2, r30
    21b6:	20 0d       	add	r18, r0
    21b8:	11 24       	eor	r1, r1
    21ba:	22 2e       	mov	r2, r18
    21bc:	f3 2d       	mov	r31, r3
    21be:	f0 62       	ori	r31, 0x20	; 32
    21c0:	3f 2e       	mov	r3, r31
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <vfprintf+0xe6>
    21c4:	8c 36       	cpi	r24, 0x6C	; 108
    21c6:	21 f4       	brne	.+8      	; 0x21d0 <vfprintf+0xe2>
    21c8:	83 2d       	mov	r24, r3
    21ca:	80 68       	ori	r24, 0x80	; 128
    21cc:	38 2e       	mov	r3, r24
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <vfprintf+0xe6>
    21d0:	88 36       	cpi	r24, 0x68	; 104
    21d2:	41 f4       	brne	.+16     	; 0x21e4 <vfprintf+0xf6>
    21d4:	f7 01       	movw	r30, r14
    21d6:	93 fd       	sbrc	r25, 3
    21d8:	85 91       	lpm	r24, Z+
    21da:	93 ff       	sbrs	r25, 3
    21dc:	81 91       	ld	r24, Z+
    21de:	7f 01       	movw	r14, r30
    21e0:	81 11       	cpse	r24, r1
    21e2:	b3 cf       	rjmp	.-154    	; 0x214a <vfprintf+0x5c>
    21e4:	98 2f       	mov	r25, r24
    21e6:	9f 7d       	andi	r25, 0xDF	; 223
    21e8:	95 54       	subi	r25, 0x45	; 69
    21ea:	93 30       	cpi	r25, 0x03	; 3
    21ec:	28 f4       	brcc	.+10     	; 0x21f8 <vfprintf+0x10a>
    21ee:	0c 5f       	subi	r16, 0xFC	; 252
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	9f e3       	ldi	r25, 0x3F	; 63
    21f4:	99 83       	std	Y+1, r25	; 0x01
    21f6:	0d c0       	rjmp	.+26     	; 0x2212 <vfprintf+0x124>
    21f8:	83 36       	cpi	r24, 0x63	; 99
    21fa:	31 f0       	breq	.+12     	; 0x2208 <vfprintf+0x11a>
    21fc:	83 37       	cpi	r24, 0x73	; 115
    21fe:	71 f0       	breq	.+28     	; 0x221c <vfprintf+0x12e>
    2200:	83 35       	cpi	r24, 0x53	; 83
    2202:	09 f0       	breq	.+2      	; 0x2206 <vfprintf+0x118>
    2204:	59 c0       	rjmp	.+178    	; 0x22b8 <vfprintf+0x1ca>
    2206:	21 c0       	rjmp	.+66     	; 0x224a <vfprintf+0x15c>
    2208:	f8 01       	movw	r30, r16
    220a:	80 81       	ld	r24, Z
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	0e 5f       	subi	r16, 0xFE	; 254
    2210:	1f 4f       	sbci	r17, 0xFF	; 255
    2212:	88 24       	eor	r8, r8
    2214:	83 94       	inc	r8
    2216:	91 2c       	mov	r9, r1
    2218:	53 01       	movw	r10, r6
    221a:	13 c0       	rjmp	.+38     	; 0x2242 <vfprintf+0x154>
    221c:	28 01       	movw	r4, r16
    221e:	f2 e0       	ldi	r31, 0x02	; 2
    2220:	4f 0e       	add	r4, r31
    2222:	51 1c       	adc	r5, r1
    2224:	f8 01       	movw	r30, r16
    2226:	a0 80       	ld	r10, Z
    2228:	b1 80       	ldd	r11, Z+1	; 0x01
    222a:	36 fe       	sbrs	r3, 6
    222c:	03 c0       	rjmp	.+6      	; 0x2234 <vfprintf+0x146>
    222e:	69 2d       	mov	r22, r9
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <vfprintf+0x14a>
    2234:	6f ef       	ldi	r22, 0xFF	; 255
    2236:	7f ef       	ldi	r23, 0xFF	; 255
    2238:	c5 01       	movw	r24, r10
    223a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <strnlen>
    223e:	4c 01       	movw	r8, r24
    2240:	82 01       	movw	r16, r4
    2242:	f3 2d       	mov	r31, r3
    2244:	ff 77       	andi	r31, 0x7F	; 127
    2246:	3f 2e       	mov	r3, r31
    2248:	16 c0       	rjmp	.+44     	; 0x2276 <vfprintf+0x188>
    224a:	28 01       	movw	r4, r16
    224c:	22 e0       	ldi	r18, 0x02	; 2
    224e:	42 0e       	add	r4, r18
    2250:	51 1c       	adc	r5, r1
    2252:	f8 01       	movw	r30, r16
    2254:	a0 80       	ld	r10, Z
    2256:	b1 80       	ldd	r11, Z+1	; 0x01
    2258:	36 fe       	sbrs	r3, 6
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <vfprintf+0x174>
    225c:	69 2d       	mov	r22, r9
    225e:	70 e0       	ldi	r23, 0x00	; 0
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <vfprintf+0x178>
    2262:	6f ef       	ldi	r22, 0xFF	; 255
    2264:	7f ef       	ldi	r23, 0xFF	; 255
    2266:	c5 01       	movw	r24, r10
    2268:	0e 94 58 12 	call	0x24b0	; 0x24b0 <strnlen_P>
    226c:	4c 01       	movw	r8, r24
    226e:	f3 2d       	mov	r31, r3
    2270:	f0 68       	ori	r31, 0x80	; 128
    2272:	3f 2e       	mov	r3, r31
    2274:	82 01       	movw	r16, r4
    2276:	33 fc       	sbrc	r3, 3
    2278:	1b c0       	rjmp	.+54     	; 0x22b0 <vfprintf+0x1c2>
    227a:	82 2d       	mov	r24, r2
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	88 16       	cp	r8, r24
    2280:	99 06       	cpc	r9, r25
    2282:	b0 f4       	brcc	.+44     	; 0x22b0 <vfprintf+0x1c2>
    2284:	b6 01       	movw	r22, r12
    2286:	80 e2       	ldi	r24, 0x20	; 32
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <fputc>
    228e:	2a 94       	dec	r2
    2290:	f4 cf       	rjmp	.-24     	; 0x227a <vfprintf+0x18c>
    2292:	f5 01       	movw	r30, r10
    2294:	37 fc       	sbrc	r3, 7
    2296:	85 91       	lpm	r24, Z+
    2298:	37 fe       	sbrs	r3, 7
    229a:	81 91       	ld	r24, Z+
    229c:	5f 01       	movw	r10, r30
    229e:	b6 01       	movw	r22, r12
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <fputc>
    22a6:	21 10       	cpse	r2, r1
    22a8:	2a 94       	dec	r2
    22aa:	21 e0       	ldi	r18, 0x01	; 1
    22ac:	82 1a       	sub	r8, r18
    22ae:	91 08       	sbc	r9, r1
    22b0:	81 14       	cp	r8, r1
    22b2:	91 04       	cpc	r9, r1
    22b4:	71 f7       	brne	.-36     	; 0x2292 <vfprintf+0x1a4>
    22b6:	e8 c0       	rjmp	.+464    	; 0x2488 <vfprintf+0x39a>
    22b8:	84 36       	cpi	r24, 0x64	; 100
    22ba:	11 f0       	breq	.+4      	; 0x22c0 <vfprintf+0x1d2>
    22bc:	89 36       	cpi	r24, 0x69	; 105
    22be:	41 f5       	brne	.+80     	; 0x2310 <vfprintf+0x222>
    22c0:	f8 01       	movw	r30, r16
    22c2:	37 fe       	sbrs	r3, 7
    22c4:	07 c0       	rjmp	.+14     	; 0x22d4 <vfprintf+0x1e6>
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	82 81       	ldd	r24, Z+2	; 0x02
    22cc:	93 81       	ldd	r25, Z+3	; 0x03
    22ce:	0c 5f       	subi	r16, 0xFC	; 252
    22d0:	1f 4f       	sbci	r17, 0xFF	; 255
    22d2:	08 c0       	rjmp	.+16     	; 0x22e4 <vfprintf+0x1f6>
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	07 2e       	mov	r0, r23
    22da:	00 0c       	add	r0, r0
    22dc:	88 0b       	sbc	r24, r24
    22de:	99 0b       	sbc	r25, r25
    22e0:	0e 5f       	subi	r16, 0xFE	; 254
    22e2:	1f 4f       	sbci	r17, 0xFF	; 255
    22e4:	f3 2d       	mov	r31, r3
    22e6:	ff 76       	andi	r31, 0x6F	; 111
    22e8:	3f 2e       	mov	r3, r31
    22ea:	97 ff       	sbrs	r25, 7
    22ec:	09 c0       	rjmp	.+18     	; 0x2300 <vfprintf+0x212>
    22ee:	90 95       	com	r25
    22f0:	80 95       	com	r24
    22f2:	70 95       	com	r23
    22f4:	61 95       	neg	r22
    22f6:	7f 4f       	sbci	r23, 0xFF	; 255
    22f8:	8f 4f       	sbci	r24, 0xFF	; 255
    22fa:	9f 4f       	sbci	r25, 0xFF	; 255
    22fc:	f0 68       	ori	r31, 0x80	; 128
    22fe:	3f 2e       	mov	r3, r31
    2300:	2a e0       	ldi	r18, 0x0A	; 10
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	a3 01       	movw	r20, r6
    2306:	0e 94 aa 12 	call	0x2554	; 0x2554 <__ultoa_invert>
    230a:	88 2e       	mov	r8, r24
    230c:	86 18       	sub	r8, r6
    230e:	45 c0       	rjmp	.+138    	; 0x239a <vfprintf+0x2ac>
    2310:	85 37       	cpi	r24, 0x75	; 117
    2312:	31 f4       	brne	.+12     	; 0x2320 <vfprintf+0x232>
    2314:	23 2d       	mov	r18, r3
    2316:	2f 7e       	andi	r18, 0xEF	; 239
    2318:	b2 2e       	mov	r11, r18
    231a:	2a e0       	ldi	r18, 0x0A	; 10
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	25 c0       	rjmp	.+74     	; 0x236a <vfprintf+0x27c>
    2320:	93 2d       	mov	r25, r3
    2322:	99 7f       	andi	r25, 0xF9	; 249
    2324:	b9 2e       	mov	r11, r25
    2326:	8f 36       	cpi	r24, 0x6F	; 111
    2328:	c1 f0       	breq	.+48     	; 0x235a <vfprintf+0x26c>
    232a:	18 f4       	brcc	.+6      	; 0x2332 <vfprintf+0x244>
    232c:	88 35       	cpi	r24, 0x58	; 88
    232e:	79 f0       	breq	.+30     	; 0x234e <vfprintf+0x260>
    2330:	b5 c0       	rjmp	.+362    	; 0x249c <vfprintf+0x3ae>
    2332:	80 37       	cpi	r24, 0x70	; 112
    2334:	19 f0       	breq	.+6      	; 0x233c <vfprintf+0x24e>
    2336:	88 37       	cpi	r24, 0x78	; 120
    2338:	21 f0       	breq	.+8      	; 0x2342 <vfprintf+0x254>
    233a:	b0 c0       	rjmp	.+352    	; 0x249c <vfprintf+0x3ae>
    233c:	e9 2f       	mov	r30, r25
    233e:	e0 61       	ori	r30, 0x10	; 16
    2340:	be 2e       	mov	r11, r30
    2342:	b4 fe       	sbrs	r11, 4
    2344:	0d c0       	rjmp	.+26     	; 0x2360 <vfprintf+0x272>
    2346:	fb 2d       	mov	r31, r11
    2348:	f4 60       	ori	r31, 0x04	; 4
    234a:	bf 2e       	mov	r11, r31
    234c:	09 c0       	rjmp	.+18     	; 0x2360 <vfprintf+0x272>
    234e:	34 fe       	sbrs	r3, 4
    2350:	0a c0       	rjmp	.+20     	; 0x2366 <vfprintf+0x278>
    2352:	29 2f       	mov	r18, r25
    2354:	26 60       	ori	r18, 0x06	; 6
    2356:	b2 2e       	mov	r11, r18
    2358:	06 c0       	rjmp	.+12     	; 0x2366 <vfprintf+0x278>
    235a:	28 e0       	ldi	r18, 0x08	; 8
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	05 c0       	rjmp	.+10     	; 0x236a <vfprintf+0x27c>
    2360:	20 e1       	ldi	r18, 0x10	; 16
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	02 c0       	rjmp	.+4      	; 0x236a <vfprintf+0x27c>
    2366:	20 e1       	ldi	r18, 0x10	; 16
    2368:	32 e0       	ldi	r19, 0x02	; 2
    236a:	f8 01       	movw	r30, r16
    236c:	b7 fe       	sbrs	r11, 7
    236e:	07 c0       	rjmp	.+14     	; 0x237e <vfprintf+0x290>
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	0c 5f       	subi	r16, 0xFC	; 252
    237a:	1f 4f       	sbci	r17, 0xFF	; 255
    237c:	06 c0       	rjmp	.+12     	; 0x238a <vfprintf+0x29c>
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 5f       	subi	r16, 0xFE	; 254
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	a3 01       	movw	r20, r6
    238c:	0e 94 aa 12 	call	0x2554	; 0x2554 <__ultoa_invert>
    2390:	88 2e       	mov	r8, r24
    2392:	86 18       	sub	r8, r6
    2394:	fb 2d       	mov	r31, r11
    2396:	ff 77       	andi	r31, 0x7F	; 127
    2398:	3f 2e       	mov	r3, r31
    239a:	36 fe       	sbrs	r3, 6
    239c:	0d c0       	rjmp	.+26     	; 0x23b8 <vfprintf+0x2ca>
    239e:	23 2d       	mov	r18, r3
    23a0:	2e 7f       	andi	r18, 0xFE	; 254
    23a2:	a2 2e       	mov	r10, r18
    23a4:	89 14       	cp	r8, r9
    23a6:	58 f4       	brcc	.+22     	; 0x23be <vfprintf+0x2d0>
    23a8:	34 fe       	sbrs	r3, 4
    23aa:	0b c0       	rjmp	.+22     	; 0x23c2 <vfprintf+0x2d4>
    23ac:	32 fc       	sbrc	r3, 2
    23ae:	09 c0       	rjmp	.+18     	; 0x23c2 <vfprintf+0x2d4>
    23b0:	83 2d       	mov	r24, r3
    23b2:	8e 7e       	andi	r24, 0xEE	; 238
    23b4:	a8 2e       	mov	r10, r24
    23b6:	05 c0       	rjmp	.+10     	; 0x23c2 <vfprintf+0x2d4>
    23b8:	b8 2c       	mov	r11, r8
    23ba:	a3 2c       	mov	r10, r3
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <vfprintf+0x2d6>
    23be:	b8 2c       	mov	r11, r8
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <vfprintf+0x2d6>
    23c2:	b9 2c       	mov	r11, r9
    23c4:	a4 fe       	sbrs	r10, 4
    23c6:	0f c0       	rjmp	.+30     	; 0x23e6 <vfprintf+0x2f8>
    23c8:	fe 01       	movw	r30, r28
    23ca:	e8 0d       	add	r30, r8
    23cc:	f1 1d       	adc	r31, r1
    23ce:	80 81       	ld	r24, Z
    23d0:	80 33       	cpi	r24, 0x30	; 48
    23d2:	21 f4       	brne	.+8      	; 0x23dc <vfprintf+0x2ee>
    23d4:	9a 2d       	mov	r25, r10
    23d6:	99 7e       	andi	r25, 0xE9	; 233
    23d8:	a9 2e       	mov	r10, r25
    23da:	09 c0       	rjmp	.+18     	; 0x23ee <vfprintf+0x300>
    23dc:	a2 fe       	sbrs	r10, 2
    23de:	06 c0       	rjmp	.+12     	; 0x23ec <vfprintf+0x2fe>
    23e0:	b3 94       	inc	r11
    23e2:	b3 94       	inc	r11
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <vfprintf+0x300>
    23e6:	8a 2d       	mov	r24, r10
    23e8:	86 78       	andi	r24, 0x86	; 134
    23ea:	09 f0       	breq	.+2      	; 0x23ee <vfprintf+0x300>
    23ec:	b3 94       	inc	r11
    23ee:	a3 fc       	sbrc	r10, 3
    23f0:	11 c0       	rjmp	.+34     	; 0x2414 <vfprintf+0x326>
    23f2:	a0 fe       	sbrs	r10, 0
    23f4:	06 c0       	rjmp	.+12     	; 0x2402 <vfprintf+0x314>
    23f6:	b2 14       	cp	r11, r2
    23f8:	88 f4       	brcc	.+34     	; 0x241c <vfprintf+0x32e>
    23fa:	28 0c       	add	r2, r8
    23fc:	92 2c       	mov	r9, r2
    23fe:	9b 18       	sub	r9, r11
    2400:	0e c0       	rjmp	.+28     	; 0x241e <vfprintf+0x330>
    2402:	b2 14       	cp	r11, r2
    2404:	60 f4       	brcc	.+24     	; 0x241e <vfprintf+0x330>
    2406:	b6 01       	movw	r22, r12
    2408:	80 e2       	ldi	r24, 0x20	; 32
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <fputc>
    2410:	b3 94       	inc	r11
    2412:	f7 cf       	rjmp	.-18     	; 0x2402 <vfprintf+0x314>
    2414:	b2 14       	cp	r11, r2
    2416:	18 f4       	brcc	.+6      	; 0x241e <vfprintf+0x330>
    2418:	2b 18       	sub	r2, r11
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <vfprintf+0x332>
    241c:	98 2c       	mov	r9, r8
    241e:	21 2c       	mov	r2, r1
    2420:	a4 fe       	sbrs	r10, 4
    2422:	10 c0       	rjmp	.+32     	; 0x2444 <vfprintf+0x356>
    2424:	b6 01       	movw	r22, r12
    2426:	80 e3       	ldi	r24, 0x30	; 48
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <fputc>
    242e:	a2 fe       	sbrs	r10, 2
    2430:	17 c0       	rjmp	.+46     	; 0x2460 <vfprintf+0x372>
    2432:	a1 fc       	sbrc	r10, 1
    2434:	03 c0       	rjmp	.+6      	; 0x243c <vfprintf+0x34e>
    2436:	88 e7       	ldi	r24, 0x78	; 120
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <vfprintf+0x352>
    243c:	88 e5       	ldi	r24, 0x58	; 88
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	b6 01       	movw	r22, r12
    2442:	0c c0       	rjmp	.+24     	; 0x245c <vfprintf+0x36e>
    2444:	8a 2d       	mov	r24, r10
    2446:	86 78       	andi	r24, 0x86	; 134
    2448:	59 f0       	breq	.+22     	; 0x2460 <vfprintf+0x372>
    244a:	a1 fe       	sbrs	r10, 1
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <vfprintf+0x364>
    244e:	8b e2       	ldi	r24, 0x2B	; 43
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <vfprintf+0x366>
    2452:	80 e2       	ldi	r24, 0x20	; 32
    2454:	a7 fc       	sbrc	r10, 7
    2456:	8d e2       	ldi	r24, 0x2D	; 45
    2458:	b6 01       	movw	r22, r12
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <fputc>
    2460:	89 14       	cp	r8, r9
    2462:	38 f4       	brcc	.+14     	; 0x2472 <vfprintf+0x384>
    2464:	b6 01       	movw	r22, r12
    2466:	80 e3       	ldi	r24, 0x30	; 48
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <fputc>
    246e:	9a 94       	dec	r9
    2470:	f7 cf       	rjmp	.-18     	; 0x2460 <vfprintf+0x372>
    2472:	8a 94       	dec	r8
    2474:	f3 01       	movw	r30, r6
    2476:	e8 0d       	add	r30, r8
    2478:	f1 1d       	adc	r31, r1
    247a:	80 81       	ld	r24, Z
    247c:	b6 01       	movw	r22, r12
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 6e 12 	call	0x24dc	; 0x24dc <fputc>
    2484:	81 10       	cpse	r8, r1
    2486:	f5 cf       	rjmp	.-22     	; 0x2472 <vfprintf+0x384>
    2488:	22 20       	and	r2, r2
    248a:	09 f4       	brne	.+2      	; 0x248e <vfprintf+0x3a0>
    248c:	42 ce       	rjmp	.-892    	; 0x2112 <vfprintf+0x24>
    248e:	b6 01       	movw	r22, r12
    2490:	80 e2       	ldi	r24, 0x20	; 32
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	0e 94 6e 12 	call	0x24dc	; 0x24dc <fputc>
    2498:	2a 94       	dec	r2
    249a:	f6 cf       	rjmp	.-20     	; 0x2488 <vfprintf+0x39a>
    249c:	f6 01       	movw	r30, r12
    249e:	86 81       	ldd	r24, Z+6	; 0x06
    24a0:	97 81       	ldd	r25, Z+7	; 0x07
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <vfprintf+0x3ba>
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	9f ef       	ldi	r25, 0xFF	; 255
    24a8:	2b 96       	adiw	r28, 0x0b	; 11
    24aa:	e2 e1       	ldi	r30, 0x12	; 18
    24ac:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__>

000024b0 <strnlen_P>:
    24b0:	fc 01       	movw	r30, r24
    24b2:	05 90       	lpm	r0, Z+
    24b4:	61 50       	subi	r22, 0x01	; 1
    24b6:	70 40       	sbci	r23, 0x00	; 0
    24b8:	01 10       	cpse	r0, r1
    24ba:	d8 f7       	brcc	.-10     	; 0x24b2 <strnlen_P+0x2>
    24bc:	80 95       	com	r24
    24be:	90 95       	com	r25
    24c0:	8e 0f       	add	r24, r30
    24c2:	9f 1f       	adc	r25, r31
    24c4:	08 95       	ret

000024c6 <strnlen>:
    24c6:	fc 01       	movw	r30, r24
    24c8:	61 50       	subi	r22, 0x01	; 1
    24ca:	70 40       	sbci	r23, 0x00	; 0
    24cc:	01 90       	ld	r0, Z+
    24ce:	01 10       	cpse	r0, r1
    24d0:	d8 f7       	brcc	.-10     	; 0x24c8 <strnlen+0x2>
    24d2:	80 95       	com	r24
    24d4:	90 95       	com	r25
    24d6:	8e 0f       	add	r24, r30
    24d8:	9f 1f       	adc	r25, r31
    24da:	08 95       	ret

000024dc <fputc>:
    24dc:	0f 93       	push	r16
    24de:	1f 93       	push	r17
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	fb 01       	movw	r30, r22
    24e6:	23 81       	ldd	r18, Z+3	; 0x03
    24e8:	21 fd       	sbrc	r18, 1
    24ea:	03 c0       	rjmp	.+6      	; 0x24f2 <fputc+0x16>
    24ec:	8f ef       	ldi	r24, 0xFF	; 255
    24ee:	9f ef       	ldi	r25, 0xFF	; 255
    24f0:	2c c0       	rjmp	.+88     	; 0x254a <fputc+0x6e>
    24f2:	22 ff       	sbrs	r18, 2
    24f4:	16 c0       	rjmp	.+44     	; 0x2522 <fputc+0x46>
    24f6:	46 81       	ldd	r20, Z+6	; 0x06
    24f8:	57 81       	ldd	r21, Z+7	; 0x07
    24fa:	24 81       	ldd	r18, Z+4	; 0x04
    24fc:	35 81       	ldd	r19, Z+5	; 0x05
    24fe:	42 17       	cp	r20, r18
    2500:	53 07       	cpc	r21, r19
    2502:	44 f4       	brge	.+16     	; 0x2514 <fputc+0x38>
    2504:	a0 81       	ld	r26, Z
    2506:	b1 81       	ldd	r27, Z+1	; 0x01
    2508:	9d 01       	movw	r18, r26
    250a:	2f 5f       	subi	r18, 0xFF	; 255
    250c:	3f 4f       	sbci	r19, 0xFF	; 255
    250e:	31 83       	std	Z+1, r19	; 0x01
    2510:	20 83       	st	Z, r18
    2512:	8c 93       	st	X, r24
    2514:	26 81       	ldd	r18, Z+6	; 0x06
    2516:	37 81       	ldd	r19, Z+7	; 0x07
    2518:	2f 5f       	subi	r18, 0xFF	; 255
    251a:	3f 4f       	sbci	r19, 0xFF	; 255
    251c:	37 83       	std	Z+7, r19	; 0x07
    251e:	26 83       	std	Z+6, r18	; 0x06
    2520:	14 c0       	rjmp	.+40     	; 0x254a <fputc+0x6e>
    2522:	8b 01       	movw	r16, r22
    2524:	ec 01       	movw	r28, r24
    2526:	fb 01       	movw	r30, r22
    2528:	00 84       	ldd	r0, Z+8	; 0x08
    252a:	f1 85       	ldd	r31, Z+9	; 0x09
    252c:	e0 2d       	mov	r30, r0
    252e:	09 95       	icall
    2530:	89 2b       	or	r24, r25
    2532:	e1 f6       	brne	.-72     	; 0x24ec <fputc+0x10>
    2534:	d8 01       	movw	r26, r16
    2536:	16 96       	adiw	r26, 0x06	; 6
    2538:	8d 91       	ld	r24, X+
    253a:	9c 91       	ld	r25, X
    253c:	17 97       	sbiw	r26, 0x07	; 7
    253e:	01 96       	adiw	r24, 0x01	; 1
    2540:	17 96       	adiw	r26, 0x07	; 7
    2542:	9c 93       	st	X, r25
    2544:	8e 93       	st	-X, r24
    2546:	16 97       	sbiw	r26, 0x06	; 6
    2548:	ce 01       	movw	r24, r28
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	1f 91       	pop	r17
    2550:	0f 91       	pop	r16
    2552:	08 95       	ret

00002554 <__ultoa_invert>:
    2554:	fa 01       	movw	r30, r20
    2556:	aa 27       	eor	r26, r26
    2558:	28 30       	cpi	r18, 0x08	; 8
    255a:	51 f1       	breq	.+84     	; 0x25b0 <__ultoa_invert+0x5c>
    255c:	20 31       	cpi	r18, 0x10	; 16
    255e:	81 f1       	breq	.+96     	; 0x25c0 <__ultoa_invert+0x6c>
    2560:	e8 94       	clt
    2562:	6f 93       	push	r22
    2564:	6e 7f       	andi	r22, 0xFE	; 254
    2566:	6e 5f       	subi	r22, 0xFE	; 254
    2568:	7f 4f       	sbci	r23, 0xFF	; 255
    256a:	8f 4f       	sbci	r24, 0xFF	; 255
    256c:	9f 4f       	sbci	r25, 0xFF	; 255
    256e:	af 4f       	sbci	r26, 0xFF	; 255
    2570:	b1 e0       	ldi	r27, 0x01	; 1
    2572:	3e d0       	rcall	.+124    	; 0x25f0 <__ultoa_invert+0x9c>
    2574:	b4 e0       	ldi	r27, 0x04	; 4
    2576:	3c d0       	rcall	.+120    	; 0x25f0 <__ultoa_invert+0x9c>
    2578:	67 0f       	add	r22, r23
    257a:	78 1f       	adc	r23, r24
    257c:	89 1f       	adc	r24, r25
    257e:	9a 1f       	adc	r25, r26
    2580:	a1 1d       	adc	r26, r1
    2582:	68 0f       	add	r22, r24
    2584:	79 1f       	adc	r23, r25
    2586:	8a 1f       	adc	r24, r26
    2588:	91 1d       	adc	r25, r1
    258a:	a1 1d       	adc	r26, r1
    258c:	6a 0f       	add	r22, r26
    258e:	71 1d       	adc	r23, r1
    2590:	81 1d       	adc	r24, r1
    2592:	91 1d       	adc	r25, r1
    2594:	a1 1d       	adc	r26, r1
    2596:	20 d0       	rcall	.+64     	; 0x25d8 <__ultoa_invert+0x84>
    2598:	09 f4       	brne	.+2      	; 0x259c <__ultoa_invert+0x48>
    259a:	68 94       	set
    259c:	3f 91       	pop	r19
    259e:	2a e0       	ldi	r18, 0x0A	; 10
    25a0:	26 9f       	mul	r18, r22
    25a2:	11 24       	eor	r1, r1
    25a4:	30 19       	sub	r19, r0
    25a6:	30 5d       	subi	r19, 0xD0	; 208
    25a8:	31 93       	st	Z+, r19
    25aa:	de f6       	brtc	.-74     	; 0x2562 <__ultoa_invert+0xe>
    25ac:	cf 01       	movw	r24, r30
    25ae:	08 95       	ret
    25b0:	46 2f       	mov	r20, r22
    25b2:	47 70       	andi	r20, 0x07	; 7
    25b4:	40 5d       	subi	r20, 0xD0	; 208
    25b6:	41 93       	st	Z+, r20
    25b8:	b3 e0       	ldi	r27, 0x03	; 3
    25ba:	0f d0       	rcall	.+30     	; 0x25da <__ultoa_invert+0x86>
    25bc:	c9 f7       	brne	.-14     	; 0x25b0 <__ultoa_invert+0x5c>
    25be:	f6 cf       	rjmp	.-20     	; 0x25ac <__ultoa_invert+0x58>
    25c0:	46 2f       	mov	r20, r22
    25c2:	4f 70       	andi	r20, 0x0F	; 15
    25c4:	40 5d       	subi	r20, 0xD0	; 208
    25c6:	4a 33       	cpi	r20, 0x3A	; 58
    25c8:	18 f0       	brcs	.+6      	; 0x25d0 <__ultoa_invert+0x7c>
    25ca:	49 5d       	subi	r20, 0xD9	; 217
    25cc:	31 fd       	sbrc	r19, 1
    25ce:	40 52       	subi	r20, 0x20	; 32
    25d0:	41 93       	st	Z+, r20
    25d2:	02 d0       	rcall	.+4      	; 0x25d8 <__ultoa_invert+0x84>
    25d4:	a9 f7       	brne	.-22     	; 0x25c0 <__ultoa_invert+0x6c>
    25d6:	ea cf       	rjmp	.-44     	; 0x25ac <__ultoa_invert+0x58>
    25d8:	b4 e0       	ldi	r27, 0x04	; 4
    25da:	a6 95       	lsr	r26
    25dc:	97 95       	ror	r25
    25de:	87 95       	ror	r24
    25e0:	77 95       	ror	r23
    25e2:	67 95       	ror	r22
    25e4:	ba 95       	dec	r27
    25e6:	c9 f7       	brne	.-14     	; 0x25da <__ultoa_invert+0x86>
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	61 05       	cpc	r22, r1
    25ec:	71 05       	cpc	r23, r1
    25ee:	08 95       	ret
    25f0:	9b 01       	movw	r18, r22
    25f2:	ac 01       	movw	r20, r24
    25f4:	0a 2e       	mov	r0, r26
    25f6:	06 94       	lsr	r0
    25f8:	57 95       	ror	r21
    25fa:	47 95       	ror	r20
    25fc:	37 95       	ror	r19
    25fe:	27 95       	ror	r18
    2600:	ba 95       	dec	r27
    2602:	c9 f7       	brne	.-14     	; 0x25f6 <__ultoa_invert+0xa2>
    2604:	62 0f       	add	r22, r18
    2606:	73 1f       	adc	r23, r19
    2608:	84 1f       	adc	r24, r20
    260a:	95 1f       	adc	r25, r21
    260c:	a0 1d       	adc	r26, r0
    260e:	08 95       	ret

00002610 <__prologue_saves__>:
    2610:	2f 92       	push	r2
    2612:	3f 92       	push	r3
    2614:	4f 92       	push	r4
    2616:	5f 92       	push	r5
    2618:	6f 92       	push	r6
    261a:	7f 92       	push	r7
    261c:	8f 92       	push	r8
    261e:	9f 92       	push	r9
    2620:	af 92       	push	r10
    2622:	bf 92       	push	r11
    2624:	cf 92       	push	r12
    2626:	df 92       	push	r13
    2628:	ef 92       	push	r14
    262a:	ff 92       	push	r15
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	ca 1b       	sub	r28, r26
    263a:	db 0b       	sbc	r29, r27
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	09 94       	ijmp

00002648 <__epilogue_restores__>:
    2648:	2a 88       	ldd	r2, Y+18	; 0x12
    264a:	39 88       	ldd	r3, Y+17	; 0x11
    264c:	48 88       	ldd	r4, Y+16	; 0x10
    264e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2650:	6e 84       	ldd	r6, Y+14	; 0x0e
    2652:	7d 84       	ldd	r7, Y+13	; 0x0d
    2654:	8c 84       	ldd	r8, Y+12	; 0x0c
    2656:	9b 84       	ldd	r9, Y+11	; 0x0b
    2658:	aa 84       	ldd	r10, Y+10	; 0x0a
    265a:	b9 84       	ldd	r11, Y+9	; 0x09
    265c:	c8 84       	ldd	r12, Y+8	; 0x08
    265e:	df 80       	ldd	r13, Y+7	; 0x07
    2660:	ee 80       	ldd	r14, Y+6	; 0x06
    2662:	fd 80       	ldd	r15, Y+5	; 0x05
    2664:	0c 81       	ldd	r16, Y+4	; 0x04
    2666:	1b 81       	ldd	r17, Y+3	; 0x03
    2668:	aa 81       	ldd	r26, Y+2	; 0x02
    266a:	b9 81       	ldd	r27, Y+1	; 0x01
    266c:	ce 0f       	add	r28, r30
    266e:	d1 1d       	adc	r29, r1
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	ed 01       	movw	r28, r26
    267c:	08 95       	ret

0000267e <_exit>:
    267e:	f8 94       	cli

00002680 <__stop_program>:
    2680:	ff cf       	rjmp	.-2      	; 0x2680 <__stop_program>
